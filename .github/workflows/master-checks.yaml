name: master-checks # checks that should be executed only on master branch
on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 2,4,6 * * *'
env:
  KUBECONFIG: k3s.yaml
  GO_VERSION: 1.14
  CI_GOMAXPROCS: 0
  INSOLAR_LOG_LEVEL: warn
jobs:
  tests-on-master:
    name: master-checks
    runs-on: ubuntu-latest
    env:
      GOPATH: /home/runner/work/assured-ledger/assured-ledger/go
    steps:
      - name: Checkout code
        uses: actions/checkout@master
        with:
          path: go/src/github.com/insolar/assured-ledger
      - name: Set up go ${{env.GO_VERSION}}
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Install Protoc
        uses: arduino/setup-protoc@master
      - name: Add bin to path
        run: echo "::add-path::${{env.GOPATH}}/bin"
      - name: Go mod cache setup
        uses: actions/cache@v2
        with:
          path: ${{env.GOPATH}}/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Fetch dependencies
        run: |
          go mod download
          make vendor
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Prepare test utils and check succesful build
        run: make install-build-tools pre-build proto build
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Check if working directory is clean after build
        if: always()
        run: scripts/gitstatus.sh -v
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Run unit and slow tests and check code coverage
        if: always()
        run: make test_with_coverage
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Upload integration_test.log to artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: integration_test_log_master
          path: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/integration_test.log
      - name: Upload integration_extended_test.log to artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: integration_extended_test_master
          path: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/integration_extended_test.log
      - name: Upload coverage to Codecov
        if: always()
        run: bash <(curl -s https://codecov.io/bash) -f ledger-core/coverage.out -n coverage-report
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger
      - name: Add coverage.html to artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: coverage-html
          path: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/coverage.html
      - name: Add coverage.out to artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: coverage-out
          path: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/coverage.out
      - name: Run functional tests multiple times with race detector
        if: always()
        env: # for testrail
          GOTEST: 'go test -json'
        run: make test_func_race > functional_test.log
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Run functional tests many times on `master` with reduced pulse time
        # if: always() # don't uncomment. this will rewrite logs of a previous run!
        run: make test_func_slow
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Install testrail-cli
        if: always()
        run: |
          go get -v -u github.com/insolar/testrail-cli
          cd testrail-cli && go install cmd/testrail-cli/testrail-cli.go
        working-directory: ${{env.GOPATH}}/src/github.com/insolar
      - name: Publish integration tests results to testrail
        if: always()
        env:
          TR_USER: ${{ secrets.TR_USER }}
          TR_PASSWORD: ${{ secrets.TR_PASSWORD }}
        run: make publish_integration_tests
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Publish functional tests results to testrail
        if: always()
        env:
          TR_USER: ${{ secrets.TR_USER }}
          TR_PASSWORD: ${{ secrets.TR_PASSWORD }}
        run: make publish_functest
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Aggregate logs into a single archive
        if: always()
        run: tar --warning=no-file-changed -cvzf nodes-output.tgz .artifacts/launchnet/logs/discoverynodes/*/output.log || true
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Upload logs to artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: nodes-output
          path: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/nodes-output.tgz
      - name: Send failure notification to Slack
        if: ${{ failure() }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTIONS_NOTIFICATIONS_SLACK_HOOK_URL }}
  func-test-kuber-on-master:
    name: func-test-kuber-on-master
    runs-on: ubuntu-latest
    env:
      GOPATH: /home/runner/work/
      V2_PATH: /home/runner/work/assured-ledger/assured-ledger/ledger-core
      USE_MANIFESTS: ci
      GOPROXY: https://proxy.golang.org,https://gocenter.io,direct
      KUBEVAL_VERSION: 0.15.0
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Set up go ${{env.GO_VERSION}}
        uses: actions/setup-go@v1
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Add bin to path
        run: echo "::add-path::${{env.GOPATH}}/bin"
      - name: get kubeval
        run: |
          mkdir -p bin
          curl -L -s --create-dirs https://github.com/instrumenta/kubeval/releases/download/$KUBEVAL_VERSION/kubeval-linux-amd64.tar.gz | tar xvz --exclude='LICENSE' --exclude='README.md' -C $GITHUB_WORKSPACE/bin
          chmod +x $GITHUB_WORKSPACE/bin/kubeval
      - name: add workspace/bin to path
        run: echo "::add-path::$GITHUB_WORKSPACE/bin"
      - name: check resources
        run: |
          sudo lscpu
          free -h
      - name: k3s
        uses: insolar/k3s-gha@master
        with:
          custom_registry: true
          registries_yaml_path: "ledger-core/scripts/deploy/kube/ci/registries.yaml"
          kubectl_version: "v1.18.2"
      - name: deploy k3s-registry
        run: kubectl apply -k ledger-core/scripts/deploy/kube/k3s-registry
      - name: wait for registry to be up and running
        run: kubectl -n registry rollout status deploy/registry --timeout=80s
      - name: deploy ingress
        run: KUBECONFIG=$GITHUB_WORKSPACE/k3s.yaml; make kube_apply_ingress
        working-directory: ${{env.V2_PATH}}
      - name: Go mod cache setup
        uses: actions/cache@v2
        with:
          path: ${{env.GOPATH}}/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Fetch dependencies
        run: |
          go mod download
          make vendor
        working-directory: ${{env.V2_PATH}}
      - name: build images
        run: make docker-build
        working-directory: ${{env.V2_PATH}}
      - name: push assured ledger image to local registry
        run: |
          docker tag insolar/assured-ledger:latest localhost/assured-ledger:latest
          docker push localhost/assured-ledger:latest
      - name: build tools
        run: make install-build-tools
        working-directory: ${{env.V2_PATH}}
      - name: run insolar net
        run: |
          export KUBECONFIG=$GITHUB_WORKSPACE/k3s.yaml
          make kube_start_net
          kubectl -n insolar describe ing api-proxy
        working-directory: ${{env.V2_PATH}}
      - name: run tests
        run: make test_func_kubernetes_ci
        working-directory: ${{env.V2_PATH}}
      - name: collect artifacts
        if: always()
        run: |
          export KUBECONFIG=$GITHUB_WORKSPACE/k3s.yaml
          make kube_collect_artifacts
        working-directory: ${{env.V2_PATH}}
      - name: Aggregate logs into a single archive
        if: always()
        run: tar --warning=no-file-changed -cvzf ${{env.V2_PATH}}/kube-nodes-output.tgz /tmp/insolar/logs/* || true
      - name: Upload logs to artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: kube-nodes-output
          path: ${{env.V2_PATH}}/kube-nodes-output.tgz
      - name: Send failure notification to Slack
        if: ${{ failure() }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTIONS_NOTIFICATIONS_SLACK_HOOK_URL }}
