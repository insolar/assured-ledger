name: ve-performance check
on:
  #pull_request:
  schedule:
    - cron: '0 0 * * *'
env:
  KUBECONFIG: "${{ github.workspace }}/aks.yaml"
  GO_VERSION: 1.14
  CI_GOMAXPROCS: 0
  INSOLAR_LOG_LEVEL: warn
  GOPATH: /home/runner/work/
  GOPROXY: https://proxy.golang.org,https://goproxy.io,direct
  CORE_PATH: /home/runner/work/assured-ledger/assured-ledger/ledger-core
  USE_MANIFESTS: aks
  ACR_HOST: usciregistry.azurecr.io
jobs:
  ve-performance:
    name: ve-performance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Go mod cache setup
        uses: actions/cache@v2
        with:
          path: ${{env.GOPATH}}/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: build test
        working-directory: ${{ env.CORE_PATH }}
        run: |
          cd load
          go build cmd/load/main.go
      - name: Set up go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Add bin to path
        run: echo "::add-path::${{ env.GOPATH }}/bin"
      - name: Add workspace/bin to path
        run: echo "::add-path::$GITHUB_WORKSPACE/bin"
      - name: save kubeconfig
        run: echo "${{secrets.CLOUD_KUBECONFIG}}" >> aks.yaml
      - name: Go mod cache setup
        uses: actions/cache@v2
        with:
          path: ${{env.GOPATH}}/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Fetch dependencies
        run: |
          go mod download
          make vendor
        working-directory: ${{env.CORE_PATH}}
      - name: Build docker images
        run: make docker-build
        working-directory: ${{ env.CORE_PATH }}
      - name: Push assured ledger image to Azure container registry registry
        run: |
          docker login $ACR_HOST --username ${{secrets.ACR_SP_ID}} --password ${{secrets.ACR_SP_SECRET}}
          docker tag insolar/assured-ledger:latest $ACR_HOST/assured-ledger:${GITHUB_SHA:0:8}
          docker push $ACR_HOST/assured-ledger:${GITHUB_SHA:0:8}
      - name: copy docker auth secret
        run: cp /home/runner/.docker/config.json ledger-core/scripts/deploy/kube/aks/dockerconfigjson
      - name: template GIT_SHA to deployment manifests
        run: |
          sed -i "s/placeholder/${GITHUB_SHA:0:8}/g" ledger-core/scripts/deploy/kube/*/*.*
          sed -i "s/placeholder/${GITHUB_SHA:0:8}/g" ledger-core/scripts/deploy/kube/*/configuration/*.*
          sed -i "s/placeholder/${GITHUB_SHA:0:8}/g" ledger-core/load/gen_cfg/*.*
          cat /home/runner/work/assured-ledger/assured-ledger/ledger-core/load/gen_cfg/generator_assured_ledger.yaml
      - name: run 5node network
        run: kubectl apply -k ledger-core/scripts/deploy/kube/5node
      - name: wait for successfull rollout
        run: kubectl -n ${GITHUB_SHA:0:8} rollout status sts/virtual
      - name: pulsewatcher
        run: |
          for try in {0..100}; do
            if kubectl -n ${GITHUB_SHA:0:8} exec -i deploy/pulsewatcher -- bash -c 'pulsewatcher -c /etc/pulsewatcher/pulsewatcher.yaml -s' | grep 'READY' | grep -v 'NOT'; then
              echo "network ready!"; exit 0
            else echo -n '.'; sleep 5
            fi
          done
      - name: start test 5 node
        run: |
          cd ${{ env.CORE_PATH }}/load/
          NETWORK_NODES=5 ./main -gen_config ${{ env.CORE_PATH }}/load/gen_cfg/generator_assured_ledger.yaml -config ${{ env.CORE_PATH }}/load/run_configs/all_sequence.yaml
          cat scaling.csv
      - name: cleanup
        run: kubectl delete ns ${GITHUB_SHA:0:8} --ignore-not-found=true
      - name: run 10node network
        run: kubectl apply -k ledger-core/scripts/deploy/kube/10node
      - name: wait for successfull rollout
        run: kubectl -n ${GITHUB_SHA:0:8} rollout status sts/virtual
      - name: pulsewatcher
        run: |
          for try in {0..100}; do
            if kubectl -n ${GITHUB_SHA:0:8} exec -i deploy/pulsewatcher -- bash -c 'pulsewatcher -c /etc/pulsewatcher/pulsewatcher.yaml -s' | grep 'READY' | grep -v 'NOT'; then
              echo "network ready!"; exit 0
            else echo -n '.'; sleep 5
            fi
          done
      - name: start test 10 node
        run: |
          cd ${{ env.CORE_PATH }}/load/
          NETWORK_NODES=10 ./main -gen_config ${{ env.CORE_PATH }}/load/gen_cfg/generator_assured_ledger.yaml -config ${{ env.CORE_PATH }}/load/run_configs/all_sequence.yaml
          cat scaling.csv
      - name: cleanup
        run: kubectl delete ns ${GITHUB_SHA:0:8} --ignore-not-found=true
      - name: run 15node network
        run: kubectl apply -k ledger-core/scripts/deploy/kube/15node
      - name: wait for successfull rollout
        run: kubectl -n ${GITHUB_SHA:0:8} rollout status sts/virtual
      - name: pulsewatcher
        run: |
          for try in {0..100}; do
            if kubectl -n ${GITHUB_SHA:0:8} exec -i deploy/pulsewatcher -- bash -c 'pulsewatcher -c /etc/pulsewatcher/pulsewatcher.yaml -s' | grep 'READY' | grep -v 'NOT'; then
              echo "network ready!"; exit 0
            else echo -n '.'; sleep 5
            fi
          done
      - name: start test 15 node
        run: |
          cd ${{ env.CORE_PATH }}/load/
          NETWORK_NODES=15 ./main -gen_config ${{ env.CORE_PATH }}/load/gen_cfg/generator_assured_ledger.yaml -config ${{ env.CORE_PATH }}/load/run_configs/all_sequence.yaml
          cat scaling.csv
      - name: cleanup
        run: kubectl delete ns ${GITHUB_SHA:0:8} --ignore-not-found=true
      - name: run 20node network
        run: kubectl apply -k ledger-core/scripts/deploy/kube/20node
      - name: wait for successfull rollout
        run: kubectl -n ${GITHUB_SHA:0:8}rollout status sts/virtual
      - name: pulsewatcher
        run: |
          for try in {0..100}; do
            if kubectl -n ${GITHUB_SHA:0:8} exec -i deploy/pulsewatcher -- bash -c 'pulsewatcher -c /etc/pulsewatcher/pulsewatcher.yaml -s' | grep 'READY' | grep -v 'NOT'; then
              echo "network ready!"; exit 0
            else echo -n '.'; sleep 5
            fi
          done
      - name: start test 20 node
        run: |
          cd ${{ env.CORE_PATH }}/load/
          NETWORK_NODES=20 ./main -gen_config ${{ env.CORE_PATH }}/load/gen_cfg/generator_assured_ledger.yaml -config ${{ env.CORE_PATH }}/load/run_configs/all_sequence.yaml
          cat scaling.csv
      - name: cleanup
        if: always()
        run: kubectl delete ns ${GITHUB_SHA:0:8} --ignore-not-found=true
      - name: Send report
        run: |
          cd ${{ env.CORE_PATH }}
          go run ~/work/pkg/mod/github.com/skudasov/loadgen@v0.0.16/cmd/loadcli.go -gen_config ${{ env.CORE_PATH }}/load/gen_cfg/generator_assured_ledger.yaml scaling_report ${{ env.CORE_PATH }}/load/scaling.csv out.png
          filename=$(date +"%F-%H-%M")-${GITHUB_SHA:0:8}.png
          echo '::set-env name=FILE_NAME::'${filename}
          curl -basic --user "${{ secrets.WEBDAV_USERNAME }}:${{ secrets.WEBDAV_PASSWORD }}" -T out.png "https://reports.garage.insolar.io/ve-perf-tests/${filename}"
      - name: Send notification to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: https://reports.garage.insolar.io/ve-perf-tests/$FILE_NAME
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTIONS_NOTIFICATIONS_SLACK_HOOK_URL }}
