name: linux-checks
on:
  push:
#    branches:
#      - master
  pull_request:
  schedule:
    - cron: '0 2,4,6 * * *'
env:
  GO_VERSION: 1.14
  CI_GOMAXPROCS: 0
  INSOLAR_LOG_LEVEL: warn
  GOTEST: 'gotestsum --'
jobs:
  tests-on-linux:
    name: checks # don't change, this name is used in repository restricts!
    runs-on: ubuntu-latest
    env:
      GOPATH: /home/runner/work/assured-ledger/assured-ledger/go
    steps:
      - name: Checkout code
        uses: actions/checkout@master
        with:
          path: go/src/github.com/insolar/assured-ledger
      - name: Set up go ${{env.GO_VERSION}}
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Install Protoc
        uses: arduino/setup-protoc@master
      - name: Add bin to path
        run: echo "::add-path::${{env.GOPATH}}/bin"
      - name: Fetch vendor and check succesful build
        run: |
          go mod download
          make vendor install-build-tools pre-build proto build
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2
      - name: Check if working directory is clean after build
        if: always()
        run: scripts/gitstatus.sh -v
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2
      - name: Install golangci-lint
        if: always()
        run: curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.23.6
      - name: Run golangci-lint
        if: always()
        run: make lint
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2
      - name: Run unit and slow tests and check code coverage
        if: always()
        run: make test_with_coverage
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2
      - name: Run functional tests multiple times with race detector
        if: always()
        run: make test_func_race
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2
      - name: Aggregate logs into a single archive
        if: always()
        run: tar --warning=no-file-changed -cvzf nodes-output.tgz .artifacts/launchnet/logs/discoverynodes/*/output.log || true
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2
      - name: Upload logs to artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: nodes-output
          path: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2/nodes-output.tgz
      - name: Upload coverage to Codecov
        run: ./scripts/dev/codecov-upload.sh -f ./coverage.out -y ./.codecov.yml -n coverage-report -F
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2
      - name: Add coverage.html to artifacts
        uses: actions/upload-artifact@v1
        with:
          name: coverage-html
          path: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2/coverage.html
      - name: Add coverage.out to artifacts
        uses: actions/upload-artifact@v1
        with:
          name: coverage-out
          path: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2/coverage.out
  func-test-kuber:
    name: func-test-kuber # don't change, this name is used in repository restricts!
    runs-on: ubuntu-latest
    env:
      GOPATH: /home/runner/work/assured-ledger/go
      KUBECTL_VERSION: v1.18.2
      KUBEVAL_VERSION: 0.15.0
      K3S_TAG: v1.17.4-k3s1
    steps:
      - name: Checkout code
        uses: actions/checkout@master
#        with:
#          path: go/src/github.com/insolar/assured-ledger
      - name: Set up go ${{env.GO_VERSION}}
        uses: actions/setup-go@v1
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Add bin to path
        run: echo "::add-path::${{env.GOPATH}}/bin"
      - name: get kubectl
        run: |
          curl -L -s --create-dirs https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl -o bin/kubectl
          chmod +x $GITHUB_WORKSPACE/bin/kubectl
      - name: get kubeval
        run: |
          curl -L -s --create-dirs https://github.com/instrumenta/kubeval/releases/download/$KUBEVAL_VERSION/kubeval-linux-amd64.tar.gz | tar xvz --exclude='LICENSE' --exclude='README.md' -C $GITHUB_WORKSPACE/bin
          chmod +x $GITHUB_WORKSPACE/bin/kubeval
      - name: add workspace/bin to path
        run: echo "::add-path::$GITHUB_WORKSPACE/bin"
#      - name: yamllint
#        uses: docker://yellowmegaman/container-yamllint:1.17.0
#        with:
#          args: -d yamllint deploy/kube
#      - name: kubeval check
#        run: find deploy/kube/*.yaml -maxdepth 0 -type d -exec sh -c 'echo "$0"; kubectl kustomize "$0" | kubeval --exit-on-error --strict' {} \;
      - name: check resources
        run: |
          sudo lscpu
          free -h
      - name: fire up k3s
        run: |
          touch k3s.yaml
          docker run -d --name=k3s --net=host --privileged --tmpfs /run --tmpfs /var/run -e "K3S_TOKEN=197813248412582" -p 6443:6443 -v "$PWD"/registries.yaml:/etc/rancher/k3s/registries.yaml -v "$PWD"/k3s.yaml:/etc/rancher/k3s/k3s.yaml rancher/k3s:$K3S_TAG server
      - name: wait for k3s
        run:  until kubectl --kubeconfig=k3s.yaml version; do echo "k3s is not up yet"; sleep 3; done
      - name: describe node
        run: |
          kubectl --kubeconfig=k3s.yaml get no
          kubectl --kubeconfig=k3s.yaml describe no
          docker ps
      - name: apply ingress
        run:  kubectl --kubeconfig=k3s.yaml apply -f ledger-core/v2/deploy/ingress-nginx.yaml
      - name: launch registry
        run: docker run -d -p 5000:5000 --restart=always --name registry registry:2
      - name: build images
        run: |
          pwd
          cd $GITHUB_WORKSPACE/ledger-core/v2
          make docker-build
      - name: push assured ledger image to local registry
        run: |
          docker tag insolar/assured-ledger:latest localhost:5000/assured-ledger:latest
          docker push localhost:5000/assured-ledger:latest
      - name: wait for ingress
        run:  until kubectl --kubeconfig=k3s.yaml get pods -n ingress-nginx | grep controller | grep Running; do echo "ingress is not up yet"; sleep 1; done
      - name: deploy insolar network
        run: kubectl --kubeconfig=k3s.yaml apply -f ledger-core/v2/deploy/kube/generated.yaml
      - name: debug
        run: |
          sleep 5
          kubectl --kubeconfig=k3s.yaml get ns
          kubectl --kubeconfig=k3s.yaml describe ns insolar
          kubectl --kubeconfig=k3s.yaml -n insolar describe pods
          kubectl --kubeconfig=k3s.yaml -n insolar describe statefulsets/virtual
          kubectl --kubeconfig=k3s.yaml -n insolar get po
          docker images insolar/assured-ledger
          docker ps
      - name: wait for bootstrap pod to up and running
        run: until kubectl --kubeconfig=k3s.yaml -n insolar get po --field-selector=status.phase=Running | grep bootstrap; do echo "nope"; sleep 1; done
      - name: bootstrap logs
        run: kubectl --kubeconfig=k3s.yaml -n insolar logs -f bootstrap
      - name: wait for net
        run: |
          ready=0
          for try in {0..30}; do
            if kubectl --kubeconfig=k3s.yaml -n insolar exec -i deploy/pulsewatcher -- bash -c 'pulsewatcher -c /etc/pulsewatcher/pulsewatcher.yaml -s' | grep 'READY' | grep -v 'NOT'; then
              echo "network ready!"; ready=1; exit 0
            else
              kubectl --kubeconfig=k3s.yaml -n insolar get po
              kubectl --kubeconfig=k3s.yaml -n insolar logs --tail=20 services/pulsewatcher
              echo "network not ready"; sleep 1
            fi
          done
          if [ $ready = 0 ]; then
            echo "network was not started"
            #exit 1
          fi
      - name: look pulsewatcher
        run: kubectl --kubeconfig=k3s.yaml -n insolar logs --tail=20 services/pulsewatcher
      - name: debug-2
        run: |
          kubectl --kubeconfig=k3s.yaml -n insolar describe pods
          kubectl --kubeconfig=k3s.yaml -n insolar describe statefulsets/virtual
          kubectl --kubeconfig=k3s.yaml -n insolar get po
      - name: run tests
        run: |
          go get gotest.tools/gotestsum
          cd $GITHUB_WORKSPACE/ledger-core/v2
          make test_func_kubernetes_ci
      - name: stop insolar network
        run:  kubectl --kubeconfig=k3s.yaml delete -f ledger-core/v2/deploy/kube/generated.yaml
