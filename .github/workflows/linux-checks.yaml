name: linux-checks # checks executed on Linux, only on pull requests
on:
  push:
    branches:
      - staging
      - trying
  pull_request:
env:
  KUBECONFIG: k3s.yaml
  GO_VERSION: 1.14
  CI_GOMAXPROCS: 0
  INSOLAR_LOG_LEVEL: warn
jobs:
  pre-build-check:
    name: pre-build-check # don't change, this name is used in repository restricts
    runs-on: ubuntu-latest
    env:
      GOPATH: /home/runner/work/assured-ledger/assured-ledger/go
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: go/src/github.com/insolar/assured-ledger
          # Check out pull request's HEAD commit instead of the merge commit to
          # work-around an issue where wrong a commit is being checked out.
          # For more details, see:
          # https://github.com/actions/checkout/issues/299.
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up go ${{env.GO_VERSION}}
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Install Protoc
        uses: arduino/setup-protoc@master
      - name: Add bin to path
        run: echo "${{env.GOPATH}}/bin" >> $GITHUB_PATH
      - name: Go mod cache setup
        uses: actions/cache@v2
        with:
          path: ${{env.GOPATH}}/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Fetch dependencies
        run: |
          go mod download
          make vendor
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Build tools
        run: make install-build-tools
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Check succesful build
        run: make pre-build proto build
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Check if working directory is clean after build
        if: always()
        run: scripts/gitstatus.sh -v
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Install golangci-lint
        if: always()
        run: curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.23.6
      - name: Run golangci-lint
        if: always()
        run: make lint
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
  tests-on-linux:
    name: checks # don't change, this name is used in repository restricts!
    runs-on: ubuntu-latest
    env:
      GOPATH: /home/runner/work/assured-ledger/assured-ledger/go
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: go/src/github.com/insolar/assured-ledger
          # Check out pull request's HEAD commit instead of the merge commit to
          # work-around an issue where wrong a commit is being checked out.
          # For more details, see:
          # https://github.com/actions/checkout/issues/299.
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up go ${{env.GO_VERSION}}
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Install Protoc
        uses: arduino/setup-protoc@master
      - name: Add bin to path
        run: echo "${{env.GOPATH}}/bin" >> $GITHUB_PATH
      - name: Go mod cache setup
        uses: actions/cache@v2
        with:
          path: ${{env.GOPATH}}/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Fetch dependencies
        run: |
          go mod download
          make vendor
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Prepare go-acc
        run: make install-build-tools
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Run unit and slow tests and check code coverage
        if: always()
        run: make test_with_coverage
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Upload integration_extended_test.log to artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: integration_extended_test_linux
          path: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/integration_extended_test.log
      - name: Run functional tests multiple times with race detector
        if: always()
        run: make test_func_race
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Run functional tests multiple times with race detector as local cloud
        if: always()
        run: make test_func_cloud_race > functional_test_cloud.log
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Upload functional_test_cloud.log to artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: functional_test_cloud_linux
          path: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/functional_test_cloud.log
      - name: Aggregate logs into a single archive
        if: always()
        run: tar --warning=no-file-changed -cvzf nodes-output.tgz .artifacts/launchnet/logs/discoverynodes/*/output.log || true
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core
      - name: Upload logs to artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: nodes-output
          path: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/nodes-output.tgz
      - name: Upload coverage to Codecov
        run: bash <(curl -s https://codecov.io/bash) -f ledger-core/coverage.out -n coverage-report
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger
      - name: Add coverage.html to artifacts
        uses: actions/upload-artifact@v1
        with:
          name: coverage-html
          path: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/coverage.html
      - name: Add coverage.out to artifacts
        uses: actions/upload-artifact@v1
        with:
          name: coverage-out
          path: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/coverage.out
  func-test-kuber:
    name: func-test-kuber # don't change, this name is used in repository restricts!
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        target: [k3s]
    env:
      GOPATH: /home/runner/work
      V2_PATH: /home/runner/work/assured-ledger/assured-ledger/ledger-core
      USE_MANIFESTS: ci
      GOPROXY: https://proxy.golang.org,https://gocenter.io,direct
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          # Check out pull request's HEAD commit instead of the merge commit to
          # work-around an issue where wrong a commit is being checked out.
          # For more details, see:
          # https://github.com/actions/checkout/issues/299.
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Preparation - github token for gitops access
        run: git config --global url."https://${{secrets.INS_SERVICE_PAT}}@github.com/".insteadOf "https://github.com/"
      - name: Preparation - set prerequisite variables, full sha is ${{github.sha}}
        env:
          TARGET: ${{matrix.target}}
        run: |
          echo "INSOLAR_TAG=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          echo "INSOLAR_NETWORK_SIZE=${TARGET}" >> $GITHUB_ENV
          echo "INSOLAR_NAMESPACE=${GITHUB_SHA:0:8}-${TARGET}" >> $GITHUB_ENV
          echo "INSOLAR_DESIRED_UPTIME=300" >> $GITHUB_ENV
          echo "INSOLAR_NETWORK_SIZE_INT=$(echo $TARGET | awk '{gsub(/[^[0-9]]*/,"");print}')" >> $GITHUB_ENV
          echo "REPORT_WEBDAV_DIRECTORY=consensus-checks/$(date +"%Y%m%d-%H%M")-pull-$(echo ${{github.ref}} | cut -d '/' -f3)-${GITHUB_SHA:0:8}" >> $GITHUB_ENV
      - name: Set up go ${{env.GO_VERSION}}
        uses: actions/setup-go@v1
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Add bin to path
        run: echo "${{env.GOPATH}}/bin" >> $GITHUB_PATH
      - name: k3s
        uses: insolar/k3s-gha@master
        with:
          custom_registry: true
          registries_yaml_path: "ledger-core/scripts/deploy/kube/registries.yaml"
          kubectl_version: "v1.18.2"
      - name: deploy traefik
        run: kubectl apply -k ledger-core/scripts/deploy/kube/gitops/traefik
      - name: wait for traefik to be up and running
        run: kubectl -n kube-system rollout status deploy/traefik-ingress-controller --timeout=80s
      - name: deploy k3s-registry
        run: kubectl apply -k ledger-core/scripts/deploy/kube/gitops/k3s-registry
      - name: wait for registry to be up and running
        run: kubectl -n registry rollout status deploy/registry --timeout=80s
      - name: Go mod cache setup
        uses: actions/cache@v2
        with:
          path: ${{env.GOPATH}}/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Fetch dependencies
        run: |
          go mod download
          make vendor
        working-directory: ${{env.V2_PATH}}
      - name: build images
        run: make docker-build
        working-directory: ${{env.V2_PATH}}
      - name: push assured ledger image to local registry
        run: |
          docker tag insolar/assured-ledger:latest localhost/assured-ledger:$INSOLAR_TAG
          docker push localhost/assured-ledger:$INSOLAR_TAG
      - name: build tools
        run: make install-build-tools
        working-directory: ${{env.V2_PATH}}
      - name: Deploy network
        run: kubectl kustomize ledger-core/scripts/deploy/kube/gitops/"$INSOLAR_NETWORK_SIZE" | envsubst '${INSOLAR_NAMESPACE} ${INSOLAR_TAG}' | kubectl -n $INSOLAR_NAMESPACE apply -f -
      - name: deploy ingress
        run: cat ledger-core/scripts/deploy/kube/k3s-ingressroute.yaml | envsubst '${INSOLAR_NAMESPACE}' | kubectl apply -f -
      - name: Rollout check (IF THIS STEP FAILED - CALL DEV, CHECK LOGS, YELLOW ALERT)
        run: kubectl -n $INSOLAR_NAMESPACE rollout status sts/virtual --timeout=5m
      - name: get bootstrap.yaml
        run: |
          mkdir -p /tmp/insolar
          kubectl -n $INSOLAR_NAMESPACE get cm bootstrap-yaml -o 'go-template={{index .data "bootstrap.yaml"}}' | tee /tmp/insolar/bootstrap.yaml
      - name: run tests
        run: make test_func_kubernetes_ci
        working-directory: ${{env.V2_PATH}}
