name: linux-checks
on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron: '0 2,4,6 * * *'
env:
  GO_VERSION: 1.14
  CI_GOMAXPROCS: 0
  INSOLAR_LOG_LEVEL: warn
  GOTEST: 'gotestsum --'
jobs:
  tests-on-linux:
    name: checks # don't change, this name is used in repository restricts!
    runs-on: ubuntu-latest
    env:
      GOPATH: /home/runner/work/assured-ledger/assured-ledger/go
    steps:
      - name: Checkout code
        uses: actions/checkout@master
        with:
          path: go/src/github.com/insolar/assured-ledger
      - name: Set up go ${{env.GO_VERSION}}
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Install Protoc
        uses: arduino/setup-protoc@master
      - name: Add bin to path
        run: echo "::add-path::${{env.GOPATH}}/bin"
      - name: Fetch vendor and check succesful build
        run: |
          go mod download
          make vendor install-build-tools pre-build proto build
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2
      - name: Check if working directory is clean after build
        if: always()
        run: scripts/gitstatus.sh -v
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2
      - name: Install golangci-lint
        if: always()
        run: curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.23.6
      - name: Run golangci-lint
        if: always()
        run: make lint
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2
      - name: Run unit and slow tests and check code coverage
        if: always()
        run: make test_with_coverage
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2
      - name: Run functional tests multiple times with race detector
        if: always()
        run: make test_func_race
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2
      - name: Aggregate logs into a single archive
        if: always()
        run: tar --warning=no-file-changed -cvzf nodes-output.tgz .artifacts/launchnet/logs/discoverynodes/*/output.log || true
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2
      - name: Upload logs to artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: nodes-output
          path: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2/nodes-output.tgz
      - name: Upload coverage to Codecov
        run: bash <(curl -s https://codecov.io/bash) -f ledger-core/v2/coverage.out -y ledger-core/v2/.codecov.yml -n coverage-report
        working-directory: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger
      - name: Add coverage.html to artifacts
        uses: actions/upload-artifact@v1
        with:
          name: coverage-html
          path: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2/coverage.html
      - name: Add coverage.out to artifacts
        uses: actions/upload-artifact@v1
        with:
          name: coverage-out
          path: ${{env.GOPATH}}/src/github.com/insolar/assured-ledger/ledger-core/v2/coverage.out
  func-test-kuber:
    name: func-test-kuber # don't change, this name is used in repository restricts!
    runs-on: ubuntu-latest
    env:
      GOPATH: /home/runner/work/
      V2_PATH: /home/runner/work/assured-ledger/assured-ledger/ledger-core/v2
      INSOLAR_IMAGE: ci:5000/assured-ledger
      USE_MANIFESTS: ci
      GOPROXY: https://proxy.golang.org,https://goproxy.io,direct
      KUBECTL: kubectl --kubeconfig=/tmp/k3s.yaml
      KUBECTL_VERSION: v1.18.2
      KUBEVAL_VERSION: 0.15.0
      K3S_TAG: v1.17.4-k3s1
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Set up go ${{env.GO_VERSION}}
        uses: actions/setup-go@v1
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Add bin to path
        run: echo "::add-path::${{env.GOPATH}}/bin"
      - name: get kubectl
        run: |
          curl -L -s --create-dirs https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl -o bin/kubectl
          chmod +x $GITHUB_WORKSPACE/bin/kubectl
      - name: get kubeval
        run: |
          curl -L -s --create-dirs https://github.com/instrumenta/kubeval/releases/download/$KUBEVAL_VERSION/kubeval-linux-amd64.tar.gz | tar xvz --exclude='LICENSE' --exclude='README.md' -C $GITHUB_WORKSPACE/bin
          chmod +x $GITHUB_WORKSPACE/bin/kubeval
      - name: add workspace/bin to path
        run: echo "::add-path::$GITHUB_WORKSPACE/bin"
      - name: check resources
        run: |
          sudo lscpu
          free -h
      - name: fire up k3s
        run: |
          touch /tmp/k3s.yaml
          docker run -d --name=k3s --net=host --privileged --tmpfs /run --tmpfs /var/run -p 6443:6443 -v "$PWD"/scripts/deploy/kube/ci/registries.yaml:/etc/rancher/k3s/registries.yaml -v /tmp/k3s.yaml:/etc/rancher/k3s/k3s.yaml rancher/k3s:$K3S_TAG server --disable traefik
        working-directory: ${{env.V2_PATH}}
      - name: launch registry
        run: docker run -d -p 5000:5000 --restart=always --name registry registry:2
      - name: wait for k3s
        run: |
          for try in {0..60}; do
            if $KUBECTL version; then
              echo "k3s started"
              exit 0
            fi
            sleep 2s
          done

          echo "failed to start k3s server"
          docker logs k3s
          exit 1
      - name: describe node
        run: |
          ${{env.KUBECTL}} get no
          ${{env.KUBECTL}} describe no
          docker ps
        working-directory: ${{env.V2_PATH}}
      - name: install ingress
        run: make kube_apply_ingress
        working-directory: ${{env.V2_PATH}}
      - name: build images
        run: make docker-build
        working-directory: ${{env.V2_PATH}}
      - name: push assured ledger image to local registry
        run: |
          # this tags is for local registry that k3s works with. 2 tags for properly working checks, see scripts/deploy/kube/run.sh
          docker tag insolar/assured-ledger:latest localhost:5000/assured-ledger:latest
          docker tag insolar/assured-ledger:latest ci:5000/assured-ledger:latest
          docker push localhost:5000/assured-ledger:latest
      - name: run insolar net
        run: |
          go mod download
          make vendor install-build-tools kube_start_net
        working-directory: ${{env.V2_PATH}}
      - name: run tests
        run: make test_func_kubernetes_ci
        working-directory: ${{env.V2_PATH}}
      - name: collect artifacts
        if: always()
        run: make kube_collect_artifacts
        working-directory: ${{env.V2_PATH}}
      - name: Aggregate logs into a single archive
        if: always()
        run: tar --warning=no-file-changed -cvzf ${{env.V2_PATH}}/kube-nodes-output.tgz /tmp/insolar/logs/* || true
      - name: Upload logs to artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: kube-nodes-output
          path: ${{env.V2_PATH}}/kube-nodes-output.tgz
