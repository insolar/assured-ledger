package network

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"crypto"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/assured-ledger/ledger-core/cryptography"
	"github.com/insolar/assured-ledger/ledger-core/insolar/node"
	mm_nodeinfo "github.com/insolar/assured-ledger/ledger-core/insolar/nodeinfo"
	"github.com/insolar/assured-ledger/ledger-core/network/consensus/gcpv2/api/member"
	"github.com/insolar/assured-ledger/ledger-core/reference"
)

// NetworkNodeMock implements nodeinfo.NetworkNode
type NetworkNodeMock struct {
	t minimock.Tester

	funcAddress          func() (s1 string)
	inspectFuncAddress   func()
	afterAddressCounter  uint64
	beforeAddressCounter uint64
	AddressMock          mNetworkNodeMockAddress

	funcGetNodeID          func() (s1 node.ShortNodeID)
	inspectFuncGetNodeID   func()
	afterGetNodeIDCounter  uint64
	beforeGetNodeIDCounter uint64
	GetNodeIDMock          mNetworkNodeMockGetNodeID

	funcGetPower          func() (p1 mm_nodeinfo.Power)
	inspectFuncGetPower   func()
	afterGetPowerCounter  uint64
	beforeGetPowerCounter uint64
	GetPowerMock          mNetworkNodeMockGetPower

	funcGetPrimaryRole          func() (p1 member.PrimaryRole)
	inspectFuncGetPrimaryRole   func()
	afterGetPrimaryRoleCounter  uint64
	beforeGetPrimaryRoleCounter uint64
	GetPrimaryRoleMock          mNetworkNodeMockGetPrimaryRole

	funcGetReference          func() (g1 reference.Global)
	inspectFuncGetReference   func()
	afterGetReferenceCounter  uint64
	beforeGetReferenceCounter uint64
	GetReferenceMock          mNetworkNodeMockGetReference

	funcGetSignature          func() (ba1 []byte, s1 cryptography.Signature)
	inspectFuncGetSignature   func()
	afterGetSignatureCounter  uint64
	beforeGetSignatureCounter uint64
	GetSignatureMock          mNetworkNodeMockGetSignature

	funcGetState          func() (s1 mm_nodeinfo.State)
	inspectFuncGetState   func()
	afterGetStateCounter  uint64
	beforeGetStateCounter uint64
	GetStateMock          mNetworkNodeMockGetState

	funcPublicKey          func() (p1 crypto.PublicKey)
	inspectFuncPublicKey   func()
	afterPublicKeyCounter  uint64
	beforePublicKeyCounter uint64
	PublicKeyMock          mNetworkNodeMockPublicKey
}

// NewNetworkNodeMock returns a mock for nodeinfo.NetworkNode
func NewNetworkNodeMock(t minimock.Tester) *NetworkNodeMock {
	m := &NetworkNodeMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddressMock = mNetworkNodeMockAddress{mock: m}

	m.GetNodeIDMock = mNetworkNodeMockGetNodeID{mock: m}

	m.GetPowerMock = mNetworkNodeMockGetPower{mock: m}

	m.GetPrimaryRoleMock = mNetworkNodeMockGetPrimaryRole{mock: m}

	m.GetReferenceMock = mNetworkNodeMockGetReference{mock: m}

	m.GetSignatureMock = mNetworkNodeMockGetSignature{mock: m}

	m.GetStateMock = mNetworkNodeMockGetState{mock: m}

	m.PublicKeyMock = mNetworkNodeMockPublicKey{mock: m}

	return m
}

type mNetworkNodeMockAddress struct {
	mock               *NetworkNodeMock
	defaultExpectation *NetworkNodeMockAddressExpectation
	expectations       []*NetworkNodeMockAddressExpectation
}

// NetworkNodeMockAddressExpectation specifies expectation struct of the NetworkNode.Address
type NetworkNodeMockAddressExpectation struct {
	mock *NetworkNodeMock

	results *NetworkNodeMockAddressResults
	Counter uint64
}

// NetworkNodeMockAddressResults contains results of the NetworkNode.Address
type NetworkNodeMockAddressResults struct {
	s1 string
}

// Expect sets up expected params for NetworkNode.Address
func (mmAddress *mNetworkNodeMockAddress) Expect() *mNetworkNodeMockAddress {
	if mmAddress.mock.funcAddress != nil {
		mmAddress.mock.t.Fatalf("NetworkNodeMock.Address mock is already set by Set")
	}

	if mmAddress.defaultExpectation == nil {
		mmAddress.defaultExpectation = &NetworkNodeMockAddressExpectation{}
	}

	return mmAddress
}

// Inspect accepts an inspector function that has same arguments as the NetworkNode.Address
func (mmAddress *mNetworkNodeMockAddress) Inspect(f func()) *mNetworkNodeMockAddress {
	if mmAddress.mock.inspectFuncAddress != nil {
		mmAddress.mock.t.Fatalf("Inspect function is already set for NetworkNodeMock.Address")
	}

	mmAddress.mock.inspectFuncAddress = f

	return mmAddress
}

// Return sets up results that will be returned by NetworkNode.Address
func (mmAddress *mNetworkNodeMockAddress) Return(s1 string) *NetworkNodeMock {
	if mmAddress.mock.funcAddress != nil {
		mmAddress.mock.t.Fatalf("NetworkNodeMock.Address mock is already set by Set")
	}

	if mmAddress.defaultExpectation == nil {
		mmAddress.defaultExpectation = &NetworkNodeMockAddressExpectation{mock: mmAddress.mock}
	}
	mmAddress.defaultExpectation.results = &NetworkNodeMockAddressResults{s1}
	return mmAddress.mock
}

//Set uses given function f to mock the NetworkNode.Address method
func (mmAddress *mNetworkNodeMockAddress) Set(f func() (s1 string)) *NetworkNodeMock {
	if mmAddress.defaultExpectation != nil {
		mmAddress.mock.t.Fatalf("Default expectation is already set for the NetworkNode.Address method")
	}

	if len(mmAddress.expectations) > 0 {
		mmAddress.mock.t.Fatalf("Some expectations are already set for the NetworkNode.Address method")
	}

	mmAddress.mock.funcAddress = f
	return mmAddress.mock
}

// Address implements nodeinfo.NetworkNode
func (mmAddress *NetworkNodeMock) Address() (s1 string) {
	mm_atomic.AddUint64(&mmAddress.beforeAddressCounter, 1)
	defer mm_atomic.AddUint64(&mmAddress.afterAddressCounter, 1)

	if mmAddress.inspectFuncAddress != nil {
		mmAddress.inspectFuncAddress()
	}

	if mmAddress.AddressMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddress.AddressMock.defaultExpectation.Counter, 1)

		mm_results := mmAddress.AddressMock.defaultExpectation.results
		if mm_results == nil {
			mmAddress.t.Fatal("No results are set for the NetworkNodeMock.Address")
		}
		return (*mm_results).s1
	}
	if mmAddress.funcAddress != nil {
		return mmAddress.funcAddress()
	}
	mmAddress.t.Fatalf("Unexpected call to NetworkNodeMock.Address.")
	return
}

// AddressAfterCounter returns a count of finished NetworkNodeMock.Address invocations
func (mmAddress *NetworkNodeMock) AddressAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddress.afterAddressCounter)
}

// AddressBeforeCounter returns a count of NetworkNodeMock.Address invocations
func (mmAddress *NetworkNodeMock) AddressBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddress.beforeAddressCounter)
}

// MinimockAddressDone returns true if the count of the Address invocations corresponds
// the number of defined expectations
func (m *NetworkNodeMock) MinimockAddressDone() bool {
	for _, e := range m.AddressMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddressMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddressCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddress != nil && mm_atomic.LoadUint64(&m.afterAddressCounter) < 1 {
		return false
	}
	return true
}

// MinimockAddressInspect logs each unmet expectation
func (m *NetworkNodeMock) MinimockAddressInspect() {
	for _, e := range m.AddressMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NetworkNodeMock.Address")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddressMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddressCounter) < 1 {
		m.t.Error("Expected call to NetworkNodeMock.Address")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddress != nil && mm_atomic.LoadUint64(&m.afterAddressCounter) < 1 {
		m.t.Error("Expected call to NetworkNodeMock.Address")
	}
}

type mNetworkNodeMockGetNodeID struct {
	mock               *NetworkNodeMock
	defaultExpectation *NetworkNodeMockGetNodeIDExpectation
	expectations       []*NetworkNodeMockGetNodeIDExpectation
}

// NetworkNodeMockGetNodeIDExpectation specifies expectation struct of the NetworkNode.GetNodeID
type NetworkNodeMockGetNodeIDExpectation struct {
	mock *NetworkNodeMock

	results *NetworkNodeMockGetNodeIDResults
	Counter uint64
}

// NetworkNodeMockGetNodeIDResults contains results of the NetworkNode.GetNodeID
type NetworkNodeMockGetNodeIDResults struct {
	s1 node.ShortNodeID
}

// Expect sets up expected params for NetworkNode.GetNodeID
func (mmGetNodeID *mNetworkNodeMockGetNodeID) Expect() *mNetworkNodeMockGetNodeID {
	if mmGetNodeID.mock.funcGetNodeID != nil {
		mmGetNodeID.mock.t.Fatalf("NetworkNodeMock.GetNodeID mock is already set by Set")
	}

	if mmGetNodeID.defaultExpectation == nil {
		mmGetNodeID.defaultExpectation = &NetworkNodeMockGetNodeIDExpectation{}
	}

	return mmGetNodeID
}

// Inspect accepts an inspector function that has same arguments as the NetworkNode.GetNodeID
func (mmGetNodeID *mNetworkNodeMockGetNodeID) Inspect(f func()) *mNetworkNodeMockGetNodeID {
	if mmGetNodeID.mock.inspectFuncGetNodeID != nil {
		mmGetNodeID.mock.t.Fatalf("Inspect function is already set for NetworkNodeMock.GetNodeID")
	}

	mmGetNodeID.mock.inspectFuncGetNodeID = f

	return mmGetNodeID
}

// Return sets up results that will be returned by NetworkNode.GetNodeID
func (mmGetNodeID *mNetworkNodeMockGetNodeID) Return(s1 node.ShortNodeID) *NetworkNodeMock {
	if mmGetNodeID.mock.funcGetNodeID != nil {
		mmGetNodeID.mock.t.Fatalf("NetworkNodeMock.GetNodeID mock is already set by Set")
	}

	if mmGetNodeID.defaultExpectation == nil {
		mmGetNodeID.defaultExpectation = &NetworkNodeMockGetNodeIDExpectation{mock: mmGetNodeID.mock}
	}
	mmGetNodeID.defaultExpectation.results = &NetworkNodeMockGetNodeIDResults{s1}
	return mmGetNodeID.mock
}

//Set uses given function f to mock the NetworkNode.GetNodeID method
func (mmGetNodeID *mNetworkNodeMockGetNodeID) Set(f func() (s1 node.ShortNodeID)) *NetworkNodeMock {
	if mmGetNodeID.defaultExpectation != nil {
		mmGetNodeID.mock.t.Fatalf("Default expectation is already set for the NetworkNode.GetNodeID method")
	}

	if len(mmGetNodeID.expectations) > 0 {
		mmGetNodeID.mock.t.Fatalf("Some expectations are already set for the NetworkNode.GetNodeID method")
	}

	mmGetNodeID.mock.funcGetNodeID = f
	return mmGetNodeID.mock
}

// GetNodeID implements nodeinfo.NetworkNode
func (mmGetNodeID *NetworkNodeMock) GetNodeID() (s1 node.ShortNodeID) {
	mm_atomic.AddUint64(&mmGetNodeID.beforeGetNodeIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetNodeID.afterGetNodeIDCounter, 1)

	if mmGetNodeID.inspectFuncGetNodeID != nil {
		mmGetNodeID.inspectFuncGetNodeID()
	}

	if mmGetNodeID.GetNodeIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetNodeID.GetNodeIDMock.defaultExpectation.Counter, 1)

		mm_results := mmGetNodeID.GetNodeIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetNodeID.t.Fatal("No results are set for the NetworkNodeMock.GetNodeID")
		}
		return (*mm_results).s1
	}
	if mmGetNodeID.funcGetNodeID != nil {
		return mmGetNodeID.funcGetNodeID()
	}
	mmGetNodeID.t.Fatalf("Unexpected call to NetworkNodeMock.GetNodeID.")
	return
}

// GetNodeIDAfterCounter returns a count of finished NetworkNodeMock.GetNodeID invocations
func (mmGetNodeID *NetworkNodeMock) GetNodeIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNodeID.afterGetNodeIDCounter)
}

// GetNodeIDBeforeCounter returns a count of NetworkNodeMock.GetNodeID invocations
func (mmGetNodeID *NetworkNodeMock) GetNodeIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNodeID.beforeGetNodeIDCounter)
}

// MinimockGetNodeIDDone returns true if the count of the GetNodeID invocations corresponds
// the number of defined expectations
func (m *NetworkNodeMock) MinimockGetNodeIDDone() bool {
	for _, e := range m.GetNodeIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNodeIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNodeIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNodeID != nil && mm_atomic.LoadUint64(&m.afterGetNodeIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetNodeIDInspect logs each unmet expectation
func (m *NetworkNodeMock) MinimockGetNodeIDInspect() {
	for _, e := range m.GetNodeIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NetworkNodeMock.GetNodeID")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNodeIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNodeIDCounter) < 1 {
		m.t.Error("Expected call to NetworkNodeMock.GetNodeID")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNodeID != nil && mm_atomic.LoadUint64(&m.afterGetNodeIDCounter) < 1 {
		m.t.Error("Expected call to NetworkNodeMock.GetNodeID")
	}
}

type mNetworkNodeMockGetPower struct {
	mock               *NetworkNodeMock
	defaultExpectation *NetworkNodeMockGetPowerExpectation
	expectations       []*NetworkNodeMockGetPowerExpectation
}

// NetworkNodeMockGetPowerExpectation specifies expectation struct of the NetworkNode.GetPower
type NetworkNodeMockGetPowerExpectation struct {
	mock *NetworkNodeMock

	results *NetworkNodeMockGetPowerResults
	Counter uint64
}

// NetworkNodeMockGetPowerResults contains results of the NetworkNode.GetPower
type NetworkNodeMockGetPowerResults struct {
	p1 mm_nodeinfo.Power
}

// Expect sets up expected params for NetworkNode.GetPower
func (mmGetPower *mNetworkNodeMockGetPower) Expect() *mNetworkNodeMockGetPower {
	if mmGetPower.mock.funcGetPower != nil {
		mmGetPower.mock.t.Fatalf("NetworkNodeMock.GetPower mock is already set by Set")
	}

	if mmGetPower.defaultExpectation == nil {
		mmGetPower.defaultExpectation = &NetworkNodeMockGetPowerExpectation{}
	}

	return mmGetPower
}

// Inspect accepts an inspector function that has same arguments as the NetworkNode.GetPower
func (mmGetPower *mNetworkNodeMockGetPower) Inspect(f func()) *mNetworkNodeMockGetPower {
	if mmGetPower.mock.inspectFuncGetPower != nil {
		mmGetPower.mock.t.Fatalf("Inspect function is already set for NetworkNodeMock.GetPower")
	}

	mmGetPower.mock.inspectFuncGetPower = f

	return mmGetPower
}

// Return sets up results that will be returned by NetworkNode.GetPower
func (mmGetPower *mNetworkNodeMockGetPower) Return(p1 mm_nodeinfo.Power) *NetworkNodeMock {
	if mmGetPower.mock.funcGetPower != nil {
		mmGetPower.mock.t.Fatalf("NetworkNodeMock.GetPower mock is already set by Set")
	}

	if mmGetPower.defaultExpectation == nil {
		mmGetPower.defaultExpectation = &NetworkNodeMockGetPowerExpectation{mock: mmGetPower.mock}
	}
	mmGetPower.defaultExpectation.results = &NetworkNodeMockGetPowerResults{p1}
	return mmGetPower.mock
}

//Set uses given function f to mock the NetworkNode.GetPower method
func (mmGetPower *mNetworkNodeMockGetPower) Set(f func() (p1 mm_nodeinfo.Power)) *NetworkNodeMock {
	if mmGetPower.defaultExpectation != nil {
		mmGetPower.mock.t.Fatalf("Default expectation is already set for the NetworkNode.GetPower method")
	}

	if len(mmGetPower.expectations) > 0 {
		mmGetPower.mock.t.Fatalf("Some expectations are already set for the NetworkNode.GetPower method")
	}

	mmGetPower.mock.funcGetPower = f
	return mmGetPower.mock
}

// GetPower implements nodeinfo.NetworkNode
func (mmGetPower *NetworkNodeMock) GetPower() (p1 mm_nodeinfo.Power) {
	mm_atomic.AddUint64(&mmGetPower.beforeGetPowerCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPower.afterGetPowerCounter, 1)

	if mmGetPower.inspectFuncGetPower != nil {
		mmGetPower.inspectFuncGetPower()
	}

	if mmGetPower.GetPowerMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPower.GetPowerMock.defaultExpectation.Counter, 1)

		mm_results := mmGetPower.GetPowerMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPower.t.Fatal("No results are set for the NetworkNodeMock.GetPower")
		}
		return (*mm_results).p1
	}
	if mmGetPower.funcGetPower != nil {
		return mmGetPower.funcGetPower()
	}
	mmGetPower.t.Fatalf("Unexpected call to NetworkNodeMock.GetPower.")
	return
}

// GetPowerAfterCounter returns a count of finished NetworkNodeMock.GetPower invocations
func (mmGetPower *NetworkNodeMock) GetPowerAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPower.afterGetPowerCounter)
}

// GetPowerBeforeCounter returns a count of NetworkNodeMock.GetPower invocations
func (mmGetPower *NetworkNodeMock) GetPowerBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPower.beforeGetPowerCounter)
}

// MinimockGetPowerDone returns true if the count of the GetPower invocations corresponds
// the number of defined expectations
func (m *NetworkNodeMock) MinimockGetPowerDone() bool {
	for _, e := range m.GetPowerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPowerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPowerCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPower != nil && mm_atomic.LoadUint64(&m.afterGetPowerCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPowerInspect logs each unmet expectation
func (m *NetworkNodeMock) MinimockGetPowerInspect() {
	for _, e := range m.GetPowerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NetworkNodeMock.GetPower")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPowerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPowerCounter) < 1 {
		m.t.Error("Expected call to NetworkNodeMock.GetPower")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPower != nil && mm_atomic.LoadUint64(&m.afterGetPowerCounter) < 1 {
		m.t.Error("Expected call to NetworkNodeMock.GetPower")
	}
}

type mNetworkNodeMockGetPrimaryRole struct {
	mock               *NetworkNodeMock
	defaultExpectation *NetworkNodeMockGetPrimaryRoleExpectation
	expectations       []*NetworkNodeMockGetPrimaryRoleExpectation
}

// NetworkNodeMockGetPrimaryRoleExpectation specifies expectation struct of the NetworkNode.GetPrimaryRole
type NetworkNodeMockGetPrimaryRoleExpectation struct {
	mock *NetworkNodeMock

	results *NetworkNodeMockGetPrimaryRoleResults
	Counter uint64
}

// NetworkNodeMockGetPrimaryRoleResults contains results of the NetworkNode.GetPrimaryRole
type NetworkNodeMockGetPrimaryRoleResults struct {
	p1 member.PrimaryRole
}

// Expect sets up expected params for NetworkNode.GetPrimaryRole
func (mmGetPrimaryRole *mNetworkNodeMockGetPrimaryRole) Expect() *mNetworkNodeMockGetPrimaryRole {
	if mmGetPrimaryRole.mock.funcGetPrimaryRole != nil {
		mmGetPrimaryRole.mock.t.Fatalf("NetworkNodeMock.GetPrimaryRole mock is already set by Set")
	}

	if mmGetPrimaryRole.defaultExpectation == nil {
		mmGetPrimaryRole.defaultExpectation = &NetworkNodeMockGetPrimaryRoleExpectation{}
	}

	return mmGetPrimaryRole
}

// Inspect accepts an inspector function that has same arguments as the NetworkNode.GetPrimaryRole
func (mmGetPrimaryRole *mNetworkNodeMockGetPrimaryRole) Inspect(f func()) *mNetworkNodeMockGetPrimaryRole {
	if mmGetPrimaryRole.mock.inspectFuncGetPrimaryRole != nil {
		mmGetPrimaryRole.mock.t.Fatalf("Inspect function is already set for NetworkNodeMock.GetPrimaryRole")
	}

	mmGetPrimaryRole.mock.inspectFuncGetPrimaryRole = f

	return mmGetPrimaryRole
}

// Return sets up results that will be returned by NetworkNode.GetPrimaryRole
func (mmGetPrimaryRole *mNetworkNodeMockGetPrimaryRole) Return(p1 member.PrimaryRole) *NetworkNodeMock {
	if mmGetPrimaryRole.mock.funcGetPrimaryRole != nil {
		mmGetPrimaryRole.mock.t.Fatalf("NetworkNodeMock.GetPrimaryRole mock is already set by Set")
	}

	if mmGetPrimaryRole.defaultExpectation == nil {
		mmGetPrimaryRole.defaultExpectation = &NetworkNodeMockGetPrimaryRoleExpectation{mock: mmGetPrimaryRole.mock}
	}
	mmGetPrimaryRole.defaultExpectation.results = &NetworkNodeMockGetPrimaryRoleResults{p1}
	return mmGetPrimaryRole.mock
}

//Set uses given function f to mock the NetworkNode.GetPrimaryRole method
func (mmGetPrimaryRole *mNetworkNodeMockGetPrimaryRole) Set(f func() (p1 member.PrimaryRole)) *NetworkNodeMock {
	if mmGetPrimaryRole.defaultExpectation != nil {
		mmGetPrimaryRole.mock.t.Fatalf("Default expectation is already set for the NetworkNode.GetPrimaryRole method")
	}

	if len(mmGetPrimaryRole.expectations) > 0 {
		mmGetPrimaryRole.mock.t.Fatalf("Some expectations are already set for the NetworkNode.GetPrimaryRole method")
	}

	mmGetPrimaryRole.mock.funcGetPrimaryRole = f
	return mmGetPrimaryRole.mock
}

// GetPrimaryRole implements nodeinfo.NetworkNode
func (mmGetPrimaryRole *NetworkNodeMock) GetPrimaryRole() (p1 member.PrimaryRole) {
	mm_atomic.AddUint64(&mmGetPrimaryRole.beforeGetPrimaryRoleCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPrimaryRole.afterGetPrimaryRoleCounter, 1)

	if mmGetPrimaryRole.inspectFuncGetPrimaryRole != nil {
		mmGetPrimaryRole.inspectFuncGetPrimaryRole()
	}

	if mmGetPrimaryRole.GetPrimaryRoleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPrimaryRole.GetPrimaryRoleMock.defaultExpectation.Counter, 1)

		mm_results := mmGetPrimaryRole.GetPrimaryRoleMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPrimaryRole.t.Fatal("No results are set for the NetworkNodeMock.GetPrimaryRole")
		}
		return (*mm_results).p1
	}
	if mmGetPrimaryRole.funcGetPrimaryRole != nil {
		return mmGetPrimaryRole.funcGetPrimaryRole()
	}
	mmGetPrimaryRole.t.Fatalf("Unexpected call to NetworkNodeMock.GetPrimaryRole.")
	return
}

// GetPrimaryRoleAfterCounter returns a count of finished NetworkNodeMock.GetPrimaryRole invocations
func (mmGetPrimaryRole *NetworkNodeMock) GetPrimaryRoleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPrimaryRole.afterGetPrimaryRoleCounter)
}

// GetPrimaryRoleBeforeCounter returns a count of NetworkNodeMock.GetPrimaryRole invocations
func (mmGetPrimaryRole *NetworkNodeMock) GetPrimaryRoleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPrimaryRole.beforeGetPrimaryRoleCounter)
}

// MinimockGetPrimaryRoleDone returns true if the count of the GetPrimaryRole invocations corresponds
// the number of defined expectations
func (m *NetworkNodeMock) MinimockGetPrimaryRoleDone() bool {
	for _, e := range m.GetPrimaryRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPrimaryRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPrimaryRoleCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPrimaryRole != nil && mm_atomic.LoadUint64(&m.afterGetPrimaryRoleCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPrimaryRoleInspect logs each unmet expectation
func (m *NetworkNodeMock) MinimockGetPrimaryRoleInspect() {
	for _, e := range m.GetPrimaryRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NetworkNodeMock.GetPrimaryRole")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPrimaryRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPrimaryRoleCounter) < 1 {
		m.t.Error("Expected call to NetworkNodeMock.GetPrimaryRole")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPrimaryRole != nil && mm_atomic.LoadUint64(&m.afterGetPrimaryRoleCounter) < 1 {
		m.t.Error("Expected call to NetworkNodeMock.GetPrimaryRole")
	}
}

type mNetworkNodeMockGetReference struct {
	mock               *NetworkNodeMock
	defaultExpectation *NetworkNodeMockGetReferenceExpectation
	expectations       []*NetworkNodeMockGetReferenceExpectation
}

// NetworkNodeMockGetReferenceExpectation specifies expectation struct of the NetworkNode.GetReference
type NetworkNodeMockGetReferenceExpectation struct {
	mock *NetworkNodeMock

	results *NetworkNodeMockGetReferenceResults
	Counter uint64
}

// NetworkNodeMockGetReferenceResults contains results of the NetworkNode.GetReference
type NetworkNodeMockGetReferenceResults struct {
	g1 reference.Global
}

// Expect sets up expected params for NetworkNode.GetReference
func (mmGetReference *mNetworkNodeMockGetReference) Expect() *mNetworkNodeMockGetReference {
	if mmGetReference.mock.funcGetReference != nil {
		mmGetReference.mock.t.Fatalf("NetworkNodeMock.GetReference mock is already set by Set")
	}

	if mmGetReference.defaultExpectation == nil {
		mmGetReference.defaultExpectation = &NetworkNodeMockGetReferenceExpectation{}
	}

	return mmGetReference
}

// Inspect accepts an inspector function that has same arguments as the NetworkNode.GetReference
func (mmGetReference *mNetworkNodeMockGetReference) Inspect(f func()) *mNetworkNodeMockGetReference {
	if mmGetReference.mock.inspectFuncGetReference != nil {
		mmGetReference.mock.t.Fatalf("Inspect function is already set for NetworkNodeMock.GetReference")
	}

	mmGetReference.mock.inspectFuncGetReference = f

	return mmGetReference
}

// Return sets up results that will be returned by NetworkNode.GetReference
func (mmGetReference *mNetworkNodeMockGetReference) Return(g1 reference.Global) *NetworkNodeMock {
	if mmGetReference.mock.funcGetReference != nil {
		mmGetReference.mock.t.Fatalf("NetworkNodeMock.GetReference mock is already set by Set")
	}

	if mmGetReference.defaultExpectation == nil {
		mmGetReference.defaultExpectation = &NetworkNodeMockGetReferenceExpectation{mock: mmGetReference.mock}
	}
	mmGetReference.defaultExpectation.results = &NetworkNodeMockGetReferenceResults{g1}
	return mmGetReference.mock
}

//Set uses given function f to mock the NetworkNode.GetReference method
func (mmGetReference *mNetworkNodeMockGetReference) Set(f func() (g1 reference.Global)) *NetworkNodeMock {
	if mmGetReference.defaultExpectation != nil {
		mmGetReference.mock.t.Fatalf("Default expectation is already set for the NetworkNode.GetReference method")
	}

	if len(mmGetReference.expectations) > 0 {
		mmGetReference.mock.t.Fatalf("Some expectations are already set for the NetworkNode.GetReference method")
	}

	mmGetReference.mock.funcGetReference = f
	return mmGetReference.mock
}

// GetReference implements nodeinfo.NetworkNode
func (mmGetReference *NetworkNodeMock) GetReference() (g1 reference.Global) {
	mm_atomic.AddUint64(&mmGetReference.beforeGetReferenceCounter, 1)
	defer mm_atomic.AddUint64(&mmGetReference.afterGetReferenceCounter, 1)

	if mmGetReference.inspectFuncGetReference != nil {
		mmGetReference.inspectFuncGetReference()
	}

	if mmGetReference.GetReferenceMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetReference.GetReferenceMock.defaultExpectation.Counter, 1)

		mm_results := mmGetReference.GetReferenceMock.defaultExpectation.results
		if mm_results == nil {
			mmGetReference.t.Fatal("No results are set for the NetworkNodeMock.GetReference")
		}
		return (*mm_results).g1
	}
	if mmGetReference.funcGetReference != nil {
		return mmGetReference.funcGetReference()
	}
	mmGetReference.t.Fatalf("Unexpected call to NetworkNodeMock.GetReference.")
	return
}

// GetReferenceAfterCounter returns a count of finished NetworkNodeMock.GetReference invocations
func (mmGetReference *NetworkNodeMock) GetReferenceAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetReference.afterGetReferenceCounter)
}

// GetReferenceBeforeCounter returns a count of NetworkNodeMock.GetReference invocations
func (mmGetReference *NetworkNodeMock) GetReferenceBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetReference.beforeGetReferenceCounter)
}

// MinimockGetReferenceDone returns true if the count of the GetReference invocations corresponds
// the number of defined expectations
func (m *NetworkNodeMock) MinimockGetReferenceDone() bool {
	for _, e := range m.GetReferenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetReferenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetReferenceCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetReference != nil && mm_atomic.LoadUint64(&m.afterGetReferenceCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetReferenceInspect logs each unmet expectation
func (m *NetworkNodeMock) MinimockGetReferenceInspect() {
	for _, e := range m.GetReferenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NetworkNodeMock.GetReference")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetReferenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetReferenceCounter) < 1 {
		m.t.Error("Expected call to NetworkNodeMock.GetReference")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetReference != nil && mm_atomic.LoadUint64(&m.afterGetReferenceCounter) < 1 {
		m.t.Error("Expected call to NetworkNodeMock.GetReference")
	}
}

type mNetworkNodeMockGetSignature struct {
	mock               *NetworkNodeMock
	defaultExpectation *NetworkNodeMockGetSignatureExpectation
	expectations       []*NetworkNodeMockGetSignatureExpectation
}

// NetworkNodeMockGetSignatureExpectation specifies expectation struct of the NetworkNode.GetSignature
type NetworkNodeMockGetSignatureExpectation struct {
	mock *NetworkNodeMock

	results *NetworkNodeMockGetSignatureResults
	Counter uint64
}

// NetworkNodeMockGetSignatureResults contains results of the NetworkNode.GetSignature
type NetworkNodeMockGetSignatureResults struct {
	ba1 []byte
	s1  cryptography.Signature
}

// Expect sets up expected params for NetworkNode.GetSignature
func (mmGetSignature *mNetworkNodeMockGetSignature) Expect() *mNetworkNodeMockGetSignature {
	if mmGetSignature.mock.funcGetSignature != nil {
		mmGetSignature.mock.t.Fatalf("NetworkNodeMock.GetSignature mock is already set by Set")
	}

	if mmGetSignature.defaultExpectation == nil {
		mmGetSignature.defaultExpectation = &NetworkNodeMockGetSignatureExpectation{}
	}

	return mmGetSignature
}

// Inspect accepts an inspector function that has same arguments as the NetworkNode.GetSignature
func (mmGetSignature *mNetworkNodeMockGetSignature) Inspect(f func()) *mNetworkNodeMockGetSignature {
	if mmGetSignature.mock.inspectFuncGetSignature != nil {
		mmGetSignature.mock.t.Fatalf("Inspect function is already set for NetworkNodeMock.GetSignature")
	}

	mmGetSignature.mock.inspectFuncGetSignature = f

	return mmGetSignature
}

// Return sets up results that will be returned by NetworkNode.GetSignature
func (mmGetSignature *mNetworkNodeMockGetSignature) Return(ba1 []byte, s1 cryptography.Signature) *NetworkNodeMock {
	if mmGetSignature.mock.funcGetSignature != nil {
		mmGetSignature.mock.t.Fatalf("NetworkNodeMock.GetSignature mock is already set by Set")
	}

	if mmGetSignature.defaultExpectation == nil {
		mmGetSignature.defaultExpectation = &NetworkNodeMockGetSignatureExpectation{mock: mmGetSignature.mock}
	}
	mmGetSignature.defaultExpectation.results = &NetworkNodeMockGetSignatureResults{ba1, s1}
	return mmGetSignature.mock
}

//Set uses given function f to mock the NetworkNode.GetSignature method
func (mmGetSignature *mNetworkNodeMockGetSignature) Set(f func() (ba1 []byte, s1 cryptography.Signature)) *NetworkNodeMock {
	if mmGetSignature.defaultExpectation != nil {
		mmGetSignature.mock.t.Fatalf("Default expectation is already set for the NetworkNode.GetSignature method")
	}

	if len(mmGetSignature.expectations) > 0 {
		mmGetSignature.mock.t.Fatalf("Some expectations are already set for the NetworkNode.GetSignature method")
	}

	mmGetSignature.mock.funcGetSignature = f
	return mmGetSignature.mock
}

// GetSignature implements nodeinfo.NetworkNode
func (mmGetSignature *NetworkNodeMock) GetSignature() (ba1 []byte, s1 cryptography.Signature) {
	mm_atomic.AddUint64(&mmGetSignature.beforeGetSignatureCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSignature.afterGetSignatureCounter, 1)

	if mmGetSignature.inspectFuncGetSignature != nil {
		mmGetSignature.inspectFuncGetSignature()
	}

	if mmGetSignature.GetSignatureMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSignature.GetSignatureMock.defaultExpectation.Counter, 1)

		mm_results := mmGetSignature.GetSignatureMock.defaultExpectation.results
		if mm_results == nil {
			mmGetSignature.t.Fatal("No results are set for the NetworkNodeMock.GetSignature")
		}
		return (*mm_results).ba1, (*mm_results).s1
	}
	if mmGetSignature.funcGetSignature != nil {
		return mmGetSignature.funcGetSignature()
	}
	mmGetSignature.t.Fatalf("Unexpected call to NetworkNodeMock.GetSignature.")
	return
}

// GetSignatureAfterCounter returns a count of finished NetworkNodeMock.GetSignature invocations
func (mmGetSignature *NetworkNodeMock) GetSignatureAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSignature.afterGetSignatureCounter)
}

// GetSignatureBeforeCounter returns a count of NetworkNodeMock.GetSignature invocations
func (mmGetSignature *NetworkNodeMock) GetSignatureBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSignature.beforeGetSignatureCounter)
}

// MinimockGetSignatureDone returns true if the count of the GetSignature invocations corresponds
// the number of defined expectations
func (m *NetworkNodeMock) MinimockGetSignatureDone() bool {
	for _, e := range m.GetSignatureMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSignatureMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSignatureCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSignature != nil && mm_atomic.LoadUint64(&m.afterGetSignatureCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSignatureInspect logs each unmet expectation
func (m *NetworkNodeMock) MinimockGetSignatureInspect() {
	for _, e := range m.GetSignatureMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NetworkNodeMock.GetSignature")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSignatureMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSignatureCounter) < 1 {
		m.t.Error("Expected call to NetworkNodeMock.GetSignature")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSignature != nil && mm_atomic.LoadUint64(&m.afterGetSignatureCounter) < 1 {
		m.t.Error("Expected call to NetworkNodeMock.GetSignature")
	}
}

type mNetworkNodeMockGetState struct {
	mock               *NetworkNodeMock
	defaultExpectation *NetworkNodeMockGetStateExpectation
	expectations       []*NetworkNodeMockGetStateExpectation
}

// NetworkNodeMockGetStateExpectation specifies expectation struct of the NetworkNode.GetState
type NetworkNodeMockGetStateExpectation struct {
	mock *NetworkNodeMock

	results *NetworkNodeMockGetStateResults
	Counter uint64
}

// NetworkNodeMockGetStateResults contains results of the NetworkNode.GetState
type NetworkNodeMockGetStateResults struct {
	s1 mm_nodeinfo.State
}

// Expect sets up expected params for NetworkNode.GetState
func (mmGetState *mNetworkNodeMockGetState) Expect() *mNetworkNodeMockGetState {
	if mmGetState.mock.funcGetState != nil {
		mmGetState.mock.t.Fatalf("NetworkNodeMock.GetState mock is already set by Set")
	}

	if mmGetState.defaultExpectation == nil {
		mmGetState.defaultExpectation = &NetworkNodeMockGetStateExpectation{}
	}

	return mmGetState
}

// Inspect accepts an inspector function that has same arguments as the NetworkNode.GetState
func (mmGetState *mNetworkNodeMockGetState) Inspect(f func()) *mNetworkNodeMockGetState {
	if mmGetState.mock.inspectFuncGetState != nil {
		mmGetState.mock.t.Fatalf("Inspect function is already set for NetworkNodeMock.GetState")
	}

	mmGetState.mock.inspectFuncGetState = f

	return mmGetState
}

// Return sets up results that will be returned by NetworkNode.GetState
func (mmGetState *mNetworkNodeMockGetState) Return(s1 mm_nodeinfo.State) *NetworkNodeMock {
	if mmGetState.mock.funcGetState != nil {
		mmGetState.mock.t.Fatalf("NetworkNodeMock.GetState mock is already set by Set")
	}

	if mmGetState.defaultExpectation == nil {
		mmGetState.defaultExpectation = &NetworkNodeMockGetStateExpectation{mock: mmGetState.mock}
	}
	mmGetState.defaultExpectation.results = &NetworkNodeMockGetStateResults{s1}
	return mmGetState.mock
}

//Set uses given function f to mock the NetworkNode.GetState method
func (mmGetState *mNetworkNodeMockGetState) Set(f func() (s1 mm_nodeinfo.State)) *NetworkNodeMock {
	if mmGetState.defaultExpectation != nil {
		mmGetState.mock.t.Fatalf("Default expectation is already set for the NetworkNode.GetState method")
	}

	if len(mmGetState.expectations) > 0 {
		mmGetState.mock.t.Fatalf("Some expectations are already set for the NetworkNode.GetState method")
	}

	mmGetState.mock.funcGetState = f
	return mmGetState.mock
}

// GetState implements nodeinfo.NetworkNode
func (mmGetState *NetworkNodeMock) GetState() (s1 mm_nodeinfo.State) {
	mm_atomic.AddUint64(&mmGetState.beforeGetStateCounter, 1)
	defer mm_atomic.AddUint64(&mmGetState.afterGetStateCounter, 1)

	if mmGetState.inspectFuncGetState != nil {
		mmGetState.inspectFuncGetState()
	}

	if mmGetState.GetStateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetState.GetStateMock.defaultExpectation.Counter, 1)

		mm_results := mmGetState.GetStateMock.defaultExpectation.results
		if mm_results == nil {
			mmGetState.t.Fatal("No results are set for the NetworkNodeMock.GetState")
		}
		return (*mm_results).s1
	}
	if mmGetState.funcGetState != nil {
		return mmGetState.funcGetState()
	}
	mmGetState.t.Fatalf("Unexpected call to NetworkNodeMock.GetState.")
	return
}

// GetStateAfterCounter returns a count of finished NetworkNodeMock.GetState invocations
func (mmGetState *NetworkNodeMock) GetStateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetState.afterGetStateCounter)
}

// GetStateBeforeCounter returns a count of NetworkNodeMock.GetState invocations
func (mmGetState *NetworkNodeMock) GetStateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetState.beforeGetStateCounter)
}

// MinimockGetStateDone returns true if the count of the GetState invocations corresponds
// the number of defined expectations
func (m *NetworkNodeMock) MinimockGetStateDone() bool {
	for _, e := range m.GetStateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetState != nil && mm_atomic.LoadUint64(&m.afterGetStateCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetStateInspect logs each unmet expectation
func (m *NetworkNodeMock) MinimockGetStateInspect() {
	for _, e := range m.GetStateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NetworkNodeMock.GetState")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStateCounter) < 1 {
		m.t.Error("Expected call to NetworkNodeMock.GetState")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetState != nil && mm_atomic.LoadUint64(&m.afterGetStateCounter) < 1 {
		m.t.Error("Expected call to NetworkNodeMock.GetState")
	}
}

type mNetworkNodeMockPublicKey struct {
	mock               *NetworkNodeMock
	defaultExpectation *NetworkNodeMockPublicKeyExpectation
	expectations       []*NetworkNodeMockPublicKeyExpectation
}

// NetworkNodeMockPublicKeyExpectation specifies expectation struct of the NetworkNode.PublicKey
type NetworkNodeMockPublicKeyExpectation struct {
	mock *NetworkNodeMock

	results *NetworkNodeMockPublicKeyResults
	Counter uint64
}

// NetworkNodeMockPublicKeyResults contains results of the NetworkNode.PublicKey
type NetworkNodeMockPublicKeyResults struct {
	p1 crypto.PublicKey
}

// Expect sets up expected params for NetworkNode.PublicKey
func (mmPublicKey *mNetworkNodeMockPublicKey) Expect() *mNetworkNodeMockPublicKey {
	if mmPublicKey.mock.funcPublicKey != nil {
		mmPublicKey.mock.t.Fatalf("NetworkNodeMock.PublicKey mock is already set by Set")
	}

	if mmPublicKey.defaultExpectation == nil {
		mmPublicKey.defaultExpectation = &NetworkNodeMockPublicKeyExpectation{}
	}

	return mmPublicKey
}

// Inspect accepts an inspector function that has same arguments as the NetworkNode.PublicKey
func (mmPublicKey *mNetworkNodeMockPublicKey) Inspect(f func()) *mNetworkNodeMockPublicKey {
	if mmPublicKey.mock.inspectFuncPublicKey != nil {
		mmPublicKey.mock.t.Fatalf("Inspect function is already set for NetworkNodeMock.PublicKey")
	}

	mmPublicKey.mock.inspectFuncPublicKey = f

	return mmPublicKey
}

// Return sets up results that will be returned by NetworkNode.PublicKey
func (mmPublicKey *mNetworkNodeMockPublicKey) Return(p1 crypto.PublicKey) *NetworkNodeMock {
	if mmPublicKey.mock.funcPublicKey != nil {
		mmPublicKey.mock.t.Fatalf("NetworkNodeMock.PublicKey mock is already set by Set")
	}

	if mmPublicKey.defaultExpectation == nil {
		mmPublicKey.defaultExpectation = &NetworkNodeMockPublicKeyExpectation{mock: mmPublicKey.mock}
	}
	mmPublicKey.defaultExpectation.results = &NetworkNodeMockPublicKeyResults{p1}
	return mmPublicKey.mock
}

//Set uses given function f to mock the NetworkNode.PublicKey method
func (mmPublicKey *mNetworkNodeMockPublicKey) Set(f func() (p1 crypto.PublicKey)) *NetworkNodeMock {
	if mmPublicKey.defaultExpectation != nil {
		mmPublicKey.mock.t.Fatalf("Default expectation is already set for the NetworkNode.PublicKey method")
	}

	if len(mmPublicKey.expectations) > 0 {
		mmPublicKey.mock.t.Fatalf("Some expectations are already set for the NetworkNode.PublicKey method")
	}

	mmPublicKey.mock.funcPublicKey = f
	return mmPublicKey.mock
}

// PublicKey implements nodeinfo.NetworkNode
func (mmPublicKey *NetworkNodeMock) PublicKey() (p1 crypto.PublicKey) {
	mm_atomic.AddUint64(&mmPublicKey.beforePublicKeyCounter, 1)
	defer mm_atomic.AddUint64(&mmPublicKey.afterPublicKeyCounter, 1)

	if mmPublicKey.inspectFuncPublicKey != nil {
		mmPublicKey.inspectFuncPublicKey()
	}

	if mmPublicKey.PublicKeyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPublicKey.PublicKeyMock.defaultExpectation.Counter, 1)

		mm_results := mmPublicKey.PublicKeyMock.defaultExpectation.results
		if mm_results == nil {
			mmPublicKey.t.Fatal("No results are set for the NetworkNodeMock.PublicKey")
		}
		return (*mm_results).p1
	}
	if mmPublicKey.funcPublicKey != nil {
		return mmPublicKey.funcPublicKey()
	}
	mmPublicKey.t.Fatalf("Unexpected call to NetworkNodeMock.PublicKey.")
	return
}

// PublicKeyAfterCounter returns a count of finished NetworkNodeMock.PublicKey invocations
func (mmPublicKey *NetworkNodeMock) PublicKeyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPublicKey.afterPublicKeyCounter)
}

// PublicKeyBeforeCounter returns a count of NetworkNodeMock.PublicKey invocations
func (mmPublicKey *NetworkNodeMock) PublicKeyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPublicKey.beforePublicKeyCounter)
}

// MinimockPublicKeyDone returns true if the count of the PublicKey invocations corresponds
// the number of defined expectations
func (m *NetworkNodeMock) MinimockPublicKeyDone() bool {
	for _, e := range m.PublicKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PublicKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPublicKeyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPublicKey != nil && mm_atomic.LoadUint64(&m.afterPublicKeyCounter) < 1 {
		return false
	}
	return true
}

// MinimockPublicKeyInspect logs each unmet expectation
func (m *NetworkNodeMock) MinimockPublicKeyInspect() {
	for _, e := range m.PublicKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NetworkNodeMock.PublicKey")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PublicKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPublicKeyCounter) < 1 {
		m.t.Error("Expected call to NetworkNodeMock.PublicKey")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPublicKey != nil && mm_atomic.LoadUint64(&m.afterPublicKeyCounter) < 1 {
		m.t.Error("Expected call to NetworkNodeMock.PublicKey")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *NetworkNodeMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAddressInspect()

		m.MinimockGetNodeIDInspect()

		m.MinimockGetPowerInspect()

		m.MinimockGetPrimaryRoleInspect()

		m.MinimockGetReferenceInspect()

		m.MinimockGetSignatureInspect()

		m.MinimockGetStateInspect()

		m.MinimockPublicKeyInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *NetworkNodeMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *NetworkNodeMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddressDone() &&
		m.MinimockGetNodeIDDone() &&
		m.MinimockGetPowerDone() &&
		m.MinimockGetPrimaryRoleDone() &&
		m.MinimockGetReferenceDone() &&
		m.MinimockGetSignatureDone() &&
		m.MinimockGetStateDone() &&
		m.MinimockPublicKeyDone()
}
