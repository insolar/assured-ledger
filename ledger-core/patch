From 25d977bf71438e959c150c676ccacec884cf3125 Mon Sep 17 00:00:00 2001
From: dgovorukhin <dmitriy.govorukhin@gmail.com>
Date: Tue, 9 Jun 2020 15:39:18 +0300
Subject: [PATCH 1/3] PLAT-354: Add delegationToken to outgoing messages in
 SMExecute

---
 ledger-core/virtual/execute/execute.go | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/ledger-core/virtual/execute/execute.go b/ledger-core/virtual/execute/execute.go
index 6046b760..0448fb07 100644
--- a/ledger-core/virtual/execute/execute.go
+++ b/ledger-core/virtual/execute/execute.go
@@ -494,10 +494,12 @@ func (s *SMExecute) stepExecuteOutgoing(ctx smachine.ExecutionContext) smachine.
 	case executionevent.CallConstructor:
 		s.outgoing = outgoing.ConstructVCallRequest(s.execution)
 		s.outgoing.CallOutgoing = gen.UniqueIDWithPulse(pulseNumber)
+		s.outgoing.DelegationSpec = s.delegationToken
 		s.outgoingObject = reference.NewSelf(s.outgoing.CallOutgoing)
 	case executionevent.CallMethod:
 		s.outgoing = outgoing.ConstructVCallRequest(s.execution)
 		s.outgoing.CallOutgoing = gen.UniqueIDWithPulse(pulseNumber)
+		s.outgoing.DelegationSpec = s.delegationToken
 		s.outgoingObject = s.outgoing.Callee
 	default:
 		panic(throw.IllegalValue())
@@ -708,6 +710,7 @@ func (s *SMExecute) stepSendCallResult(ctx smachine.ExecutionContext) smachine.S
 		CallIncomingResult: reference.Local{},
 		EntryHeadHash:      nil,
 		ReturnArguments:    executionResult,
+		DelegationSpec:     s.delegationToken,
 	}
 	target := s.Meta.Sender
 

From 98f854ef3fd9902622d1f307257161c40e071ead Mon Sep 17 00:00:00 2001
From: dgovorukhin <dmitriy.govorukhin@gmail.com>
Date: Tue, 16 Jun 2020 01:26:44 +0300
Subject: [PATCH 2/3] PLAT-354: Fix review comments

---
 ledger-core/virtual/authentication/service.go |  9 +++++++
 ledger-core/virtual/execute/execute.go        | 25 ++++++++++++++-----
 2 files changed, 28 insertions(+), 6 deletions(-)

diff --git a/ledger-core/virtual/authentication/service.go b/ledger-core/virtual/authentication/service.go
index 51893526..7aab857f 100644
--- a/ledger-core/virtual/authentication/service.go
+++ b/ledger-core/virtual/authentication/service.go
@@ -22,6 +22,7 @@ var deadBeef = [...]byte{0xde, 0xad, 0xbe, 0xef}
 type Service interface {
 	GetCallDelegationToken(outgoing reference.Global, to reference.Global, pn pulse.Number, object reference.Global) payload.CallDelegationToken
 	IsMessageFromVirtualLegitimate(ctx context.Context, payloadObj interface{}, sender reference.Global, pr pulse.Range) (mustReject bool, err error)
+	IsNeedUseToken(token payload.CallDelegationToken) bool
 }
 
 type service struct {
@@ -46,6 +47,14 @@ func (s service) GetCallDelegationToken(outgoing reference.Global, to reference.
 	}
 }
 
+func (s service) IsNeedUseToken(token payload.CallDelegationToken) bool {
+	if token.Caller == s.affinity.Me() {
+		return false
+	} else {
+		return true
+	}
+}
+
 func (s service) checkDelegationToken() error {
 	// TODO: check signature
 	return nil
diff --git a/ledger-core/virtual/execute/execute.go b/ledger-core/virtual/execute/execute.go
index 0448fb07..9daa28d8 100644
--- a/ledger-core/virtual/execute/execute.go
+++ b/ledger-core/virtual/execute/execute.go
@@ -10,6 +10,7 @@ package execute
 import (
 	"context"
 	"errors"
+	"github.com/insolar/assured-ledger/ledger-core/virtual/authentication"
 
 	"github.com/insolar/assured-ledger/ledger-core/conveyor"
 	"github.com/insolar/assured-ledger/ledger-core/conveyor/smachine"
@@ -57,9 +58,10 @@ type SMExecute struct {
 	methodIsolation contract.MethodIsolation
 
 	// dependencies
-	runner        runner.ServiceAdapter
-	messageSender messageSenderAdapter.MessageSender
-	pulseSlot     *conveyor.PulseSlot
+	runner                runner.ServiceAdapter
+	messageSender         messageSenderAdapter.MessageSender
+	pulseSlot             *conveyor.PulseSlot
+	authenticationService authentication.Service
 
 	outgoing        *payload.VCallRequest
 	outgoingObject  reference.Global
@@ -87,6 +89,7 @@ func (*dSMExecute) InjectDependencies(sm smachine.StateMachine, _ smachine.SlotL
 	injector.MustInject(&s.pulseSlot)
 	injector.MustInject(&s.messageSender)
 	injector.MustInject(&s.objectCatalog)
+	injector.MustInject(&s.authenticationService)
 }
 
 func (*dSMExecute) GetInitStateFor(sm smachine.StateMachine) smachine.InitFunc {
@@ -494,13 +497,13 @@ func (s *SMExecute) stepExecuteOutgoing(ctx smachine.ExecutionContext) smachine.
 	case executionevent.CallConstructor:
 		s.outgoing = outgoing.ConstructVCallRequest(s.execution)
 		s.outgoing.CallOutgoing = gen.UniqueIDWithPulse(pulseNumber)
-		s.outgoing.DelegationSpec = s.delegationToken
 		s.outgoingObject = reference.NewSelf(s.outgoing.CallOutgoing)
+		s.SetToken()
 	case executionevent.CallMethod:
 		s.outgoing = outgoing.ConstructVCallRequest(s.execution)
 		s.outgoing.CallOutgoing = gen.UniqueIDWithPulse(pulseNumber)
-		s.outgoing.DelegationSpec = s.delegationToken
 		s.outgoingObject = s.outgoing.Callee
+		s.SetToken()
 	default:
 		panic(throw.IllegalValue())
 	}
@@ -710,8 +713,12 @@ func (s *SMExecute) stepSendCallResult(ctx smachine.ExecutionContext) smachine.S
 		CallIncomingResult: reference.Local{},
 		EntryHeadHash:      nil,
 		ReturnArguments:    executionResult,
-		DelegationSpec:     s.delegationToken,
 	}
+
+	if s.authenticationService.IsNeedUseToken(s.delegationTokenSpec) {
+		msg.DelegationSpec = s.delegationTokenSpec
+	}
+
 	target := s.Meta.Sender
 
 	s.messageSender.PrepareAsync(ctx, func(goCtx context.Context, svc messagesender.Service) smachine.AsyncResultFunc {
@@ -755,3 +762,9 @@ func NewStateID(pn pulse.Number, data []byte) reference.Local {
 	hash := hasher.Hash(data)
 	return reference.NewLocal(pn, 0, reference.BytesToLocalHash(hash))
 }
+
+func (s *SMExecute) SetToken() {
+	if s.authenticationService.IsNeedUseToken(s.delegationTokenSpec) {
+		s.outgoing.DelegationSpec = s.delegationTokenSpec
+	}
+}

From ea573e81110f51c2c598f5ffd12c7fb0bec02e29 Mon Sep 17 00:00:00 2001
From: dgovorukhin <dmitriy.govorukhin@gmail.com>
Date: Tue, 16 Jun 2020 11:19:16 +0300
Subject: [PATCH 3/3] PLAT-442: Fix lint problem

---
 ledger-core/virtual/authentication/service.go | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/ledger-core/virtual/authentication/service.go b/ledger-core/virtual/authentication/service.go
index 7aab857f..aae3d7c0 100644
--- a/ledger-core/virtual/authentication/service.go
+++ b/ledger-core/virtual/authentication/service.go
@@ -48,11 +48,11 @@ func (s service) GetCallDelegationToken(outgoing reference.Global, to reference.
 }
 
 func (s service) IsNeedUseToken(token payload.CallDelegationToken) bool {
+	useToken := true
 	if token.Caller == s.affinity.Me() {
-		return false
-	} else {
-		return true
+		useToken = false
 	}
+	return useToken
 }
 
 func (s service) checkDelegationToken() error {

