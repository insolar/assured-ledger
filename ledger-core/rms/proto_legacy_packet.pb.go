// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto_legacy_packet.proto

package rms

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BootstrapResponseCode int32

const (
	BootstrapResponseCode_Accepted       BootstrapResponseCode = 0
	BootstrapResponseCode_UpdateSchedule BootstrapResponseCode = 1
	BootstrapResponseCode_UpdateShortID  BootstrapResponseCode = 2
	BootstrapResponseCode_Reject         BootstrapResponseCode = 3
	BootstrapResponseCode_Retry          BootstrapResponseCode = 4
)

var BootstrapResponseCode_name = map[int32]string{
	0: "Accepted",
	1: "UpdateSchedule",
	2: "UpdateShortID",
	3: "Reject",
	4: "Retry",
}

var BootstrapResponseCode_value = map[string]int32{
	"Accepted":       0,
	"UpdateSchedule": 1,
	"UpdateShortID":  2,
	"Reject":         3,
	"Retry":          4,
}

func (x BootstrapResponseCode) String() string {
	return proto.EnumName(BootstrapResponseCode_name, int32(x))
}

func (BootstrapResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{0}
}

type AuthorizeResponseCode int32

const (
	AuthorizeResponseCode_Success        AuthorizeResponseCode = 0
	AuthorizeResponseCode_WrongTimestamp AuthorizeResponseCode = 2
	AuthorizeResponseCode_WrongMandate   AuthorizeResponseCode = 3
	AuthorizeResponseCode_WrongVersion   AuthorizeResponseCode = 4
)

var AuthorizeResponseCode_name = map[int32]string{
	0: "Success",
	2: "WrongTimestamp",
	3: "WrongMandate",
	4: "WrongVersion",
}

var AuthorizeResponseCode_value = map[string]int32{
	"Success":        0,
	"WrongTimestamp": 2,
	"WrongMandate":   3,
	"WrongVersion":   4,
}

func (x AuthorizeResponseCode) String() string {
	return proto.EnumName(AuthorizeResponseCode_name, int32(x))
}

func (AuthorizeResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{1}
}

type Packet struct {
	Polymorph     int32      `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	Sender        LegacyHost `protobuf:"bytes,20,opt,name=Sender,proto3,customtype=LegacyHost" json:"Sender"`
	Receiver      LegacyHost `protobuf:"bytes,21,opt,name=Receiver,proto3,customtype=LegacyHost" json:"Receiver"`
	RequestID     uint64     `protobuf:"varint,22,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TraceID       string     `protobuf:"bytes,23,opt,name=TraceID,proto3" json:"TraceID,omitempty"`
	TraceSpanData []byte     `protobuf:"bytes,24,opt,name=TraceSpanData,proto3" json:"TraceSpanData,omitempty"`
	Type          uint32     `protobuf:"varint,26,opt,name=Type,proto3" json:"Type,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*Packet_Request
	//	*Packet_Response
	Payload isPacket_Payload `protobuf_oneof:"Payload"`
}

func (m *Packet) Reset()         { *m = Packet{} }
func (m *Packet) String() string { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()    {}
func (*Packet) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{0}
}
func (m *Packet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Packet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Packet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet.Merge(m, src)
}
func (m *Packet) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Packet) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet.DiscardUnknown(m)
}

var xxx_messageInfo_Packet proto.InternalMessageInfo

type isPacket_Payload interface {
	isPacket_Payload()
	MarshalTo([]byte) (int, error)
	ProtoSize() int
}

type Packet_Request struct {
	Request *Request `protobuf:"bytes,27,opt,name=Request,proto3,oneof" json:"Request,omitempty"`
}
type Packet_Response struct {
	Response *Response `protobuf:"bytes,28,opt,name=Response,proto3,oneof" json:"Response,omitempty"`
}

func (*Packet_Request) isPacket_Payload()  {}
func (*Packet_Response) isPacket_Payload() {}

func (m *Packet) GetPayload() isPacket_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Packet) GetRequest() *Request {
	if x, ok := m.GetPayload().(*Packet_Request); ok {
		return x.Request
	}
	return nil
}

func (m *Packet) GetResponse() *Response {
	if x, ok := m.GetPayload().(*Packet_Response); ok {
		return x.Response
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Packet) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Packet_Request)(nil),
		(*Packet_Response)(nil),
	}
}

type Request struct {
	// Types that are valid to be assigned to Request:
	//	*Request_RPC
	//	*Request_Bootstrap
	//	*Request_Authorize
	//	*Request_SignCert
	//	*Request_UpdateSchedule
	//	*Request_Reconnect
	Request isRequest_Request `protobuf_oneof:"Request"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{1}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

type isRequest_Request interface {
	isRequest_Request()
	MarshalTo([]byte) (int, error)
	ProtoSize() int
}

type Request_RPC struct {
	RPC *RPCRequest `protobuf:"bytes,2,opt,name=RPC,proto3,oneof" json:"RPC,omitempty"`
}
type Request_Bootstrap struct {
	Bootstrap *BootstrapRequest `protobuf:"bytes,4,opt,name=Bootstrap,proto3,oneof" json:"Bootstrap,omitempty"`
}
type Request_Authorize struct {
	Authorize *AuthorizeRequest `protobuf:"bytes,5,opt,name=Authorize,proto3,oneof" json:"Authorize,omitempty"`
}
type Request_SignCert struct {
	SignCert *SignCertRequest `protobuf:"bytes,6,opt,name=SignCert,proto3,oneof" json:"SignCert,omitempty"`
}
type Request_UpdateSchedule struct {
	UpdateSchedule *UpdateScheduleRequest `protobuf:"bytes,7,opt,name=UpdateSchedule,proto3,oneof" json:"UpdateSchedule,omitempty"`
}
type Request_Reconnect struct {
	Reconnect *ReconnectRequest `protobuf:"bytes,8,opt,name=Reconnect,proto3,oneof" json:"Reconnect,omitempty"`
}

func (*Request_RPC) isRequest_Request()            {}
func (*Request_Bootstrap) isRequest_Request()      {}
func (*Request_Authorize) isRequest_Request()      {}
func (*Request_SignCert) isRequest_Request()       {}
func (*Request_UpdateSchedule) isRequest_Request() {}
func (*Request_Reconnect) isRequest_Request()      {}

func (m *Request) GetRequest() isRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Request) GetRPC() *RPCRequest {
	if x, ok := m.GetRequest().(*Request_RPC); ok {
		return x.RPC
	}
	return nil
}

func (m *Request) GetBootstrap() *BootstrapRequest {
	if x, ok := m.GetRequest().(*Request_Bootstrap); ok {
		return x.Bootstrap
	}
	return nil
}

func (m *Request) GetAuthorize() *AuthorizeRequest {
	if x, ok := m.GetRequest().(*Request_Authorize); ok {
		return x.Authorize
	}
	return nil
}

func (m *Request) GetSignCert() *SignCertRequest {
	if x, ok := m.GetRequest().(*Request_SignCert); ok {
		return x.SignCert
	}
	return nil
}

func (m *Request) GetUpdateSchedule() *UpdateScheduleRequest {
	if x, ok := m.GetRequest().(*Request_UpdateSchedule); ok {
		return x.UpdateSchedule
	}
	return nil
}

func (m *Request) GetReconnect() *ReconnectRequest {
	if x, ok := m.GetRequest().(*Request_Reconnect); ok {
		return x.Reconnect
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Request) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Request_RPC)(nil),
		(*Request_Bootstrap)(nil),
		(*Request_Authorize)(nil),
		(*Request_SignCert)(nil),
		(*Request_UpdateSchedule)(nil),
		(*Request_Reconnect)(nil),
	}
}

type Response struct {
	// Types that are valid to be assigned to Response:
	//	*Response_RPC
	//	*Response_Basic
	//	*Response_Bootstrap
	//	*Response_Authorize
	//	*Response_SignCert
	//	*Response_Error
	//	*Response_UpdateSchedule
	//	*Response_Reconnect
	Response isResponse_Response `protobuf_oneof:"Response"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{2}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

type isResponse_Response interface {
	isResponse_Response()
	MarshalTo([]byte) (int, error)
	ProtoSize() int
}

type Response_RPC struct {
	RPC *RPCResponse `protobuf:"bytes,2,opt,name=RPC,proto3,oneof" json:"RPC,omitempty"`
}
type Response_Basic struct {
	Basic *BasicResponse `protobuf:"bytes,3,opt,name=Basic,proto3,oneof" json:"Basic,omitempty"`
}
type Response_Bootstrap struct {
	Bootstrap *BootstrapResponse `protobuf:"bytes,4,opt,name=Bootstrap,proto3,oneof" json:"Bootstrap,omitempty"`
}
type Response_Authorize struct {
	Authorize *AuthorizeResponse `protobuf:"bytes,5,opt,name=Authorize,proto3,oneof" json:"Authorize,omitempty"`
}
type Response_SignCert struct {
	SignCert *SignCertResponse `protobuf:"bytes,6,opt,name=SignCert,proto3,oneof" json:"SignCert,omitempty"`
}
type Response_Error struct {
	Error *ErrorResponse `protobuf:"bytes,7,opt,name=Error,proto3,oneof" json:"Error,omitempty"`
}
type Response_UpdateSchedule struct {
	UpdateSchedule *UpdateScheduleResponse `protobuf:"bytes,8,opt,name=UpdateSchedule,proto3,oneof" json:"UpdateSchedule,omitempty"`
}
type Response_Reconnect struct {
	Reconnect *ReconnectResponse `protobuf:"bytes,9,opt,name=Reconnect,proto3,oneof" json:"Reconnect,omitempty"`
}

func (*Response_RPC) isResponse_Response()            {}
func (*Response_Basic) isResponse_Response()          {}
func (*Response_Bootstrap) isResponse_Response()      {}
func (*Response_Authorize) isResponse_Response()      {}
func (*Response_SignCert) isResponse_Response()       {}
func (*Response_Error) isResponse_Response()          {}
func (*Response_UpdateSchedule) isResponse_Response() {}
func (*Response_Reconnect) isResponse_Response()      {}

func (m *Response) GetResponse() isResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *Response) GetRPC() *RPCResponse {
	if x, ok := m.GetResponse().(*Response_RPC); ok {
		return x.RPC
	}
	return nil
}

func (m *Response) GetBasic() *BasicResponse {
	if x, ok := m.GetResponse().(*Response_Basic); ok {
		return x.Basic
	}
	return nil
}

func (m *Response) GetBootstrap() *BootstrapResponse {
	if x, ok := m.GetResponse().(*Response_Bootstrap); ok {
		return x.Bootstrap
	}
	return nil
}

func (m *Response) GetAuthorize() *AuthorizeResponse {
	if x, ok := m.GetResponse().(*Response_Authorize); ok {
		return x.Authorize
	}
	return nil
}

func (m *Response) GetSignCert() *SignCertResponse {
	if x, ok := m.GetResponse().(*Response_SignCert); ok {
		return x.SignCert
	}
	return nil
}

func (m *Response) GetError() *ErrorResponse {
	if x, ok := m.GetResponse().(*Response_Error); ok {
		return x.Error
	}
	return nil
}

func (m *Response) GetUpdateSchedule() *UpdateScheduleResponse {
	if x, ok := m.GetResponse().(*Response_UpdateSchedule); ok {
		return x.UpdateSchedule
	}
	return nil
}

func (m *Response) GetReconnect() *ReconnectResponse {
	if x, ok := m.GetResponse().(*Response_Reconnect); ok {
		return x.Reconnect
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Response) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Response_RPC)(nil),
		(*Response_Basic)(nil),
		(*Response_Bootstrap)(nil),
		(*Response_Authorize)(nil),
		(*Response_SignCert)(nil),
		(*Response_Error)(nil),
		(*Response_UpdateSchedule)(nil),
		(*Response_Reconnect)(nil),
	}
}

type RPCRequest struct {
	Method string `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *RPCRequest) Reset()         { *m = RPCRequest{} }
func (m *RPCRequest) String() string { return proto.CompactTextString(m) }
func (*RPCRequest) ProtoMessage()    {}
func (*RPCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{3}
}
func (m *RPCRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RPCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCRequest.Merge(m, src)
}
func (m *RPCRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RPCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCRequest proto.InternalMessageInfo

type UpdateScheduleRequest struct {
	LastNodePulse PulseNumber `protobuf:"varint,1,opt,name=LastNodePulse,proto3,casttype=PulseNumber" json:"LastNodePulse"`
	Permit        *Permit     `protobuf:"bytes,2,opt,name=Permit,proto3" json:"Permit,omitempty"`
}

func (m *UpdateScheduleRequest) Reset()         { *m = UpdateScheduleRequest{} }
func (m *UpdateScheduleRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateScheduleRequest) ProtoMessage()    {}
func (*UpdateScheduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{4}
}
func (m *UpdateScheduleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateScheduleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UpdateScheduleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateScheduleRequest.Merge(m, src)
}
func (m *UpdateScheduleRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UpdateScheduleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateScheduleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateScheduleRequest proto.InternalMessageInfo

type ReconnectRequest struct {
	ReconnectTo LegacyHost `protobuf:"bytes,1,opt,name=ReconnectTo,proto3,customtype=LegacyHost" json:"ReconnectTo"`
	Permit      *Permit    `protobuf:"bytes,2,opt,name=Permit,proto3" json:"Permit,omitempty"`
}

func (m *ReconnectRequest) Reset()         { *m = ReconnectRequest{} }
func (m *ReconnectRequest) String() string { return proto.CompactTextString(m) }
func (*ReconnectRequest) ProtoMessage()    {}
func (*ReconnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{5}
}
func (m *ReconnectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReconnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReconnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReconnectRequest.Merge(m, src)
}
func (m *ReconnectRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ReconnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReconnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReconnectRequest proto.InternalMessageInfo

type BootstrapRequest struct {
	CandidateProfile Profile `protobuf:"bytes,2,opt,name=CandidateProfile,proto3" json:"CandidateProfile"`
	Permit           *Permit `protobuf:"bytes,4,opt,name=Permit,proto3" json:"Permit,omitempty"`
}

func (m *BootstrapRequest) Reset()         { *m = BootstrapRequest{} }
func (m *BootstrapRequest) String() string { return proto.CompactTextString(m) }
func (*BootstrapRequest) ProtoMessage()    {}
func (*BootstrapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{6}
}
func (m *BootstrapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootstrapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BootstrapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapRequest.Merge(m, src)
}
func (m *BootstrapRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *BootstrapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapRequest proto.InternalMessageInfo

type AuthorizeData struct {
	Certificate []byte `protobuf:"bytes,1,opt,name=Certificate,proto3" json:"Certificate,omitempty"`
	Timestamp   int64  `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (m *AuthorizeData) Reset()         { *m = AuthorizeData{} }
func (m *AuthorizeData) String() string { return proto.CompactTextString(m) }
func (*AuthorizeData) ProtoMessage()    {}
func (*AuthorizeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{7}
}
func (m *AuthorizeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AuthorizeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeData.Merge(m, src)
}
func (m *AuthorizeData) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AuthorizeData) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeData.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeData proto.InternalMessageInfo

type AuthorizeRequest struct {
	AuthorizeData *AuthorizeData `protobuf:"bytes,1,opt,name=AuthorizeData,proto3" json:"AuthorizeData,omitempty"`
	Signature     []byte         `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *AuthorizeRequest) Reset()         { *m = AuthorizeRequest{} }
func (m *AuthorizeRequest) String() string { return proto.CompactTextString(m) }
func (*AuthorizeRequest) ProtoMessage()    {}
func (*AuthorizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{8}
}
func (m *AuthorizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AuthorizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeRequest.Merge(m, src)
}
func (m *AuthorizeRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AuthorizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeRequest proto.InternalMessageInfo

type SignCertRequest struct {
	NodeRef Reference `protobuf:"bytes,1,opt,name=NodeRef,proto3" json:"NodeRef"`
}

func (m *SignCertRequest) Reset()         { *m = SignCertRequest{} }
func (m *SignCertRequest) String() string { return proto.CompactTextString(m) }
func (*SignCertRequest) ProtoMessage()    {}
func (*SignCertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{9}
}
func (m *SignCertRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignCertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SignCertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignCertRequest.Merge(m, src)
}
func (m *SignCertRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SignCertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignCertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignCertRequest proto.InternalMessageInfo

type RPCResponse struct {
	Result []byte `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (m *RPCResponse) Reset()         { *m = RPCResponse{} }
func (m *RPCResponse) String() string { return proto.CompactTextString(m) }
func (*RPCResponse) ProtoMessage()    {}
func (*RPCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{10}
}
func (m *RPCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RPCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCResponse.Merge(m, src)
}
func (m *RPCResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RPCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RPCResponse proto.InternalMessageInfo

type Permit struct {
	Payload   PermitPayload `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload"`
	Signature []byte        `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *Permit) Reset()         { *m = Permit{} }
func (m *Permit) String() string { return proto.CompactTextString(m) }
func (*Permit) ProtoMessage()    {}
func (*Permit) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{11}
}
func (m *Permit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Permit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Permit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permit.Merge(m, src)
}
func (m *Permit) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Permit) XXX_DiscardUnknown() {
	xxx_messageInfo_Permit.DiscardUnknown(m)
}

var xxx_messageInfo_Permit proto.InternalMessageInfo

type PermitPayload struct {
	JoinerPublicKey  []byte     `protobuf:"bytes,1,opt,name=JoinerPublicKey,proto3" json:"JoinerPublicKey,omitempty"`
	ExpireTimestamp  int64      `protobuf:"varint,2,opt,name=ExpireTimestamp,proto3" json:"ExpireTimestamp,omitempty"`
	ReconnectTo      LegacyHost `protobuf:"bytes,3,opt,name=ReconnectTo,proto3,customtype=LegacyHost" json:"ReconnectTo"`
	AuthorityNodeRef Reference  `protobuf:"bytes,4,opt,name=AuthorityNodeRef,proto3" json:"AuthorityNodeRef"`
}

func (m *PermitPayload) Reset()         { *m = PermitPayload{} }
func (m *PermitPayload) String() string { return proto.CompactTextString(m) }
func (*PermitPayload) ProtoMessage()    {}
func (*PermitPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{12}
}
func (m *PermitPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PermitPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PermitPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermitPayload.Merge(m, src)
}
func (m *PermitPayload) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PermitPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_PermitPayload.DiscardUnknown(m)
}

var xxx_messageInfo_PermitPayload proto.InternalMessageInfo

type BootstrapResponse struct {
	Code       BootstrapResponseCode `protobuf:"varint,1,opt,name=Code,proto3,enum=rms.BootstrapResponseCode" json:"Code,omitempty"`
	ETASeconds uint32                `protobuf:"varint,2,opt,name=ETASeconds,proto3" json:"ETASeconds,omitempty"`
}

func (m *BootstrapResponse) Reset()         { *m = BootstrapResponse{} }
func (m *BootstrapResponse) String() string { return proto.CompactTextString(m) }
func (*BootstrapResponse) ProtoMessage()    {}
func (*BootstrapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{13}
}
func (m *BootstrapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootstrapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BootstrapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapResponse.Merge(m, src)
}
func (m *BootstrapResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *BootstrapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapResponse proto.InternalMessageInfo

type BasicResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (m *BasicResponse) Reset()         { *m = BasicResponse{} }
func (m *BasicResponse) String() string { return proto.CompactTextString(m) }
func (*BasicResponse) ProtoMessage()    {}
func (*BasicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{14}
}
func (m *BasicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BasicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicResponse.Merge(m, src)
}
func (m *BasicResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *BasicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BasicResponse proto.InternalMessageInfo

type AuthorizeResponse struct {
	Code           AuthorizeResponseCode `protobuf:"varint,1,opt,name=Code,proto3,enum=rms.AuthorizeResponseCode" json:"Code,omitempty"`
	Timestamp      int64                 `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Error          string                `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	Permit         *Permit               `protobuf:"bytes,4,opt,name=Permit,proto3" json:"Permit,omitempty"`
	DiscoveryCount uint32                `protobuf:"varint,5,opt,name=DiscoveryCount,proto3" json:"DiscoveryCount,omitempty"`
}

func (m *AuthorizeResponse) Reset()         { *m = AuthorizeResponse{} }
func (m *AuthorizeResponse) String() string { return proto.CompactTextString(m) }
func (*AuthorizeResponse) ProtoMessage()    {}
func (*AuthorizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{15}
}
func (m *AuthorizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AuthorizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeResponse.Merge(m, src)
}
func (m *AuthorizeResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AuthorizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeResponse proto.InternalMessageInfo

type SignCertResponse struct {
	Sign []byte `protobuf:"bytes,1,opt,name=Sign,proto3" json:"Sign,omitempty"`
}

func (m *SignCertResponse) Reset()         { *m = SignCertResponse{} }
func (m *SignCertResponse) String() string { return proto.CompactTextString(m) }
func (*SignCertResponse) ProtoMessage()    {}
func (*SignCertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{16}
}
func (m *SignCertResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignCertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SignCertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignCertResponse.Merge(m, src)
}
func (m *SignCertResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SignCertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignCertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignCertResponse proto.InternalMessageInfo

type ErrorResponse struct {
	Error string `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (m *ErrorResponse) Reset()         { *m = ErrorResponse{} }
func (m *ErrorResponse) String() string { return proto.CompactTextString(m) }
func (*ErrorResponse) ProtoMessage()    {}
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{17}
}
func (m *ErrorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ErrorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorResponse.Merge(m, src)
}
func (m *ErrorResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ErrorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorResponse proto.InternalMessageInfo

type UpdateScheduleResponse struct {
}

func (m *UpdateScheduleResponse) Reset()         { *m = UpdateScheduleResponse{} }
func (m *UpdateScheduleResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateScheduleResponse) ProtoMessage()    {}
func (*UpdateScheduleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{18}
}
func (m *UpdateScheduleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateScheduleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UpdateScheduleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateScheduleResponse.Merge(m, src)
}
func (m *UpdateScheduleResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UpdateScheduleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateScheduleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateScheduleResponse proto.InternalMessageInfo

type ReconnectResponse struct {
}

func (m *ReconnectResponse) Reset()         { *m = ReconnectResponse{} }
func (m *ReconnectResponse) String() string { return proto.CompactTextString(m) }
func (*ReconnectResponse) ProtoMessage()    {}
func (*ReconnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edec8216b92dd7eb, []int{19}
}
func (m *ReconnectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReconnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReconnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReconnectResponse.Merge(m, src)
}
func (m *ReconnectResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ReconnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReconnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReconnectResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("rms.BootstrapResponseCode", BootstrapResponseCode_name, BootstrapResponseCode_value)
	proto.RegisterEnum("rms.AuthorizeResponseCode", AuthorizeResponseCode_name, AuthorizeResponseCode_value)
	proto.RegisterType((*Packet)(nil), "rms.Packet")
	proto.RegisterType((*Request)(nil), "rms.Request")
	proto.RegisterType((*Response)(nil), "rms.Response")
	proto.RegisterType((*RPCRequest)(nil), "rms.RPCRequest")
	proto.RegisterType((*UpdateScheduleRequest)(nil), "rms.UpdateScheduleRequest")
	proto.RegisterType((*ReconnectRequest)(nil), "rms.ReconnectRequest")
	proto.RegisterType((*BootstrapRequest)(nil), "rms.BootstrapRequest")
	proto.RegisterType((*AuthorizeData)(nil), "rms.AuthorizeData")
	proto.RegisterType((*AuthorizeRequest)(nil), "rms.AuthorizeRequest")
	proto.RegisterType((*SignCertRequest)(nil), "rms.SignCertRequest")
	proto.RegisterType((*RPCResponse)(nil), "rms.RPCResponse")
	proto.RegisterType((*Permit)(nil), "rms.Permit")
	proto.RegisterType((*PermitPayload)(nil), "rms.PermitPayload")
	proto.RegisterType((*BootstrapResponse)(nil), "rms.BootstrapResponse")
	proto.RegisterType((*BasicResponse)(nil), "rms.BasicResponse")
	proto.RegisterType((*AuthorizeResponse)(nil), "rms.AuthorizeResponse")
	proto.RegisterType((*SignCertResponse)(nil), "rms.SignCertResponse")
	proto.RegisterType((*ErrorResponse)(nil), "rms.ErrorResponse")
	proto.RegisterType((*UpdateScheduleResponse)(nil), "rms.UpdateScheduleResponse")
	proto.RegisterType((*ReconnectResponse)(nil), "rms.ReconnectResponse")
}

func init() { proto.RegisterFile("proto_legacy_packet.proto", fileDescriptor_edec8216b92dd7eb) }

var fileDescriptor_edec8216b92dd7eb = []byte{
	// 1193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xdf, 0x6e, 0x1b, 0xc5,
	0x17, 0xf6, 0xda, 0x8e, 0x13, 0x1f, 0x67, 0xd3, 0xcd, 0xb4, 0xce, 0x6f, 0x7f, 0x69, 0xe5, 0x5a,
	0xdb, 0x52, 0x59, 0x41, 0xb8, 0x52, 0x0b, 0x51, 0x11, 0x12, 0x10, 0xdb, 0x91, 0x12, 0x68, 0x2b,
	0x6b, 0x1c, 0x40, 0x42, 0x48, 0xd5, 0x66, 0x3d, 0xb1, 0xb7, 0xd8, 0x3b, 0xcb, 0xec, 0x6c, 0x8b,
	0x79, 0x0a, 0x1e, 0x81, 0xc7, 0xe0, 0x01, 0xb8, 0xc8, 0x65, 0xaf, 0x50, 0x04, 0x52, 0x44, 0x93,
	0x97, 0x40, 0x5c, 0xa1, 0x99, 0x9d, 0xfd, 0xe3, 0xb5, 0x53, 0x72, 0xb7, 0xf3, 0xcd, 0x77, 0x7c,
	0xfe, 0x7c, 0xe7, 0x9c, 0x31, 0xfc, 0xdf, 0x67, 0x94, 0xd3, 0x17, 0x13, 0x32, 0xb2, 0x9d, 0xd9,
	0x0b, 0xdf, 0x76, 0xbe, 0x27, 0xbc, 0x2d, 0x31, 0x54, 0x62, 0xd3, 0x60, 0xfb, 0x83, 0x91, 0xcb,
	0xc7, 0xe1, 0x71, 0xdb, 0xa1, 0xd3, 0x87, 0x23, 0x3a, 0xa2, 0x0f, 0xe5, 0xdd, 0x71, 0x78, 0x22,
	0x4f, 0xf2, 0x20, 0xbf, 0x22, 0x9b, 0xed, 0xed, 0xf9, 0x9f, 0x63, 0xf4, 0xc4, 0x9d, 0x10, 0x75,
	0x57, 0x65, 0xd3, 0x20, 0xfa, 0xb4, 0x7e, 0x2f, 0x42, 0xa5, 0x2f, 0x7d, 0xa1, 0x3b, 0x50, 0xf5,
	0xe9, 0x64, 0x36, 0xa5, 0xcc, 0x1f, 0x9b, 0x46, 0x53, 0x6b, 0xad, 0xe0, 0x14, 0x40, 0x3b, 0x50,
	0x19, 0x10, 0x6f, 0x48, 0x98, 0x79, 0xab, 0xa9, 0xb5, 0xd6, 0x3b, 0xe8, 0xf4, 0xfc, 0x6e, 0xe1,
	0x8f, 0xf3, 0xbb, 0xf0, 0x54, 0x7a, 0x38, 0xa0, 0x01, 0xc7, 0x8a, 0x81, 0xda, 0xb0, 0x86, 0x89,
	0x43, 0xdc, 0x57, 0x84, 0x99, 0xf5, 0x2b, 0xd9, 0x09, 0x47, 0x78, 0xc6, 0xe4, 0x87, 0x90, 0x04,
	0xfc, 0xb0, 0x67, 0x6e, 0x35, 0xb5, 0x56, 0x19, 0xa7, 0x00, 0x32, 0x61, 0xf5, 0x88, 0xd9, 0x0e,
	0x39, 0xec, 0x99, 0xff, 0x6b, 0x6a, 0xad, 0x2a, 0x8e, 0x8f, 0xe8, 0x3e, 0xe8, 0xf2, 0x73, 0xe0,
	0xdb, 0x5e, 0xcf, 0xe6, 0xb6, 0x69, 0x0a, 0x67, 0x78, 0x1e, 0x44, 0x08, 0xca, 0x47, 0x33, 0x9f,
	0x98, 0xdb, 0x4d, 0xad, 0xa5, 0x63, 0xf9, 0x8d, 0x5a, 0xb0, 0xaa, 0x1c, 0x98, 0xb7, 0x9b, 0x5a,
	0xab, 0xf6, 0x68, 0xbd, 0x2d, 0x6a, 0xa2, 0xb0, 0x83, 0x02, 0x8e, 0xaf, 0xd1, 0xfb, 0x22, 0x97,
	0xc0, 0xa7, 0x5e, 0x40, 0xcc, 0x3b, 0x92, 0xaa, 0x2b, 0x6a, 0x04, 0x1e, 0x14, 0x70, 0x42, 0xe8,
	0x54, 0x61, 0xb5, 0x6f, 0xcf, 0x26, 0xd4, 0x1e, 0x5a, 0x67, 0xc5, 0xc4, 0x05, 0xba, 0x07, 0x25,
	0xdc, 0xef, 0x9a, 0x45, 0x69, 0x7e, 0x23, 0x32, 0xef, 0x77, 0x53, 0x67, 0xe2, 0x16, 0x7d, 0x04,
	0xd5, 0x0e, 0xa5, 0x3c, 0xe0, 0xcc, 0xf6, 0xcd, 0xb2, 0xa4, 0xd6, 0x25, 0x35, 0x41, 0x53, 0x83,
	0x94, 0x29, 0xcc, 0xf6, 0x42, 0x3e, 0xa6, 0xcc, 0xfd, 0x89, 0x98, 0x2b, 0x19, 0xb3, 0x04, 0xcd,
	0x98, 0x25, 0x18, 0x7a, 0x04, 0x6b, 0x03, 0x77, 0xe4, 0x75, 0x09, 0xe3, 0x66, 0x45, 0x5a, 0xdd,
	0x92, 0x56, 0x31, 0x98, 0x1a, 0x25, 0x3c, 0xd4, 0x83, 0x8d, 0xaf, 0xfc, 0xa1, 0xcd, 0xc9, 0xc0,
	0x19, 0x93, 0x61, 0x38, 0x21, 0xe6, 0xaa, 0xb4, 0xdc, 0x96, 0x96, 0xf3, 0x57, 0xa9, 0x7d, 0xce,
	0x46, 0x04, 0x8c, 0x89, 0x43, 0x3d, 0x8f, 0x38, 0xdc, 0x5c, 0xcb, 0x04, 0x9c, 0xa0, 0x99, 0x80,
	0x13, 0x4c, 0x94, 0x56, 0xe1, 0xd6, 0xaf, 0xa5, 0x54, 0x13, 0x74, 0x3f, 0x5b, 0x5b, 0x23, 0xad,
	0x6d, 0xa2, 0x8e, 0x2c, 0xee, 0x0e, 0xac, 0x74, 0xec, 0xc0, 0x75, 0xcc, 0x92, 0xe4, 0xa1, 0xa8,
	0xb0, 0x02, 0xc9, 0x30, 0x23, 0x0a, 0xda, 0x5d, 0x14, 0x62, 0x2b, 0x2f, 0x44, 0x62, 0x93, 0x51,
	0x62, 0x77, 0x51, 0x89, 0xad, 0xbc, 0x12, 0xa9, 0x5d, 0x2a, 0xc5, 0xe3, 0x05, 0x29, 0xea, 0x39,
	0x29, 0xd2, 0x4e, 0x4b, 0xb4, 0xd8, 0x81, 0x95, 0x7d, 0xc6, 0x28, 0x53, 0x12, 0x44, 0x09, 0x49,
	0x24, 0x9b, 0x90, 0x04, 0xd0, 0xfe, 0x82, 0x6e, 0x51, 0xd9, 0x6f, 0x2f, 0xd5, 0x2d, 0xb1, 0xce,
	0x0b, 0xb7, 0x9b, 0x15, 0xae, 0x9a, 0xc9, 0x2f, 0x23, 0x5c, 0x9a, 0x5f, 0xaa, 0x1c, 0xa4, 0x6a,
	0x59, 0x4f, 0x00, 0xd2, 0xce, 0x47, 0x5b, 0x50, 0x79, 0x46, 0xf8, 0x98, 0x0e, 0x4d, 0x4d, 0x0e,
	0xb6, 0x3a, 0x89, 0x89, 0x95, 0xe3, 0x5c, 0x94, 0xe3, 0x2c, 0xbf, 0xad, 0xd7, 0x50, 0x5f, 0xda,
	0x61, 0xe8, 0x63, 0xd0, 0x9f, 0xda, 0x01, 0x7f, 0x4e, 0x87, 0xa4, 0x1f, 0x4e, 0x02, 0x22, 0x7f,
	0x4b, 0xef, 0xdc, 0x14, 0x1b, 0xe7, 0x9f, 0xf3, 0xbb, 0x35, 0x09, 0x3e, 0x0f, 0xa7, 0xc7, 0x84,
	0xe1, 0x79, 0x26, 0xba, 0x07, 0x95, 0x3e, 0x61, 0x53, 0x97, 0xab, 0xf6, 0xa9, 0xc9, 0x74, 0x22,
	0x08, 0xab, 0x2b, 0x6b, 0x0a, 0x46, 0xbe, 0x33, 0xd1, 0x87, 0x50, 0x4b, 0xb0, 0x23, 0x2a, 0x3d,
	0x2e, 0xdf, 0x71, 0x59, 0xda, 0xf5, 0xdc, 0xbd, 0x06, 0x23, 0x3f, 0xf0, 0xe8, 0x53, 0x30, 0xba,
	0xb6, 0x37, 0x74, 0x45, 0xfa, 0xfd, 0x68, 0x93, 0xab, 0x9f, 0x88, 0xd6, 0x96, 0xc2, 0x3a, 0x65,
	0x11, 0x01, 0x5e, 0xe0, 0x66, 0x1c, 0x97, 0xaf, 0x76, 0xec, 0x82, 0x9e, 0xf4, 0xa4, 0xdc, 0x9b,
	0x4d, 0xa8, 0x89, 0x56, 0x73, 0x4f, 0x5c, 0xc7, 0xe6, 0x51, 0x59, 0xd7, 0x71, 0x16, 0x12, 0x7b,
	0xfb, 0xc8, 0x9d, 0x92, 0x80, 0xdb, 0x53, 0x5f, 0x06, 0x54, 0xc2, 0x29, 0x20, 0xf6, 0xf6, 0xd7,
	0x84, 0x05, 0x2e, 0xf5, 0xe4, 0xd4, 0x55, 0x71, 0x7c, 0xb4, 0x5e, 0x82, 0x91, 0xdf, 0x4e, 0xe8,
	0x49, 0xce, 0xbd, 0xf4, 0x17, 0x37, 0xf6, 0xdc, 0x0d, 0xce, 0xc5, 0x79, 0x07, 0xaa, 0x62, 0x2c,
	0x6c, 0x1e, 0x32, 0xa2, 0x5a, 0x26, 0x05, 0xac, 0x3d, 0xb8, 0x91, 0xdb, 0x69, 0xa8, 0x0d, 0xab,
	0xa2, 0x07, 0x30, 0x39, 0x51, 0x4e, 0x36, 0x54, 0x1b, 0x9f, 0x10, 0x46, 0x3c, 0x27, 0xae, 0x63,
	0x4c, 0xb2, 0x3e, 0x81, 0x5a, 0x66, 0xa5, 0x88, 0xae, 0xc5, 0x24, 0x08, 0x27, 0x5c, 0x95, 0x44,
	0x9d, 0xd0, 0xad, 0x78, 0x24, 0x8b, 0x32, 0xdb, 0xe8, 0x60, 0x7d, 0x1b, 0xd7, 0x1e, 0x3d, 0x4a,
	0x1e, 0x87, 0xb9, 0xdc, 0xa2, 0x5b, 0x75, 0x13, 0xbb, 0x56, 0xc7, 0xff, 0xc8, 0xed, 0x4f, 0x0d,
	0xf4, 0x39, 0x73, 0xd4, 0x82, 0x1b, 0x5f, 0x50, 0xd7, 0x23, 0xac, 0x1f, 0x1e, 0x4f, 0x5c, 0xe7,
	0x4b, 0x32, 0x53, 0x41, 0xe6, 0x61, 0xc1, 0xdc, 0xff, 0xd1, 0x77, 0x19, 0xc9, 0x2b, 0x98, 0x87,
	0xf3, 0xcd, 0x5e, 0xba, 0x5e, 0xb3, 0x7f, 0x9e, 0x68, 0xcc, 0x67, 0x71, 0xb5, 0xcb, 0xef, 0xa8,
	0xf6, 0x02, 0xdb, 0x72, 0x60, 0x73, 0x61, 0xe3, 0xa2, 0x36, 0x94, 0xbb, 0x74, 0x18, 0x75, 0xe3,
	0x86, 0x7a, 0x79, 0x16, 0x58, 0x82, 0x81, 0x25, 0x0f, 0x35, 0x00, 0xf6, 0x8f, 0xf6, 0x06, 0x22,
	0xb0, 0x61, 0x20, 0x33, 0xd4, 0x71, 0x06, 0xb1, 0x3e, 0x03, 0x7d, 0xee, 0x19, 0x10, 0x5d, 0x3b,
	0x08, 0x1d, 0x87, 0x04, 0x81, 0xf4, 0xb1, 0x86, 0xe3, 0xe3, 0x15, 0xfa, 0xfe, 0xa6, 0xc1, 0xe6,
	0xc2, 0x82, 0x5f, 0x1a, 0xe6, 0x02, 0x2b, 0x13, 0xe6, 0xbb, 0x27, 0x29, 0xf1, 0x5c, 0xca, 0x78,
	0xbe, 0xd6, 0x54, 0xa3, 0x07, 0xb0, 0xd1, 0x73, 0x03, 0x87, 0xbe, 0x22, 0x6c, 0xd6, 0xa5, 0xa1,
	0xc7, 0xe5, 0xcb, 0xa4, 0xe3, 0x1c, 0x6a, 0x3d, 0x00, 0x23, 0xff, 0xde, 0x88, 0x35, 0x2c, 0x30,
	0xd5, 0x41, 0xf2, 0xdb, 0x7a, 0x0f, 0xf4, 0xb9, 0x57, 0x26, 0x8d, 0x4d, 0xcb, 0x56, 0xc5, 0x84,
	0xad, 0xe5, 0xef, 0x8a, 0x75, 0x13, 0x36, 0x17, 0xde, 0x8b, 0x1d, 0x07, 0xea, 0x4b, 0x45, 0x44,
	0xeb, 0xb0, 0xb6, 0xe7, 0x38, 0xc4, 0xe7, 0x64, 0x68, 0x14, 0x10, 0xca, 0x3f, 0x64, 0x86, 0x86,
	0x36, 0x41, 0x57, 0xd8, 0x98, 0x32, 0x7e, 0xd8, 0x33, 0x8a, 0x08, 0xc4, 0x80, 0xbe, 0x24, 0x0e,
	0x37, 0x4a, 0xa8, 0x0a, 0x2b, 0x98, 0x70, 0x36, 0x33, 0xca, 0x3b, 0xdf, 0x41, 0x7d, 0xa9, 0x04,
	0xa8, 0x96, 0x48, 0x1e, 0xf9, 0xf8, 0x86, 0x51, 0x6f, 0x94, 0x54, 0xdf, 0x28, 0x22, 0x03, 0xd6,
	0x25, 0xf6, 0xcc, 0xf6, 0x84, 0x27, 0xa3, 0x94, 0x20, 0x6a, 0xa3, 0x19, 0xe5, 0x4e, 0xeb, 0xf4,
	0x6d, 0xa3, 0xf0, 0xf7, 0xdb, 0x46, 0xe1, 0xf4, 0xa2, 0xa1, 0xbd, 0xb9, 0x68, 0x68, 0x67, 0x17,
	0x0d, 0xed, 0xaf, 0x8b, 0x46, 0xe1, 0xe7, 0xcb, 0x46, 0xe1, 0x97, 0xcb, 0x86, 0xf6, 0xe6, 0xb2,
	0x51, 0x38, 0xbb, 0x6c, 0x14, 0x8e, 0x2b, 0xf2, 0x9f, 0xf7, 0xe3, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x40, 0x4c, 0x68, 0x19, 0xf1, 0x0b, 0x00, 0x00,
}

func (m *Packet) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *Packet) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Packet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.Payload != nil {
		{
			size := m.Payload.ProtoSize()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.TraceSpanData) > 0 {
		i -= len(m.TraceSpanData)
		copy(dAtA[i:], m.TraceSpanData)
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(len(m.TraceSpanData)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.TraceID) > 0 {
		i -= len(m.TraceID)
		copy(dAtA[i:], m.TraceID)
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(len(m.TraceID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.RequestID != 0 {
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(m.RequestID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	{
		size := m.Receiver.ProtoSize()
		i -= size
		if _, err := m.Receiver.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	{
		size := m.Sender.ProtoSize()
		i -= size
		if _, err := m.Sender.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	if m.Polymorph != 0 {
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(m.Polymorph))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	return len(dAtA) - i, nil
}

func (m *Packet_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Packet_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}

func (m *Packet_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Packet_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.Request != nil {
		{
			size := m.Request.ProtoSize()
			i -= size
			if _, err := m.Request.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Request_RPC) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request_RPC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RPC != nil {
		{
			size, err := m.RPC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Request_Bootstrap) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request_Bootstrap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Bootstrap != nil {
		{
			size, err := m.Bootstrap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *Request_Authorize) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request_Authorize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Authorize != nil {
		{
			size, err := m.Authorize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}

func (m *Request_SignCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request_SignCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignCert != nil {
		{
			size, err := m.SignCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}

func (m *Request_UpdateSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request_UpdateSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateSchedule != nil {
		{
			size, err := m.UpdateSchedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}

func (m *Request_Reconnect) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request_Reconnect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Reconnect != nil {
		{
			size, err := m.Reconnect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.Response != nil {
		{
			size := m.Response.ProtoSize()
			i -= size
			if _, err := m.Response.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Response_RPC) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response_RPC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RPC != nil {
		{
			size, err := m.RPC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Response_Basic) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response_Basic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Basic != nil {
		{
			size, err := m.Basic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *Response_Bootstrap) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response_Bootstrap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Bootstrap != nil {
		{
			size, err := m.Bootstrap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *Response_Authorize) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response_Authorize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Authorize != nil {
		{
			size, err := m.Authorize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}

func (m *Response_SignCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response_SignCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignCert != nil {
		{
			size, err := m.SignCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}

func (m *Response_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}

func (m *Response_UpdateSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response_UpdateSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateSchedule != nil {
		{
			size, err := m.UpdateSchedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}

func (m *Response_Reconnect) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response_Reconnect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Reconnect != nil {
		{
			size, err := m.Reconnect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}

func (m *RPCRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *RPCRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RPCRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateScheduleRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *UpdateScheduleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateScheduleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.Permit != nil {
		{
			size, err := m.Permit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.LastNodePulse != 0 {
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(m.LastNodePulse))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReconnectRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *ReconnectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReconnectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.Permit != nil {
		{
			size, err := m.Permit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.ReconnectTo.ProtoSize()
		i -= size
		if _, err := m.ReconnectTo.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BootstrapRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *BootstrapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BootstrapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.Permit != nil {
		{
			size, err := m.Permit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.CandidateProfile.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *AuthorizeData) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *AuthorizeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Certificate) > 0 {
		i -= len(m.Certificate)
		copy(dAtA[i:], m.Certificate)
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(len(m.Certificate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthorizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *AuthorizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuthorizeData != nil {
		{
			size, err := m.AuthorizeData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignCertRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *SignCertRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignCertRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.NodeRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RPCResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *RPCResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RPCResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Permit) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *Permit) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Permit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PermitPayload) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *PermitPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermitPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.AuthorityNodeRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ReconnectTo.ProtoSize()
		i -= size
		if _, err := m.ReconnectTo.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ExpireTimestamp != 0 {
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(m.ExpireTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.JoinerPublicKey) > 0 {
		i -= len(m.JoinerPublicKey)
		copy(dAtA[i:], m.JoinerPublicKey)
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(len(m.JoinerPublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BootstrapResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *BootstrapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BootstrapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.ETASeconds != 0 {
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(m.ETASeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BasicResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *BasicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuthorizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *AuthorizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.DiscoveryCount != 0 {
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(m.DiscoveryCount))
		i--
		dAtA[i] = 0x28
	}
	if m.Permit != nil {
		{
			size, err := m.Permit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignCertResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *SignCertResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignCertResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ErrorResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *ErrorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintProtoLegacyPacket(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateScheduleResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *UpdateScheduleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateScheduleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	return len(dAtA) - i, nil
}

func (m *ReconnectResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *ReconnectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReconnectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	return len(dAtA) - i, nil
}

func encodeVarintProtoLegacyPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtoLegacyPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *Packet) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovProtoLegacyPacket(uint64(m.Polymorph))
	}
	l = m.Sender.ProtoSize()
	n += 2 + l + sovProtoLegacyPacket(uint64(l))
	l = m.Receiver.ProtoSize()
	n += 2 + l + sovProtoLegacyPacket(uint64(l))
	if m.RequestID != 0 {
		n += 2 + sovProtoLegacyPacket(uint64(m.RequestID))
	}
	l = len(m.TraceID)
	if l > 0 {
		n += 2 + l + sovProtoLegacyPacket(uint64(l))
	}
	l = len(m.TraceSpanData)
	if l > 0 {
		n += 2 + l + sovProtoLegacyPacket(uint64(l))
	}
	if m.Type != 0 {
		n += 2 + sovProtoLegacyPacket(uint64(m.Type))
	}
	if m.Payload != nil {
		n += m.Payload.ProtoSize()
	}
	return n
}

func (m *Packet_Request) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.ProtoSize()
		n += 2 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}
func (m *Packet_Response) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.ProtoSize()
		n += 2 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}
func (m *Request) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		n += m.Request.ProtoSize()
	}
	return n
}

func (m *Request_RPC) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RPC != nil {
		l = m.RPC.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}
func (m *Request_Bootstrap) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bootstrap != nil {
		l = m.Bootstrap.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}
func (m *Request_Authorize) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Authorize != nil {
		l = m.Authorize.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}
func (m *Request_SignCert) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignCert != nil {
		l = m.SignCert.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}
func (m *Request_UpdateSchedule) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateSchedule != nil {
		l = m.UpdateSchedule.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}
func (m *Request_Reconnect) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reconnect != nil {
		l = m.Reconnect.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}
func (m *Response) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.ProtoSize()
	}
	return n
}

func (m *Response_RPC) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RPC != nil {
		l = m.RPC.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}
func (m *Response_Basic) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Basic != nil {
		l = m.Basic.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}
func (m *Response_Bootstrap) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bootstrap != nil {
		l = m.Bootstrap.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}
func (m *Response_Authorize) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Authorize != nil {
		l = m.Authorize.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}
func (m *Response_SignCert) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignCert != nil {
		l = m.SignCert.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}
func (m *Response_Error) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}
func (m *Response_UpdateSchedule) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateSchedule != nil {
		l = m.UpdateSchedule.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}
func (m *Response_Reconnect) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reconnect != nil {
		l = m.Reconnect.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}
func (m *RPCRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}

func (m *UpdateScheduleRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastNodePulse != 0 {
		n += 1 + sovProtoLegacyPacket(uint64(m.LastNodePulse))
	}
	if m.Permit != nil {
		l = m.Permit.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}

func (m *ReconnectRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReconnectTo.ProtoSize()
	n += 1 + l + sovProtoLegacyPacket(uint64(l))
	if m.Permit != nil {
		l = m.Permit.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}

func (m *BootstrapRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CandidateProfile.ProtoSize()
	n += 1 + l + sovProtoLegacyPacket(uint64(l))
	if m.Permit != nil {
		l = m.Permit.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}

func (m *AuthorizeData) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Certificate)
	if l > 0 {
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovProtoLegacyPacket(uint64(m.Timestamp))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}

func (m *AuthorizeRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthorizeData != nil {
		l = m.AuthorizeData.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}

func (m *SignCertRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NodeRef.ProtoSize()
	n += 1 + l + sovProtoLegacyPacket(uint64(l))
	return n
}

func (m *RPCResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}

func (m *Permit) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Payload.ProtoSize()
	n += 1 + l + sovProtoLegacyPacket(uint64(l))
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}

func (m *PermitPayload) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JoinerPublicKey)
	if l > 0 {
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	if m.ExpireTimestamp != 0 {
		n += 1 + sovProtoLegacyPacket(uint64(m.ExpireTimestamp))
	}
	l = m.ReconnectTo.ProtoSize()
	n += 1 + l + sovProtoLegacyPacket(uint64(l))
	l = m.AuthorityNodeRef.ProtoSize()
	n += 1 + l + sovProtoLegacyPacket(uint64(l))
	return n
}

func (m *BootstrapResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovProtoLegacyPacket(uint64(m.Code))
	}
	if m.ETASeconds != 0 {
		n += 1 + sovProtoLegacyPacket(uint64(m.ETASeconds))
	}
	return n
}

func (m *BasicResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}

func (m *AuthorizeResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovProtoLegacyPacket(uint64(m.Code))
	}
	if m.Timestamp != 0 {
		n += 1 + sovProtoLegacyPacket(uint64(m.Timestamp))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	if m.Permit != nil {
		l = m.Permit.ProtoSize()
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	if m.DiscoveryCount != 0 {
		n += 1 + sovProtoLegacyPacket(uint64(m.DiscoveryCount))
	}
	return n
}

func (m *SignCertResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}

func (m *ErrorResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovProtoLegacyPacket(uint64(l))
	}
	return n
}

func (m *UpdateScheduleResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReconnectResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovProtoLegacyPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtoLegacyPacket(x uint64) (n int) {
	return sovProtoLegacyPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Packet) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *Packet) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: Packet: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: Packet: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 16:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
				}
				m.Polymorph = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					m.Polymorph |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 20:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				iNdEx = postIndex
			case 21:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if err := m.Receiver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				iNdEx = postIndex
			case 22:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
				}
				m.RequestID = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					m.RequestID |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 23:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.TraceID = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 24:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field TraceSpanData", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.TraceSpanData = append(m.TraceSpanData[:0], dAtA[iNdEx:postIndex]...)
				if m.TraceSpanData == nil {
					m.TraceSpanData = []byte{}
				}
				iNdEx = postIndex
			case 26:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
				}
				m.Type = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					m.Type |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 27:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				v := &Request{}
				if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Payload = &Packet_Request{v}
				iNdEx = postIndex
			case 28:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				v := &Response{}
				if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Payload = &Packet_Response{v}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *Request) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: Request: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 2:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field RPC", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				v := &RPCRequest{}
				if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Request = &Request_RPC{v}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Bootstrap", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				v := &BootstrapRequest{}
				if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Request = &Request_Bootstrap{v}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Authorize", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				v := &AuthorizeRequest{}
				if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Request = &Request_Authorize{v}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field SignCert", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				v := &SignCertRequest{}
				if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Request = &Request_SignCert{v}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field UpdateSchedule", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				v := &UpdateScheduleRequest{}
				if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Request = &Request_UpdateSchedule{v}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Reconnect", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				v := &ReconnectRequest{}
				if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Request = &Request_Reconnect{v}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *Response) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: Response: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 2:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field RPC", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				v := &RPCResponse{}
				if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Response = &Response_RPC{v}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Basic", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				v := &BasicResponse{}
				if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Response = &Response_Basic{v}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Bootstrap", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				v := &BootstrapResponse{}
				if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Response = &Response_Bootstrap{v}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Authorize", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				v := &AuthorizeResponse{}
				if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Response = &Response_Authorize{v}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field SignCert", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				v := &SignCertResponse{}
				if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Response = &Response_SignCert{v}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				v := &ErrorResponse{}
				if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Response = &Response_Error{v}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field UpdateSchedule", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				v := &UpdateScheduleResponse{}
				if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Response = &Response_UpdateSchedule{v}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Reconnect", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				v := &ReconnectResponse{}
				if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Response = &Response_Reconnect{v}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *RPCRequest) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *RPCRequest) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: RPCRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: RPCRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.Method = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
				if m.Data == nil {
					m.Data = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *UpdateScheduleRequest) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *UpdateScheduleRequest) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: UpdateScheduleRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: UpdateScheduleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field LastNodePulse", wireType)
				}
				m.LastNodePulse = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					m.LastNodePulse |= PulseNumber(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Permit", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if m.Permit == nil {
					m.Permit = &Permit{}
				}
				if err := m.Permit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *ReconnectRequest) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *ReconnectRequest) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: ReconnectRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: ReconnectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field ReconnectTo", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if err := m.ReconnectTo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Permit", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if m.Permit == nil {
					m.Permit = &Permit{}
				}
				if err := m.Permit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *BootstrapRequest) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *BootstrapRequest) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: BootstrapRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: BootstrapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 2:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field CandidateProfile", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if err := m.CandidateProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Permit", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if m.Permit == nil {
					m.Permit = &Permit{}
				}
				if err := m.Permit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *AuthorizeData) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *AuthorizeData) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: AuthorizeData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: AuthorizeData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.Certificate = append(m.Certificate[:0], dAtA[iNdEx:postIndex]...)
				if m.Certificate == nil {
					m.Certificate = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				m.Timestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					m.Timestamp |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.Version = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *AuthorizeRequest) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *AuthorizeRequest) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: AuthorizeRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: AuthorizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field AuthorizeData", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if m.AuthorizeData == nil {
					m.AuthorizeData = &AuthorizeData{}
				}
				if err := m.AuthorizeData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
				if m.Signature == nil {
					m.Signature = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *SignCertRequest) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *SignCertRequest) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: SignCertRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: SignCertRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field NodeRef", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if err := m.NodeRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *RPCResponse) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *RPCResponse) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: RPCResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: RPCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
				if m.Result == nil {
					m.Result = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.Error = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *Permit) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *Permit) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: Permit: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: Permit: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
				if m.Signature == nil {
					m.Signature = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *PermitPayload) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *PermitPayload) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: PermitPayload: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: PermitPayload: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field JoinerPublicKey", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.JoinerPublicKey = append(m.JoinerPublicKey[:0], dAtA[iNdEx:postIndex]...)
				if m.JoinerPublicKey == nil {
					m.JoinerPublicKey = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field ExpireTimestamp", wireType)
				}
				m.ExpireTimestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					m.ExpireTimestamp |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field ReconnectTo", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if err := m.ReconnectTo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field AuthorityNodeRef", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if err := m.AuthorityNodeRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *BootstrapResponse) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *BootstrapResponse) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: BootstrapResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: BootstrapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
				}
				m.Code = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					m.Code |= BootstrapResponseCode(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field ETASeconds", wireType)
				}
				m.ETASeconds = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					m.ETASeconds |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *BasicResponse) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *BasicResponse) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: BasicResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: BasicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Success = bool(v != 0)
			case 2:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.Error = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *AuthorizeResponse) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *AuthorizeResponse) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: AuthorizeResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: AuthorizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
				}
				m.Code = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					m.Code |= AuthorizeResponseCode(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				m.Timestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					m.Timestamp |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.Error = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Permit", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if m.Permit == nil {
					m.Permit = &Permit{}
				}
				if err := m.Permit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryCount", wireType)
				}
				m.DiscoveryCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					m.DiscoveryCount |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *SignCertResponse) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *SignCertResponse) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: SignCertResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: SignCertResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
				if m.Sign == nil {
					m.Sign = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *ErrorResponse) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *ErrorResponse) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: ErrorResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: ErrorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacyPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.Error = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *UpdateScheduleResponse) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *UpdateScheduleResponse) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: UpdateScheduleResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: UpdateScheduleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func (m *ReconnectResponse) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacyPacket)
	return err
}
func (m *ReconnectResponse) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: ReconnectResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: ReconnectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacyPacket(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacyPacket
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func skipProtoLegacyPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtoLegacyPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoLegacyPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtoLegacyPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtoLegacyPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtoLegacyPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtoLegacyPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtoLegacyPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtoLegacyPacket = fmt.Errorf("proto: unexpected end of group")
	ErrExpectedBinaryMarkerProtoLegacyPacket = fmt.Errorf("proto: binary marker was expected")
)
