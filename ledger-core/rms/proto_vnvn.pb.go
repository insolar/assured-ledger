// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto_vnvn.proto

package rms

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/insolar/assured-ledger/ledger-core/insproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VStateReport_StateStatus int32

const (
	StateStatusInvalid  VStateReport_StateStatus = 0
	StateStatusReady    VStateReport_StateStatus = 1
	StateStatusEmpty    VStateReport_StateStatus = 2
	StateStatusInactive VStateReport_StateStatus = 3
	StateStatusMissing  VStateReport_StateStatus = 4
)

var VStateReport_StateStatus_name = map[int32]string{
	0: "StateStatusInvalid",
	1: "StateStatusReady",
	2: "StateStatusEmpty",
	3: "StateStatusInactive",
	4: "StateStatusMissing",
}

var VStateReport_StateStatus_value = map[string]int32{
	"StateStatusInvalid":  0,
	"StateStatusReady":    1,
	"StateStatusEmpty":    2,
	"StateStatusInactive": 3,
	"StateStatusMissing":  4,
}

func (x VStateReport_StateStatus) String() string {
	return proto.EnumName(VStateReport_StateStatus_name, int32(x))
}

func (VStateReport_StateStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{6, 0}
}

type VFindCallResponse_CallState int32

const (
	CallStateInvalid VFindCallResponse_CallState = 0
	CallStateMissing VFindCallResponse_CallState = 1
	CallStateUnknown VFindCallResponse_CallState = 2
	CallStateFound   VFindCallResponse_CallState = 3
)

var VFindCallResponse_CallState_name = map[int32]string{
	0: "CallStateInvalid",
	1: "CallStateMissing",
	2: "CallStateUnknown",
	3: "CallStateFound",
}

var VFindCallResponse_CallState_value = map[string]int32{
	"CallStateInvalid": 0,
	"CallStateMissing": 1,
	"CallStateUnknown": 2,
	"CallStateFound":   3,
}

func (x VFindCallResponse_CallState) String() string {
	return proto.EnumName(VFindCallResponse_CallState_name, int32(x))
}

func (VFindCallResponse_CallState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{12, 0}
}

type VCachedMemoryResponse_Status int32

const (
	CachedMemoryStateUnknown  VCachedMemoryResponse_Status = 0
	CachedMemoryStateFound    VCachedMemoryResponse_Status = 1
	CachedMemoryStateRedirect VCachedMemoryResponse_Status = 2
	CachedMemoryStateMissing  VCachedMemoryResponse_Status = 3
)

var VCachedMemoryResponse_Status_name = map[int32]string{
	0: "CachedMemoryStateUnknown",
	1: "CachedMemoryStateFound",
	2: "CachedMemoryStateRedirect",
	3: "CachedMemoryStateMissing",
}

var VCachedMemoryResponse_Status_value = map[string]int32{
	"CachedMemoryStateUnknown":  0,
	"CachedMemoryStateFound":    1,
	"CachedMemoryStateRedirect": 2,
	"CachedMemoryStateMissing":  3,
}

func (x VCachedMemoryResponse_Status) String() string {
	return proto.EnumName(VCachedMemoryResponse_Status_name, int32(x))
}

func (VCachedMemoryResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{14, 0}
}

type Meta struct {
	Payload  Any         `protobuf:"bytes,20,opt,name=Payload,proto3" json:"Payload"`
	Sender   Reference   `protobuf:"bytes,21,opt,name=Sender,proto3" json:"Sender"`
	Receiver Reference   `protobuf:"bytes,22,opt,name=Receiver,proto3" json:"Receiver"`
	Pulse    PulseNumber `protobuf:"varint,23,opt,name=Pulse,proto3,casttype=PulseNumber" json:"Pulse"`
	ID       Binary      `protobuf:"bytes,24,opt,name=ID,proto3" json:"ID"`
}

func (m *Meta) Reset()         { *m = Meta{} }
func (m *Meta) String() string { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()    {}
func (*Meta) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{0}
}
func (m *Meta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Meta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Meta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meta.Merge(m, src)
}
func (m *Meta) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Meta) XXX_DiscardUnknown() {
	xxx_messageInfo_Meta.DiscardUnknown(m)
}

var xxx_messageInfo_Meta proto.InternalMessageInfo

func (m *Meta) GetPayload() Any {
	if m != nil {
		return m.Payload
	}
	return Any{}
}

func (m *Meta) GetSender() Reference {
	if m != nil {
		return m.Sender
	}
	return Reference{}
}

func (m *Meta) GetReceiver() Reference {
	if m != nil {
		return m.Receiver
	}
	return Reference{}
}

func (m *Meta) GetPulse() PulseNumber {
	if m != nil {
		return m.Pulse
	}
	return 0
}

func (m *Meta) GetID() Binary {
	if m != nil {
		return m.ID
	}
	return Binary{}
}

type MessageExample struct {
	RecordExample `protobuf:"bytes,19,opt,name=Record,proto3,embedded=Record" json:"Record"`
	// Add here custom fields
	MsgParam uint64 `protobuf:"varint,1800,opt,name=MsgParam,proto3" json:"MsgParam"`
	MsgBytes []byte `protobuf:"bytes,1801,opt,name=MsgBytes,proto3" json:"MsgBytes"`
}

func (m *MessageExample) Reset()         { *m = MessageExample{} }
func (m *MessageExample) String() string { return proto.CompactTextString(m) }
func (*MessageExample) ProtoMessage()    {}
func (*MessageExample) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{1}
}
func (m *MessageExample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageExample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MessageExample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageExample.Merge(m, src)
}
func (m *MessageExample) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessageExample) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageExample.DiscardUnknown(m)
}

var xxx_messageInfo_MessageExample proto.InternalMessageInfo

func (m *MessageExample) GetMsgParam() uint64 {
	if m != nil {
		return m.MsgParam
	}
	return 0
}

func (m *MessageExample) GetMsgBytes() []byte {
	if m != nil {
		return m.MsgBytes
	}
	return nil
}

func (m *MessageExample_Head) Reset()         { *m = MessageExample_Head{} }
func (m *MessageExample_Head) String() string { return proto.CompactTextString(m) }
func (*MessageExample_Head) ProtoMessage()    {}
func (*MessageExample_Head) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{1, 0}
}
func (m *MessageExample_Head) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageExample_Head) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MessageExample_Head) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageExample_Head.Merge(m, src)
}
func (m *MessageExample_Head) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessageExample_Head) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageExample_Head.DiscardUnknown(m)
}

var xxx_messageInfo_MessageExample_Head proto.InternalMessageInfo

type MessageExample2 struct {
	AnyRecordLazy `protobuf:"bytes,19,opt,name=Record,proto3,embedded=Record" json:"Record"`
	// Add here custom fields
	MsgParam uint64 `protobuf:"varint,1800,opt,name=MsgParam,proto3" json:"MsgParam"`
	MsgBytes []byte `protobuf:"bytes,1801,opt,name=MsgBytes,proto3" json:"MsgBytes"`
}

func (m *MessageExample2) Reset()         { *m = MessageExample2{} }
func (m *MessageExample2) String() string { return proto.CompactTextString(m) }
func (*MessageExample2) ProtoMessage()    {}
func (*MessageExample2) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{2}
}
func (m *MessageExample2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageExample2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MessageExample2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageExample2.Merge(m, src)
}
func (m *MessageExample2) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessageExample2) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageExample2.DiscardUnknown(m)
}

var xxx_messageInfo_MessageExample2 proto.InternalMessageInfo

func (m *MessageExample2) GetMsgParam() uint64 {
	if m != nil {
		return m.MsgParam
	}
	return 0
}

func (m *MessageExample2) GetMsgBytes() []byte {
	if m != nil {
		return m.MsgBytes
	}
	return nil
}

type VCallRequest struct {
	CallType                CallType            `protobuf:"varint,20,opt,name=CallType,proto3,enum=rms.CallType" json:"CallType"`
	CallFlags               CallFlags           `protobuf:"varint,21,opt,name=CallFlags,proto3,casttype=CallFlags" json:"CallFlags"`
	CallAsOf                PulseNumber         `protobuf:"varint,22,opt,name=CallAsOf,proto3,casttype=PulseNumber" json:"CallAsOf"`
	Caller                  Reference           `protobuf:"bytes,23,opt,name=Caller,proto3" json:"Caller"`
	Callee                  Reference           `protobuf:"bytes,24,opt,name=Callee,proto3" json:"Callee"`
	CallSiteDeclaration     Reference           `protobuf:"bytes,25,opt,name=CallSiteDeclaration,proto3" json:"CallSiteDeclaration"`
	CallSiteMethod          string              `protobuf:"bytes,26,opt,name=CallSiteMethod,proto3" json:"CallSiteMethod"`
	CallSequence            uint32              `protobuf:"varint,27,opt,name=CallSequence,proto3" json:"CallSequence"`
	CallReason              Reference           `protobuf:"bytes,28,opt,name=CallReason,proto3" json:"CallReason"`
	RootTX                  Reference           `protobuf:"bytes,29,opt,name=RootTX,proto3" json:"RootTX"`
	CallTX                  Reference           `protobuf:"bytes,30,opt,name=CallTX,proto3" json:"CallTX"`
	ExpenseCenter           Reference           `protobuf:"bytes,31,opt,name=ExpenseCenter,proto3" json:"ExpenseCenter"`
	ResourceCenter          Reference           `protobuf:"bytes,32,opt,name=ResourceCenter,proto3" json:"ResourceCenter"`
	DelegationSpec          CallDelegationToken `protobuf:"bytes,34,opt,name=DelegationSpec,proto3" json:"DelegationSpec"`
	ProducerSignature       Binary              `protobuf:"bytes,36,opt,name=ProducerSignature,proto3" json:"ProducerSignature"`
	RegistrarSignature      Binary              `protobuf:"bytes,37,opt,name=RegistrarSignature,proto3" json:"RegistrarSignature"`
	RegistrarDelegationSpec CallDelegationToken `protobuf:"bytes,38,opt,name=RegistrarDelegationSpec,proto3" json:"RegistrarDelegationSpec"`
	CallRequestFlags        CallRequestFlags    `protobuf:"varint,40,opt,name=CallRequestFlags,proto3,casttype=CallRequestFlags" json:"CallRequestFlags"`
	KnownCalleeIncoming     Reference           `protobuf:"bytes,41,opt,name=KnownCalleeIncoming,proto3" json:"KnownCalleeIncoming"`
	CallOutgoing            Reference           `protobuf:"bytes,43,opt,name=CallOutgoing,proto3" json:"CallOutgoing"`
	TXExpiry                PulseNumber         `protobuf:"varint,44,opt,name=TXExpiry,proto3,casttype=PulseNumber" json:"TXExpiry"`
	SecurityContext         Binary              `protobuf:"bytes,45,opt,name=SecurityContext,proto3" json:"SecurityContext"`
	TXContext               Binary              `protobuf:"bytes,46,opt,name=TXContext,proto3" json:"TXContext"`
	Arguments               Binary              `protobuf:"bytes,47,opt,name=Arguments,proto3" json:"Arguments"`
}

func (m *VCallRequest) Reset()         { *m = VCallRequest{} }
func (m *VCallRequest) String() string { return proto.CompactTextString(m) }
func (*VCallRequest) ProtoMessage()    {}
func (*VCallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{3}
}
func (m *VCallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VCallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VCallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VCallRequest.Merge(m, src)
}
func (m *VCallRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VCallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VCallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VCallRequest proto.InternalMessageInfo

func (m *VCallRequest) GetCallType() CallType {
	if m != nil {
		return m.CallType
	}
	return CallTypeInvalid
}

func (m *VCallRequest) GetCallFlags() CallFlags {
	if m != nil {
		return m.CallFlags
	}
	return 0
}

func (m *VCallRequest) GetCallAsOf() PulseNumber {
	if m != nil {
		return m.CallAsOf
	}
	return 0
}

func (m *VCallRequest) GetCaller() Reference {
	if m != nil {
		return m.Caller
	}
	return Reference{}
}

func (m *VCallRequest) GetCallee() Reference {
	if m != nil {
		return m.Callee
	}
	return Reference{}
}

func (m *VCallRequest) GetCallSiteDeclaration() Reference {
	if m != nil {
		return m.CallSiteDeclaration
	}
	return Reference{}
}

func (m *VCallRequest) GetCallSiteMethod() string {
	if m != nil {
		return m.CallSiteMethod
	}
	return ""
}

func (m *VCallRequest) GetCallSequence() uint32 {
	if m != nil {
		return m.CallSequence
	}
	return 0
}

func (m *VCallRequest) GetCallReason() Reference {
	if m != nil {
		return m.CallReason
	}
	return Reference{}
}

func (m *VCallRequest) GetRootTX() Reference {
	if m != nil {
		return m.RootTX
	}
	return Reference{}
}

func (m *VCallRequest) GetCallTX() Reference {
	if m != nil {
		return m.CallTX
	}
	return Reference{}
}

func (m *VCallRequest) GetExpenseCenter() Reference {
	if m != nil {
		return m.ExpenseCenter
	}
	return Reference{}
}

func (m *VCallRequest) GetResourceCenter() Reference {
	if m != nil {
		return m.ResourceCenter
	}
	return Reference{}
}

func (m *VCallRequest) GetDelegationSpec() CallDelegationToken {
	if m != nil {
		return m.DelegationSpec
	}
	return CallDelegationToken{}
}

func (m *VCallRequest) GetProducerSignature() Binary {
	if m != nil {
		return m.ProducerSignature
	}
	return Binary{}
}

func (m *VCallRequest) GetRegistrarSignature() Binary {
	if m != nil {
		return m.RegistrarSignature
	}
	return Binary{}
}

func (m *VCallRequest) GetRegistrarDelegationSpec() CallDelegationToken {
	if m != nil {
		return m.RegistrarDelegationSpec
	}
	return CallDelegationToken{}
}

func (m *VCallRequest) GetCallRequestFlags() CallRequestFlags {
	if m != nil {
		return m.CallRequestFlags
	}
	return 0
}

func (m *VCallRequest) GetKnownCalleeIncoming() Reference {
	if m != nil {
		return m.KnownCalleeIncoming
	}
	return Reference{}
}

func (m *VCallRequest) GetCallOutgoing() Reference {
	if m != nil {
		return m.CallOutgoing
	}
	return Reference{}
}

func (m *VCallRequest) GetTXExpiry() PulseNumber {
	if m != nil {
		return m.TXExpiry
	}
	return 0
}

func (m *VCallRequest) GetSecurityContext() Binary {
	if m != nil {
		return m.SecurityContext
	}
	return Binary{}
}

func (m *VCallRequest) GetTXContext() Binary {
	if m != nil {
		return m.TXContext
	}
	return Binary{}
}

func (m *VCallRequest) GetArguments() Binary {
	if m != nil {
		return m.Arguments
	}
	return Binary{}
}

type VCallResult struct {
	CallType                CallType            `protobuf:"varint,20,opt,name=CallType,proto3,enum=rms.CallType" json:"CallType"`
	CallFlags               CallFlags           `protobuf:"varint,21,opt,name=CallFlags,proto3,casttype=CallFlags" json:"CallFlags"`
	CallAsOf                PulseNumber         `protobuf:"varint,22,opt,name=CallAsOf,proto3,casttype=PulseNumber" json:"CallAsOf"`
	Caller                  Reference           `protobuf:"bytes,23,opt,name=Caller,proto3" json:"Caller"`
	Callee                  Reference           `protobuf:"bytes,24,opt,name=Callee,proto3" json:"Callee"`
	ResultFlags             uint32              `protobuf:"varint,25,opt,name=ResultFlags,proto3" json:"ResultFlags"`
	CallOutgoing            Reference           `protobuf:"bytes,26,opt,name=CallOutgoing,proto3" json:"CallOutgoing"`
	CallIncoming            Reference           `protobuf:"bytes,27,opt,name=CallIncoming,proto3" json:"CallIncoming"`
	DelegationSpec          CallDelegationToken `protobuf:"bytes,29,opt,name=DelegationSpec,proto3" json:"DelegationSpec"`
	CallIncomingResult      Reference           `protobuf:"bytes,31,opt,name=CallIncomingResult,proto3" json:"CallIncomingResult"`
	ProducerSignature       Binary              `protobuf:"bytes,32,opt,name=ProducerSignature,proto3" json:"ProducerSignature"`
	RegistrarSignature      Binary              `protobuf:"bytes,33,opt,name=RegistrarSignature,proto3" json:"RegistrarSignature"`
	RegistrarDelegationSpec CallDelegationToken `protobuf:"bytes,34,opt,name=RegistrarDelegationSpec,proto3" json:"RegistrarDelegationSpec"`
	SecurityContext         Binary              `protobuf:"bytes,37,opt,name=SecurityContext,proto3" json:"SecurityContext"`
	ReturnArguments         Binary              `protobuf:"bytes,38,opt,name=ReturnArguments,proto3" json:"ReturnArguments"`
}

func (m *VCallResult) Reset()         { *m = VCallResult{} }
func (m *VCallResult) String() string { return proto.CompactTextString(m) }
func (*VCallResult) ProtoMessage()    {}
func (*VCallResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{4}
}
func (m *VCallResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VCallResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VCallResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VCallResult.Merge(m, src)
}
func (m *VCallResult) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VCallResult) XXX_DiscardUnknown() {
	xxx_messageInfo_VCallResult.DiscardUnknown(m)
}

var xxx_messageInfo_VCallResult proto.InternalMessageInfo

func (m *VCallResult) GetCallType() CallType {
	if m != nil {
		return m.CallType
	}
	return CallTypeInvalid
}

func (m *VCallResult) GetCallFlags() CallFlags {
	if m != nil {
		return m.CallFlags
	}
	return 0
}

func (m *VCallResult) GetCallAsOf() PulseNumber {
	if m != nil {
		return m.CallAsOf
	}
	return 0
}

func (m *VCallResult) GetCaller() Reference {
	if m != nil {
		return m.Caller
	}
	return Reference{}
}

func (m *VCallResult) GetCallee() Reference {
	if m != nil {
		return m.Callee
	}
	return Reference{}
}

func (m *VCallResult) GetResultFlags() uint32 {
	if m != nil {
		return m.ResultFlags
	}
	return 0
}

func (m *VCallResult) GetCallOutgoing() Reference {
	if m != nil {
		return m.CallOutgoing
	}
	return Reference{}
}

func (m *VCallResult) GetCallIncoming() Reference {
	if m != nil {
		return m.CallIncoming
	}
	return Reference{}
}

func (m *VCallResult) GetDelegationSpec() CallDelegationToken {
	if m != nil {
		return m.DelegationSpec
	}
	return CallDelegationToken{}
}

func (m *VCallResult) GetCallIncomingResult() Reference {
	if m != nil {
		return m.CallIncomingResult
	}
	return Reference{}
}

func (m *VCallResult) GetProducerSignature() Binary {
	if m != nil {
		return m.ProducerSignature
	}
	return Binary{}
}

func (m *VCallResult) GetRegistrarSignature() Binary {
	if m != nil {
		return m.RegistrarSignature
	}
	return Binary{}
}

func (m *VCallResult) GetRegistrarDelegationSpec() CallDelegationToken {
	if m != nil {
		return m.RegistrarDelegationSpec
	}
	return CallDelegationToken{}
}

func (m *VCallResult) GetSecurityContext() Binary {
	if m != nil {
		return m.SecurityContext
	}
	return Binary{}
}

func (m *VCallResult) GetReturnArguments() Binary {
	if m != nil {
		return m.ReturnArguments
	}
	return Binary{}
}

type VStateRequest struct {
	AsOf                  PulseNumber              `protobuf:"varint,20,opt,name=AsOf,proto3,casttype=PulseNumber" json:"AsOf"`
	Object                Reference                `protobuf:"bytes,21,opt,name=Object,proto3" json:"Object"`
	RequestedContent      StateRequestContentFlags `protobuf:"varint,22,opt,name=RequestedContent,proto3,casttype=StateRequestContentFlags" json:"RequestedContent"`
	RequestedContentLimit Binary                   `protobuf:"bytes,23,opt,name=RequestedContentLimit,proto3" json:"RequestedContentLimit"`
	DelegationSpec        CallDelegationToken      `protobuf:"bytes,25,opt,name=DelegationSpec,proto3" json:"DelegationSpec"`
	ProducerSignature     Binary                   `protobuf:"bytes,27,opt,name=ProducerSignature,proto3" json:"ProducerSignature"`
	CallRequestFlags      int32                    `protobuf:"varint,28,opt,name=CallRequestFlags,proto3" json:"CallRequestFlags"`
}

func (m *VStateRequest) Reset()         { *m = VStateRequest{} }
func (m *VStateRequest) String() string { return proto.CompactTextString(m) }
func (*VStateRequest) ProtoMessage()    {}
func (*VStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{5}
}
func (m *VStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VStateRequest.Merge(m, src)
}
func (m *VStateRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VStateRequest proto.InternalMessageInfo

func (m *VStateRequest) GetAsOf() PulseNumber {
	if m != nil {
		return m.AsOf
	}
	return 0
}

func (m *VStateRequest) GetObject() Reference {
	if m != nil {
		return m.Object
	}
	return Reference{}
}

func (m *VStateRequest) GetRequestedContent() StateRequestContentFlags {
	if m != nil {
		return m.RequestedContent
	}
	return 0
}

func (m *VStateRequest) GetRequestedContentLimit() Binary {
	if m != nil {
		return m.RequestedContentLimit
	}
	return Binary{}
}

func (m *VStateRequest) GetDelegationSpec() CallDelegationToken {
	if m != nil {
		return m.DelegationSpec
	}
	return CallDelegationToken{}
}

func (m *VStateRequest) GetProducerSignature() Binary {
	if m != nil {
		return m.ProducerSignature
	}
	return Binary{}
}

func (m *VStateRequest) GetCallRequestFlags() int32 {
	if m != nil {
		return m.CallRequestFlags
	}
	return 0
}

type VStateReport struct {
	Status                        VStateReport_StateStatus          `protobuf:"varint,37,opt,name=Status,proto3,enum=rms.VStateReport_StateStatus" json:"Status"`
	AsOf                          PulseNumber                       `protobuf:"varint,20,opt,name=AsOf,proto3,casttype=PulseNumber" json:"AsOf"`
	Object                        Reference                         `protobuf:"bytes,21,opt,name=Object,proto3" json:"Object"`
	DelegationSpec                CallDelegationToken               `protobuf:"bytes,23,opt,name=DelegationSpec,proto3" json:"DelegationSpec"`
	UnorderedPendingCount         int32                             `protobuf:"varint,25,opt,name=UnorderedPendingCount,proto3" json:"UnorderedPendingCount"`
	UnorderedPendingEarliestPulse PulseNumber                       `protobuf:"varint,26,opt,name=UnorderedPendingEarliestPulse,proto3,casttype=PulseNumber" json:"UnorderedPendingEarliestPulse"`
	OrderedPendingCount           int32                             `protobuf:"varint,27,opt,name=OrderedPendingCount,proto3" json:"OrderedPendingCount"`
	OrderedPendingEarliestPulse   PulseNumber                       `protobuf:"varint,28,opt,name=OrderedPendingEarliestPulse,proto3,casttype=PulseNumber" json:"OrderedPendingEarliestPulse"`
	PreRegisteredQueueCount       int32                             `protobuf:"varint,29,opt,name=PreRegisteredQueueCount,proto3" json:"PreRegisteredQueueCount"`
	PreRegisteredEarliestPulse    PulseNumber                       `protobuf:"varint,30,opt,name=PreRegisteredEarliestPulse,proto3,casttype=PulseNumber" json:"PreRegisteredEarliestPulse"`
	PriorityCallQueueCount        int32                             `protobuf:"varint,31,opt,name=PriorityCallQueueCount,proto3" json:"PriorityCallQueueCount"`
	LatestValidatedState          Reference                         `protobuf:"bytes,32,opt,name=LatestValidatedState,proto3" json:"LatestValidatedState"`
	LatestValidatedCode           Reference                         `protobuf:"bytes,33,opt,name=LatestValidatedCode,proto3" json:"LatestValidatedCode"`
	LatestDirtyState              Reference                         `protobuf:"bytes,34,opt,name=LatestDirtyState,proto3" json:"LatestDirtyState"`
	LatestDirtyCode               Reference                         `protobuf:"bytes,35,opt,name=LatestDirtyCode,proto3" json:"LatestDirtyCode"`
	ProvidedContent               *VStateReport_ProvidedContentBody `protobuf:"bytes,36,opt,name=ProvidedContent,proto3" json:"ProvidedContent,omitempty"`
}

func (m *VStateReport) Reset()         { *m = VStateReport{} }
func (m *VStateReport) String() string { return proto.CompactTextString(m) }
func (*VStateReport) ProtoMessage()    {}
func (*VStateReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{6}
}
func (m *VStateReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VStateReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VStateReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VStateReport.Merge(m, src)
}
func (m *VStateReport) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VStateReport) XXX_DiscardUnknown() {
	xxx_messageInfo_VStateReport.DiscardUnknown(m)
}

var xxx_messageInfo_VStateReport proto.InternalMessageInfo

func (m *VStateReport) GetStatus() VStateReport_StateStatus {
	if m != nil {
		return m.Status
	}
	return StateStatusInvalid
}

func (m *VStateReport) GetAsOf() PulseNumber {
	if m != nil {
		return m.AsOf
	}
	return 0
}

func (m *VStateReport) GetObject() Reference {
	if m != nil {
		return m.Object
	}
	return Reference{}
}

func (m *VStateReport) GetDelegationSpec() CallDelegationToken {
	if m != nil {
		return m.DelegationSpec
	}
	return CallDelegationToken{}
}

func (m *VStateReport) GetUnorderedPendingCount() int32 {
	if m != nil {
		return m.UnorderedPendingCount
	}
	return 0
}

func (m *VStateReport) GetUnorderedPendingEarliestPulse() PulseNumber {
	if m != nil {
		return m.UnorderedPendingEarliestPulse
	}
	return 0
}

func (m *VStateReport) GetOrderedPendingCount() int32 {
	if m != nil {
		return m.OrderedPendingCount
	}
	return 0
}

func (m *VStateReport) GetOrderedPendingEarliestPulse() PulseNumber {
	if m != nil {
		return m.OrderedPendingEarliestPulse
	}
	return 0
}

func (m *VStateReport) GetPreRegisteredQueueCount() int32 {
	if m != nil {
		return m.PreRegisteredQueueCount
	}
	return 0
}

func (m *VStateReport) GetPreRegisteredEarliestPulse() PulseNumber {
	if m != nil {
		return m.PreRegisteredEarliestPulse
	}
	return 0
}

func (m *VStateReport) GetPriorityCallQueueCount() int32 {
	if m != nil {
		return m.PriorityCallQueueCount
	}
	return 0
}

func (m *VStateReport) GetLatestValidatedState() Reference {
	if m != nil {
		return m.LatestValidatedState
	}
	return Reference{}
}

func (m *VStateReport) GetLatestValidatedCode() Reference {
	if m != nil {
		return m.LatestValidatedCode
	}
	return Reference{}
}

func (m *VStateReport) GetLatestDirtyState() Reference {
	if m != nil {
		return m.LatestDirtyState
	}
	return Reference{}
}

func (m *VStateReport) GetLatestDirtyCode() Reference {
	if m != nil {
		return m.LatestDirtyCode
	}
	return Reference{}
}

func (m *VStateReport) GetProvidedContent() *VStateReport_ProvidedContentBody {
	if m != nil {
		return m.ProvidedContent
	}
	return nil
}

type VStateReport_ProvidedContentBody struct {
	LatestValidatedState *ObjectState `protobuf:"bytes,21,opt,name=LatestValidatedState,proto3" json:"LatestValidatedState,omitempty"`
	LatestDirtyState     *ObjectState `protobuf:"bytes,22,opt,name=LatestDirtyState,proto3" json:"LatestDirtyState,omitempty"`
	LatestValidatedCode  *ObjectState `protobuf:"bytes,23,opt,name=LatestValidatedCode,proto3" json:"LatestValidatedCode,omitempty"`
	LatestDirtyCode      *ObjectState `protobuf:"bytes,24,opt,name=LatestDirtyCode,proto3" json:"LatestDirtyCode,omitempty"`
	OrderedQueue         []Reference  `protobuf:"bytes,25,rep,name=OrderedQueue,proto3" json:"OrderedQueue"`
	UnorderedQueue       []Reference  `protobuf:"bytes,26,rep,name=UnorderedQueue,proto3" json:"UnorderedQueue"`
}

func (m *VStateReport_ProvidedContentBody) Reset()         { *m = VStateReport_ProvidedContentBody{} }
func (m *VStateReport_ProvidedContentBody) String() string { return proto.CompactTextString(m) }
func (*VStateReport_ProvidedContentBody) ProtoMessage()    {}
func (*VStateReport_ProvidedContentBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{6, 0}
}
func (m *VStateReport_ProvidedContentBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VStateReport_ProvidedContentBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VStateReport_ProvidedContentBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VStateReport_ProvidedContentBody.Merge(m, src)
}
func (m *VStateReport_ProvidedContentBody) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VStateReport_ProvidedContentBody) XXX_DiscardUnknown() {
	xxx_messageInfo_VStateReport_ProvidedContentBody.DiscardUnknown(m)
}

var xxx_messageInfo_VStateReport_ProvidedContentBody proto.InternalMessageInfo

func (m *VStateReport_ProvidedContentBody) GetLatestValidatedState() *ObjectState {
	if m != nil {
		return m.LatestValidatedState
	}
	return nil
}

func (m *VStateReport_ProvidedContentBody) GetLatestDirtyState() *ObjectState {
	if m != nil {
		return m.LatestDirtyState
	}
	return nil
}

func (m *VStateReport_ProvidedContentBody) GetLatestValidatedCode() *ObjectState {
	if m != nil {
		return m.LatestValidatedCode
	}
	return nil
}

func (m *VStateReport_ProvidedContentBody) GetLatestDirtyCode() *ObjectState {
	if m != nil {
		return m.LatestDirtyCode
	}
	return nil
}

func (m *VStateReport_ProvidedContentBody) GetOrderedQueue() []Reference {
	if m != nil {
		return m.OrderedQueue
	}
	return nil
}

func (m *VStateReport_ProvidedContentBody) GetUnorderedQueue() []Reference {
	if m != nil {
		return m.UnorderedQueue
	}
	return nil
}

type ObjectState struct {
	Reference   Reference `protobuf:"bytes,20,opt,name=Reference,proto3" json:"Reference"`
	Class       Reference `protobuf:"bytes,22,opt,name=Class,proto3" json:"Class"`
	State       Binary    `protobuf:"bytes,23,opt,name=State,proto3" json:"State"`
	Deactivated bool      `protobuf:"varint,25,opt,name=Deactivated,proto3" json:"Deactivated"`
}

func (m *ObjectState) Reset()         { *m = ObjectState{} }
func (m *ObjectState) String() string { return proto.CompactTextString(m) }
func (*ObjectState) ProtoMessage()    {}
func (*ObjectState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{7}
}
func (m *ObjectState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ObjectState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectState.Merge(m, src)
}
func (m *ObjectState) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ObjectState) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectState.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectState proto.InternalMessageInfo

func (m *ObjectState) GetReference() Reference {
	if m != nil {
		return m.Reference
	}
	return Reference{}
}

func (m *ObjectState) GetClass() Reference {
	if m != nil {
		return m.Class
	}
	return Reference{}
}

func (m *ObjectState) GetState() Binary {
	if m != nil {
		return m.State
	}
	return Binary{}
}

func (m *ObjectState) GetDeactivated() bool {
	if m != nil {
		return m.Deactivated
	}
	return false
}

type VDelegatedRequestFinished struct {
	CallType       CallType            `protobuf:"varint,20,opt,name=CallType,proto3,enum=rms.CallType" json:"CallType"`
	CallFlags      CallFlags           `protobuf:"varint,21,opt,name=CallFlags,proto3,casttype=CallFlags" json:"CallFlags"`
	Callee         Reference           `protobuf:"bytes,22,opt,name=Callee,proto3" json:"Callee"`
	ResultFlags    uint32              `protobuf:"varint,23,opt,name=ResultFlags,proto3" json:"ResultFlags"`
	CallOutgoing   Reference           `protobuf:"bytes,24,opt,name=CallOutgoing,proto3" json:"CallOutgoing"`
	CallIncoming   Reference           `protobuf:"bytes,25,opt,name=CallIncoming,proto3" json:"CallIncoming"`
	DelegationSpec CallDelegationToken `protobuf:"bytes,26,opt,name=DelegationSpec,proto3" json:"DelegationSpec"`
	LatestState    *ObjectState        `protobuf:"bytes,29,opt,name=LatestState,proto3" json:"LatestState,omitempty"`
}

func (m *VDelegatedRequestFinished) Reset()         { *m = VDelegatedRequestFinished{} }
func (m *VDelegatedRequestFinished) String() string { return proto.CompactTextString(m) }
func (*VDelegatedRequestFinished) ProtoMessage()    {}
func (*VDelegatedRequestFinished) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{8}
}
func (m *VDelegatedRequestFinished) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VDelegatedRequestFinished) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VDelegatedRequestFinished) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VDelegatedRequestFinished.Merge(m, src)
}
func (m *VDelegatedRequestFinished) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VDelegatedRequestFinished) XXX_DiscardUnknown() {
	xxx_messageInfo_VDelegatedRequestFinished.DiscardUnknown(m)
}

var xxx_messageInfo_VDelegatedRequestFinished proto.InternalMessageInfo

func (m *VDelegatedRequestFinished) GetCallType() CallType {
	if m != nil {
		return m.CallType
	}
	return CallTypeInvalid
}

func (m *VDelegatedRequestFinished) GetCallFlags() CallFlags {
	if m != nil {
		return m.CallFlags
	}
	return 0
}

func (m *VDelegatedRequestFinished) GetCallee() Reference {
	if m != nil {
		return m.Callee
	}
	return Reference{}
}

func (m *VDelegatedRequestFinished) GetResultFlags() uint32 {
	if m != nil {
		return m.ResultFlags
	}
	return 0
}

func (m *VDelegatedRequestFinished) GetCallOutgoing() Reference {
	if m != nil {
		return m.CallOutgoing
	}
	return Reference{}
}

func (m *VDelegatedRequestFinished) GetCallIncoming() Reference {
	if m != nil {
		return m.CallIncoming
	}
	return Reference{}
}

func (m *VDelegatedRequestFinished) GetDelegationSpec() CallDelegationToken {
	if m != nil {
		return m.DelegationSpec
	}
	return CallDelegationToken{}
}

func (m *VDelegatedRequestFinished) GetLatestState() *ObjectState {
	if m != nil {
		return m.LatestState
	}
	return nil
}

type VDelegatedCallRequest struct {
	Callee         Reference           `protobuf:"bytes,20,opt,name=Callee,proto3" json:"Callee"`
	CallFlags      CallFlags           `protobuf:"varint,21,opt,name=CallFlags,proto3,casttype=CallFlags" json:"CallFlags"`
	CallOutgoing   Reference           `protobuf:"bytes,22,opt,name=CallOutgoing,proto3" json:"CallOutgoing"`
	CallIncoming   Reference           `protobuf:"bytes,24,opt,name=CallIncoming,proto3" json:"CallIncoming"`
	DelegationSpec CallDelegationToken `protobuf:"bytes,25,opt,name=DelegationSpec,proto3" json:"DelegationSpec"`
}

func (m *VDelegatedCallRequest) Reset()         { *m = VDelegatedCallRequest{} }
func (m *VDelegatedCallRequest) String() string { return proto.CompactTextString(m) }
func (*VDelegatedCallRequest) ProtoMessage()    {}
func (*VDelegatedCallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{9}
}
func (m *VDelegatedCallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VDelegatedCallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VDelegatedCallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VDelegatedCallRequest.Merge(m, src)
}
func (m *VDelegatedCallRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VDelegatedCallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VDelegatedCallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VDelegatedCallRequest proto.InternalMessageInfo

func (m *VDelegatedCallRequest) GetCallee() Reference {
	if m != nil {
		return m.Callee
	}
	return Reference{}
}

func (m *VDelegatedCallRequest) GetCallFlags() CallFlags {
	if m != nil {
		return m.CallFlags
	}
	return 0
}

func (m *VDelegatedCallRequest) GetCallOutgoing() Reference {
	if m != nil {
		return m.CallOutgoing
	}
	return Reference{}
}

func (m *VDelegatedCallRequest) GetCallIncoming() Reference {
	if m != nil {
		return m.CallIncoming
	}
	return Reference{}
}

func (m *VDelegatedCallRequest) GetDelegationSpec() CallDelegationToken {
	if m != nil {
		return m.DelegationSpec
	}
	return CallDelegationToken{}
}

type VDelegatedCallResponse struct {
	Callee                 Reference           `protobuf:"bytes,20,opt,name=Callee,proto3" json:"Callee"`
	CallIncoming           Reference           `protobuf:"bytes,21,opt,name=CallIncoming,proto3" json:"CallIncoming"`
	ResponseDelegationSpec CallDelegationToken `protobuf:"bytes,22,opt,name=ResponseDelegationSpec,proto3" json:"ResponseDelegationSpec"`
}

func (m *VDelegatedCallResponse) Reset()         { *m = VDelegatedCallResponse{} }
func (m *VDelegatedCallResponse) String() string { return proto.CompactTextString(m) }
func (*VDelegatedCallResponse) ProtoMessage()    {}
func (*VDelegatedCallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{10}
}
func (m *VDelegatedCallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VDelegatedCallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VDelegatedCallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VDelegatedCallResponse.Merge(m, src)
}
func (m *VDelegatedCallResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VDelegatedCallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VDelegatedCallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VDelegatedCallResponse proto.InternalMessageInfo

func (m *VDelegatedCallResponse) GetCallee() Reference {
	if m != nil {
		return m.Callee
	}
	return Reference{}
}

func (m *VDelegatedCallResponse) GetCallIncoming() Reference {
	if m != nil {
		return m.CallIncoming
	}
	return Reference{}
}

func (m *VDelegatedCallResponse) GetResponseDelegationSpec() CallDelegationToken {
	if m != nil {
		return m.ResponseDelegationSpec
	}
	return CallDelegationToken{}
}

type VFindCallRequest struct {
	LookAt   PulseNumber `protobuf:"varint,20,opt,name=LookAt,proto3,casttype=PulseNumber" json:"LookAt"`
	Callee   Reference   `protobuf:"bytes,21,opt,name=Callee,proto3" json:"Callee"`
	Outgoing Reference   `protobuf:"bytes,22,opt,name=Outgoing,proto3" json:"Outgoing"`
}

func (m *VFindCallRequest) Reset()         { *m = VFindCallRequest{} }
func (m *VFindCallRequest) String() string { return proto.CompactTextString(m) }
func (*VFindCallRequest) ProtoMessage()    {}
func (*VFindCallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{11}
}
func (m *VFindCallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VFindCallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VFindCallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VFindCallRequest.Merge(m, src)
}
func (m *VFindCallRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VFindCallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VFindCallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VFindCallRequest proto.InternalMessageInfo

func (m *VFindCallRequest) GetLookAt() PulseNumber {
	if m != nil {
		return m.LookAt
	}
	return 0
}

func (m *VFindCallRequest) GetCallee() Reference {
	if m != nil {
		return m.Callee
	}
	return Reference{}
}

func (m *VFindCallRequest) GetOutgoing() Reference {
	if m != nil {
		return m.Outgoing
	}
	return Reference{}
}

type VFindCallResponse struct {
	LookedAt   PulseNumber                 `protobuf:"varint,20,opt,name=LookedAt,proto3,casttype=PulseNumber" json:"LookedAt"`
	Callee     Reference                   `protobuf:"bytes,21,opt,name=Callee,proto3" json:"Callee"`
	Outgoing   Reference                   `protobuf:"bytes,22,opt,name=Outgoing,proto3" json:"Outgoing"`
	Status     VFindCallResponse_CallState `protobuf:"varint,23,opt,name=Status,proto3,enum=rms.VFindCallResponse_CallState" json:"Status"`
	CallResult *VCallResult                `protobuf:"bytes,24,opt,name=CallResult,proto3" json:"CallResult,omitempty"`
}

func (m *VFindCallResponse) Reset()         { *m = VFindCallResponse{} }
func (m *VFindCallResponse) String() string { return proto.CompactTextString(m) }
func (*VFindCallResponse) ProtoMessage()    {}
func (*VFindCallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{12}
}
func (m *VFindCallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VFindCallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VFindCallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VFindCallResponse.Merge(m, src)
}
func (m *VFindCallResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VFindCallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VFindCallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VFindCallResponse proto.InternalMessageInfo

func (m *VFindCallResponse) GetLookedAt() PulseNumber {
	if m != nil {
		return m.LookedAt
	}
	return 0
}

func (m *VFindCallResponse) GetCallee() Reference {
	if m != nil {
		return m.Callee
	}
	return Reference{}
}

func (m *VFindCallResponse) GetOutgoing() Reference {
	if m != nil {
		return m.Outgoing
	}
	return Reference{}
}

func (m *VFindCallResponse) GetStatus() VFindCallResponse_CallState {
	if m != nil {
		return m.Status
	}
	return CallStateInvalid
}

func (m *VFindCallResponse) GetCallResult() *VCallResult {
	if m != nil {
		return m.CallResult
	}
	return nil
}

type VCachedMemoryRequest struct {
	Object  Reference `protobuf:"bytes,21,opt,name=Object,proto3" json:"Object"`
	StateID Reference `protobuf:"bytes,50,opt,name=StateID,proto3" json:"StateID"`
}

func (m *VCachedMemoryRequest) Reset()         { *m = VCachedMemoryRequest{} }
func (m *VCachedMemoryRequest) String() string { return proto.CompactTextString(m) }
func (*VCachedMemoryRequest) ProtoMessage()    {}
func (*VCachedMemoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{13}
}
func (m *VCachedMemoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VCachedMemoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VCachedMemoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VCachedMemoryRequest.Merge(m, src)
}
func (m *VCachedMemoryRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VCachedMemoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VCachedMemoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VCachedMemoryRequest proto.InternalMessageInfo

func (m *VCachedMemoryRequest) GetObject() Reference {
	if m != nil {
		return m.Object
	}
	return Reference{}
}

func (m *VCachedMemoryRequest) GetStateID() Reference {
	if m != nil {
		return m.StateID
	}
	return Reference{}
}

type VCachedMemoryResponse struct {
	Object      Reference                    `protobuf:"bytes,21,opt,name=Object,proto3" json:"Object"`
	StateID     Reference                    `protobuf:"bytes,50,opt,name=StateID,proto3" json:"StateID"`
	CallStatus  VCachedMemoryResponse_Status `protobuf:"varint,51,opt,name=CallStatus,proto3,enum=rms.VCachedMemoryResponse_Status" json:"CallStatus"`
	Node        Reference                    `protobuf:"bytes,52,opt,name=Node,proto3" json:"Node"`
	PrevStateID Reference                    `protobuf:"bytes,53,opt,name=PrevStateID,proto3" json:"PrevStateID"`
	Inactive    bool                         `protobuf:"varint,25,opt,name=Inactive,proto3" json:"Inactive"`
	Memory      Binary                       `protobuf:"bytes,54,opt,name=Memory,proto3" json:"Memory"`
}

func (m *VCachedMemoryResponse) Reset()         { *m = VCachedMemoryResponse{} }
func (m *VCachedMemoryResponse) String() string { return proto.CompactTextString(m) }
func (*VCachedMemoryResponse) ProtoMessage()    {}
func (*VCachedMemoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{14}
}
func (m *VCachedMemoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VCachedMemoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VCachedMemoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VCachedMemoryResponse.Merge(m, src)
}
func (m *VCachedMemoryResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VCachedMemoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VCachedMemoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VCachedMemoryResponse proto.InternalMessageInfo

func (m *VCachedMemoryResponse) GetObject() Reference {
	if m != nil {
		return m.Object
	}
	return Reference{}
}

func (m *VCachedMemoryResponse) GetStateID() Reference {
	if m != nil {
		return m.StateID
	}
	return Reference{}
}

func (m *VCachedMemoryResponse) GetCallStatus() VCachedMemoryResponse_Status {
	if m != nil {
		return m.CallStatus
	}
	return CachedMemoryStateUnknown
}

func (m *VCachedMemoryResponse) GetNode() Reference {
	if m != nil {
		return m.Node
	}
	return Reference{}
}

func (m *VCachedMemoryResponse) GetPrevStateID() Reference {
	if m != nil {
		return m.PrevStateID
	}
	return Reference{}
}

func (m *VCachedMemoryResponse) GetInactive() bool {
	if m != nil {
		return m.Inactive
	}
	return false
}

func (m *VCachedMemoryResponse) GetMemory() Binary {
	if m != nil {
		return m.Memory
	}
	return Binary{}
}

type VObjectTranscriptReport struct {
	// FIXME: this is here just to make generator silent
	Any                `protobuf:"bytes,19,opt,name=Record,proto3,embedded=Record" json:"Record"`
	AsOf               PulseNumber                          `protobuf:"varint,1800,opt,name=AsOf,proto3,casttype=PulseNumber" json:"AsOf"`
	Object             Reference                            `protobuf:"bytes,1801,opt,name=Object,proto3" json:"Object"`
	PendingTranscripts []VObjectTranscriptReport_Transcript `protobuf:"bytes,1803,rep,name=PendingTranscripts,proto3" json:"PendingTranscripts"`
	ObjectTranscript   VObjectTranscriptReport_Transcript   `protobuf:"bytes,1804,opt,name=ObjectTranscript,proto3" json:"ObjectTranscript"`
}

func (m *VObjectTranscriptReport) Reset()         { *m = VObjectTranscriptReport{} }
func (m *VObjectTranscriptReport) String() string { return proto.CompactTextString(m) }
func (*VObjectTranscriptReport) ProtoMessage()    {}
func (*VObjectTranscriptReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{15}
}
func (m *VObjectTranscriptReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VObjectTranscriptReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VObjectTranscriptReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VObjectTranscriptReport.Merge(m, src)
}
func (m *VObjectTranscriptReport) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VObjectTranscriptReport) XXX_DiscardUnknown() {
	xxx_messageInfo_VObjectTranscriptReport.DiscardUnknown(m)
}

var xxx_messageInfo_VObjectTranscriptReport proto.InternalMessageInfo

func (m *VObjectTranscriptReport) GetAsOf() PulseNumber {
	if m != nil {
		return m.AsOf
	}
	return 0
}

func (m *VObjectTranscriptReport) GetObject() Reference {
	if m != nil {
		return m.Object
	}
	return Reference{}
}

func (m *VObjectTranscriptReport) GetPendingTranscripts() []VObjectTranscriptReport_Transcript {
	if m != nil {
		return m.PendingTranscripts
	}
	return nil
}

func (m *VObjectTranscriptReport) GetObjectTranscript() VObjectTranscriptReport_Transcript {
	if m != nil {
		return m.ObjectTranscript
	}
	return VObjectTranscriptReport_Transcript{}
}

type VObjectTranscriptReport_TranscriptEntryIncomingRequest struct {
	ObjectMemory Reference `protobuf:"bytes,1800,opt,name=ObjectMemory,proto3" json:"ObjectMemory"`
	Incoming     Reference `protobuf:"bytes,1801,opt,name=Incoming,proto3" json:"Incoming"`
	Request      []byte    `protobuf:"bytes,1802,opt,name=Request,proto3" json:"Request"`
}

func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) Reset() {
	*m = VObjectTranscriptReport_TranscriptEntryIncomingRequest{}
}
func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) String() string {
	return proto.CompactTextString(m)
}
func (*VObjectTranscriptReport_TranscriptEntryIncomingRequest) ProtoMessage() {}
func (*VObjectTranscriptReport_TranscriptEntryIncomingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{15, 0}
}
func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VObjectTranscriptReport_TranscriptEntryIncomingRequest.Merge(m, src)
}
func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VObjectTranscriptReport_TranscriptEntryIncomingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VObjectTranscriptReport_TranscriptEntryIncomingRequest proto.InternalMessageInfo

func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) GetObjectMemory() Reference {
	if m != nil {
		return m.ObjectMemory
	}
	return Reference{}
}

func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) GetIncoming() Reference {
	if m != nil {
		return m.Incoming
	}
	return Reference{}
}

func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) GetRequest() []byte {
	if m != nil {
		return m.Request
	}
	return nil
}

type VObjectTranscriptReport_TranscriptEntryOutgoingRequest struct {
	Outgoing Reference `protobuf:"bytes,1800,opt,name=Outgoing,proto3" json:"Outgoing"`
}

func (m *VObjectTranscriptReport_TranscriptEntryOutgoingRequest) Reset() {
	*m = VObjectTranscriptReport_TranscriptEntryOutgoingRequest{}
}
func (m *VObjectTranscriptReport_TranscriptEntryOutgoingRequest) String() string {
	return proto.CompactTextString(m)
}
func (*VObjectTranscriptReport_TranscriptEntryOutgoingRequest) ProtoMessage() {}
func (*VObjectTranscriptReport_TranscriptEntryOutgoingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{15, 1}
}
func (m *VObjectTranscriptReport_TranscriptEntryOutgoingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VObjectTranscriptReport_TranscriptEntryOutgoingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VObjectTranscriptReport_TranscriptEntryOutgoingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VObjectTranscriptReport_TranscriptEntryOutgoingRequest.Merge(m, src)
}
func (m *VObjectTranscriptReport_TranscriptEntryOutgoingRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VObjectTranscriptReport_TranscriptEntryOutgoingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VObjectTranscriptReport_TranscriptEntryOutgoingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VObjectTranscriptReport_TranscriptEntryOutgoingRequest proto.InternalMessageInfo

func (m *VObjectTranscriptReport_TranscriptEntryOutgoingRequest) GetOutgoing() Reference {
	if m != nil {
		return m.Outgoing
	}
	return Reference{}
}

type VObjectTranscriptReport_TranscriptEntryOutgoingResult struct {
	OutgoingResult Reference `protobuf:"bytes,1800,opt,name=OutgoingResult,proto3" json:"OutgoingResult"`
	CallResult     []byte    `protobuf:"bytes,1801,opt,name=CallResult,proto3" json:"CallResult"`
}

func (m *VObjectTranscriptReport_TranscriptEntryOutgoingResult) Reset() {
	*m = VObjectTranscriptReport_TranscriptEntryOutgoingResult{}
}
func (m *VObjectTranscriptReport_TranscriptEntryOutgoingResult) String() string {
	return proto.CompactTextString(m)
}
func (*VObjectTranscriptReport_TranscriptEntryOutgoingResult) ProtoMessage() {}
func (*VObjectTranscriptReport_TranscriptEntryOutgoingResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{15, 2}
}
func (m *VObjectTranscriptReport_TranscriptEntryOutgoingResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VObjectTranscriptReport_TranscriptEntryOutgoingResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VObjectTranscriptReport_TranscriptEntryOutgoingResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VObjectTranscriptReport_TranscriptEntryOutgoingResult.Merge(m, src)
}
func (m *VObjectTranscriptReport_TranscriptEntryOutgoingResult) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VObjectTranscriptReport_TranscriptEntryOutgoingResult) XXX_DiscardUnknown() {
	xxx_messageInfo_VObjectTranscriptReport_TranscriptEntryOutgoingResult.DiscardUnknown(m)
}

var xxx_messageInfo_VObjectTranscriptReport_TranscriptEntryOutgoingResult proto.InternalMessageInfo

func (m *VObjectTranscriptReport_TranscriptEntryOutgoingResult) GetOutgoingResult() Reference {
	if m != nil {
		return m.OutgoingResult
	}
	return Reference{}
}

func (m *VObjectTranscriptReport_TranscriptEntryOutgoingResult) GetCallResult() []byte {
	if m != nil {
		return m.CallResult
	}
	return nil
}

type VObjectTranscriptReport_TranscriptEntryIncomingResult struct {
	IncomingResult Reference `protobuf:"bytes,1800,opt,name=IncomingResult,proto3" json:"IncomingResult"`
	ObjectState    Reference `protobuf:"bytes,1801,opt,name=ObjectState,proto3" json:"ObjectState"`
}

func (m *VObjectTranscriptReport_TranscriptEntryIncomingResult) Reset() {
	*m = VObjectTranscriptReport_TranscriptEntryIncomingResult{}
}
func (m *VObjectTranscriptReport_TranscriptEntryIncomingResult) String() string {
	return proto.CompactTextString(m)
}
func (*VObjectTranscriptReport_TranscriptEntryIncomingResult) ProtoMessage() {}
func (*VObjectTranscriptReport_TranscriptEntryIncomingResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{15, 3}
}
func (m *VObjectTranscriptReport_TranscriptEntryIncomingResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VObjectTranscriptReport_TranscriptEntryIncomingResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VObjectTranscriptReport_TranscriptEntryIncomingResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VObjectTranscriptReport_TranscriptEntryIncomingResult.Merge(m, src)
}
func (m *VObjectTranscriptReport_TranscriptEntryIncomingResult) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VObjectTranscriptReport_TranscriptEntryIncomingResult) XXX_DiscardUnknown() {
	xxx_messageInfo_VObjectTranscriptReport_TranscriptEntryIncomingResult.DiscardUnknown(m)
}

var xxx_messageInfo_VObjectTranscriptReport_TranscriptEntryIncomingResult proto.InternalMessageInfo

func (m *VObjectTranscriptReport_TranscriptEntryIncomingResult) GetIncomingResult() Reference {
	if m != nil {
		return m.IncomingResult
	}
	return Reference{}
}

func (m *VObjectTranscriptReport_TranscriptEntryIncomingResult) GetObjectState() Reference {
	if m != nil {
		return m.ObjectState
	}
	return Reference{}
}

type VObjectTranscriptReport_Transcript struct {
	// stub
	Entries []Any `protobuf:"bytes,1800,rep,name=Entries,proto3" json:"Entries"`
}

func (m *VObjectTranscriptReport_Transcript) Reset()         { *m = VObjectTranscriptReport_Transcript{} }
func (m *VObjectTranscriptReport_Transcript) String() string { return proto.CompactTextString(m) }
func (*VObjectTranscriptReport_Transcript) ProtoMessage()    {}
func (*VObjectTranscriptReport_Transcript) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{15, 4}
}
func (m *VObjectTranscriptReport_Transcript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VObjectTranscriptReport_Transcript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VObjectTranscriptReport_Transcript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VObjectTranscriptReport_Transcript.Merge(m, src)
}
func (m *VObjectTranscriptReport_Transcript) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VObjectTranscriptReport_Transcript) XXX_DiscardUnknown() {
	xxx_messageInfo_VObjectTranscriptReport_Transcript.DiscardUnknown(m)
}

var xxx_messageInfo_VObjectTranscriptReport_Transcript proto.InternalMessageInfo

func (m *VObjectTranscriptReport_Transcript) GetEntries() []Any {
	if m != nil {
		return m.Entries
	}
	return nil
}

type VObjectValidationReport struct {
	Object    Reference   `protobuf:"bytes,21,opt,name=Object,proto3" json:"Object"`
	In        PulseNumber `protobuf:"varint,55,opt,name=In,proto3,casttype=PulseNumber" json:"In"`
	Validated Reference   `protobuf:"bytes,50,opt,name=Validated,proto3" json:"Validated"`
}

func (m *VObjectValidationReport) Reset()         { *m = VObjectValidationReport{} }
func (m *VObjectValidationReport) String() string { return proto.CompactTextString(m) }
func (*VObjectValidationReport) ProtoMessage()    {}
func (*VObjectValidationReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc353dc03c844eae, []int{16}
}
func (m *VObjectValidationReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VObjectValidationReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VObjectValidationReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VObjectValidationReport.Merge(m, src)
}
func (m *VObjectValidationReport) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VObjectValidationReport) XXX_DiscardUnknown() {
	xxx_messageInfo_VObjectValidationReport.DiscardUnknown(m)
}

var xxx_messageInfo_VObjectValidationReport proto.InternalMessageInfo

func (m *VObjectValidationReport) GetObject() Reference {
	if m != nil {
		return m.Object
	}
	return Reference{}
}

func (m *VObjectValidationReport) GetIn() PulseNumber {
	if m != nil {
		return m.In
	}
	return 0
}

func (m *VObjectValidationReport) GetValidated() Reference {
	if m != nil {
		return m.Validated
	}
	return Reference{}
}

func init() {
	proto.RegisterEnum("rms.VStateReport_StateStatus", VStateReport_StateStatus_name, VStateReport_StateStatus_value)
	proto.RegisterEnum("rms.VFindCallResponse_CallState", VFindCallResponse_CallState_name, VFindCallResponse_CallState_value)
	proto.RegisterEnum("rms.VCachedMemoryResponse_Status", VCachedMemoryResponse_Status_name, VCachedMemoryResponse_Status_value)
	proto.RegisterType((*Meta)(nil), "rms.Meta")
	proto.RegisterType((*MessageExample)(nil), "rms.MessageExample")
	proto.RegisterType((*MessageExample_Head)(nil), "rms.MessageExample.Head")
	proto.RegisterType((*MessageExample2)(nil), "rms.MessageExample2")
	proto.RegisterType((*VCallRequest)(nil), "rms.VCallRequest")
	proto.RegisterType((*VCallResult)(nil), "rms.VCallResult")
	proto.RegisterType((*VStateRequest)(nil), "rms.VStateRequest")
	proto.RegisterType((*VStateReport)(nil), "rms.VStateReport")
	proto.RegisterType((*VStateReport_ProvidedContentBody)(nil), "rms.VStateReport.ProvidedContentBody")
	proto.RegisterType((*ObjectState)(nil), "rms.ObjectState")
	proto.RegisterType((*VDelegatedRequestFinished)(nil), "rms.VDelegatedRequestFinished")
	proto.RegisterType((*VDelegatedCallRequest)(nil), "rms.VDelegatedCallRequest")
	proto.RegisterType((*VDelegatedCallResponse)(nil), "rms.VDelegatedCallResponse")
	proto.RegisterType((*VFindCallRequest)(nil), "rms.VFindCallRequest")
	proto.RegisterType((*VFindCallResponse)(nil), "rms.VFindCallResponse")
	proto.RegisterType((*VCachedMemoryRequest)(nil), "rms.VCachedMemoryRequest")
	proto.RegisterType((*VCachedMemoryResponse)(nil), "rms.VCachedMemoryResponse")
	proto.RegisterType((*VObjectTranscriptReport)(nil), "rms.VObjectTranscriptReport")
	proto.RegisterType((*VObjectTranscriptReport_TranscriptEntryIncomingRequest)(nil), "rms.VObjectTranscriptReport.TranscriptEntryIncomingRequest")
	proto.RegisterType((*VObjectTranscriptReport_TranscriptEntryOutgoingRequest)(nil), "rms.VObjectTranscriptReport.TranscriptEntryOutgoingRequest")
	proto.RegisterType((*VObjectTranscriptReport_TranscriptEntryOutgoingResult)(nil), "rms.VObjectTranscriptReport.TranscriptEntryOutgoingResult")
	proto.RegisterType((*VObjectTranscriptReport_TranscriptEntryIncomingResult)(nil), "rms.VObjectTranscriptReport.TranscriptEntryIncomingResult")
	proto.RegisterType((*VObjectTranscriptReport_Transcript)(nil), "rms.VObjectTranscriptReport.Transcript")
	proto.RegisterType((*VObjectValidationReport)(nil), "rms.VObjectValidationReport")
}

func init() { proto.RegisterFile("proto_vnvn.proto", fileDescriptor_fc353dc03c844eae) }

var fileDescriptor_fc353dc03c844eae = []byte{
	// 2456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5a, 0x5d, 0x6c, 0x1c, 0x57,
	0xf5, 0xdf, 0xf1, 0xda, 0xde, 0xcd, 0xb1, 0xbd, 0xd9, 0x5c, 0x7f, 0x8d, 0x37, 0xf1, 0xee, 0x66,
	0xf2, 0x4f, 0xe2, 0xb4, 0x89, 0x9d, 0x3a, 0xfd, 0xa7, 0xc1, 0x6d, 0x43, 0xbd, 0xb6, 0xd3, 0x38,
	0xc4, 0x8d, 0x59, 0x3b, 0x96, 0xe1, 0x81, 0x6a, 0xb2, 0x73, 0xb3, 0x19, 0xb2, 0x7b, 0xc7, 0xdc,
	0x99, 0x75, 0xb3, 0xf0, 0x00, 0x42, 0x02, 0xa5, 0x81, 0x87, 0x02, 0x12, 0x4a, 0xf2, 0x14, 0x84,
	0x04, 0x11, 0x6f, 0xc0, 0x13, 0x02, 0x41, 0x1f, 0xf3, 0x18, 0xf1, 0xe4, 0x07, 0x14, 0x68, 0x22,
	0xa4, 0x42, 0xab, 0x2a, 0x7c, 0xb4, 0xa0, 0x48, 0x7c, 0x68, 0xee, 0xbd, 0xf3, 0xb1, 0xb3, 0x33,
	0x13, 0xdb, 0x69, 0xfa, 0xc2, 0xd3, 0xce, 0x9c, 0xfb, 0x3b, 0xe7, 0x9e, 0x7b, 0xbe, 0xee, 0x3d,
	0x77, 0x16, 0xb2, 0x6b, 0xd4, 0xb0, 0x8c, 0xd7, 0xd7, 0xc9, 0x3a, 0x19, 0x67, 0x8f, 0x28, 0x49,
	0xeb, 0x66, 0xee, 0x48, 0x55, 0xb7, 0x2e, 0x35, 0x2e, 0x8c, 0x57, 0x8c, 0xfa, 0x44, 0xd5, 0xa8,
	0x1a, 0x13, 0x6c, 0xec, 0x42, 0xe3, 0x22, 0x7b, 0x63, 0x2f, 0xec, 0x89, 0xf3, 0xe4, 0x5e, 0xf1,
	0xc1, 0x75, 0x62, 0x1a, 0x35, 0x95, 0x4e, 0xa8, 0xa6, 0xd9, 0xa0, 0x58, 0x3b, 0x52, 0xc3, 0x5a,
	0x15, 0xd3, 0x09, 0xfe, 0x73, 0xa4, 0x62, 0x50, 0x6c, 0x43, 0xb8, 0x08, 0x9d, 0x98, 0x42, 0xc2,
	0x0e, 0x5a, 0x77, 0x1e, 0xfb, 0xb9, 0x4a, 0x14, 0x57, 0x0c, 0xaa, 0x39, 0x44, 0xc4, 0x89, 0x15,
	0xa3, 0x5e, 0x37, 0x84, 0xa6, 0xca, 0x1f, 0x25, 0xe8, 0x5c, 0xc0, 0x96, 0x8a, 0xc6, 0x20, 0xb5,
	0xa8, 0x36, 0x6b, 0x86, 0xaa, 0xc9, 0x03, 0x45, 0x69, 0xac, 0x67, 0x32, 0x3d, 0x6e, 0x8b, 0x9b,
	0x26, 0xcd, 0x52, 0xe7, 0x9d, 0x7b, 0x85, 0x44, 0xd9, 0x19, 0x46, 0x87, 0xa1, 0x7b, 0x09, 0x13,
	0x0d, 0x53, 0x79, 0x90, 0x01, 0x33, 0x0c, 0x58, 0xc6, 0x17, 0x31, 0xc5, 0xa4, 0x82, 0x05, 0x5c,
	0x60, 0xd0, 0x51, 0x48, 0x97, 0x71, 0x05, 0xeb, 0xeb, 0x98, 0xca, 0x43, 0x31, 0x78, 0x17, 0x85,
	0x0e, 0x41, 0xd7, 0x62, 0xa3, 0x66, 0x62, 0x79, 0xb8, 0x28, 0x8d, 0xf5, 0x95, 0xfa, 0xed, 0xe1,
	0x47, 0xf7, 0x0a, 0x3d, 0x8c, 0xf8, 0x5a, 0xa3, 0x7e, 0x01, 0xd3, 0x32, 0x47, 0xa0, 0xbd, 0xd0,
	0x31, 0x3f, 0x2b, 0xcb, 0x4c, 0x6c, 0x0f, 0x13, 0x5b, 0xd2, 0x89, 0x4a, 0x1d, 0x95, 0x3b, 0xe6,
	0x67, 0xa7, 0xba, 0xde, 0xde, 0x28, 0xbc, 0x9b, 0x52, 0x7e, 0xd5, 0x01, 0x99, 0x05, 0x6c, 0x9a,
	0x6a, 0x15, 0xcf, 0x5d, 0x51, 0xeb, 0x6b, 0x35, 0x8c, 0xa6, 0xa1, 0xbb, 0xcc, 0xec, 0x23, 0xf7,
	0x33, 0x01, 0x48, 0xe8, 0x65, 0x93, 0x04, 0xa6, 0x34, 0x68, 0xcb, 0xb9, 0x7b, 0xaf, 0x20, 0x3d,
	0xfa, 0x7e, 0x71, 0xc7, 0x82, 0x59, 0xe5, 0xa3, 0x65, 0xc1, 0x88, 0xf6, 0x42, 0x7a, 0xc1, 0xac,
	0x2e, 0xaa, 0x54, 0xad, 0xcb, 0x57, 0x33, 0x45, 0x69, 0xac, 0xd3, 0x59, 0x8d, 0x43, 0x16, 0x90,
	0x52, 0xd3, 0xc2, 0xa6, 0xfc, 0xa6, 0x0d, 0xe9, 0xf5, 0x41, 0x18, 0x39, 0xf7, 0xa6, 0x04, 0x9d,
	0xa7, 0xb1, 0xba, 0x29, 0x71, 0xfb, 0x20, 0xb9, 0x64, 0x51, 0x79, 0x2c, 0x6a, 0xc9, 0xf6, 0xe8,
	0xd4, 0xb1, 0xab, 0xb7, 0x0a, 0x89, 0xdb, 0xb7, 0x0a, 0xd2, 0xc3, 0x1f, 0x14, 0x12, 0xb7, 0x37,
	0x0a, 0xd2, 0xdb, 0x1b, 0x85, 0x8f, 0xbe, 0xf7, 0xde, 0xef, 0x92, 0xbf, 0xdd, 0x28, 0x74, 0xad,
	0xe8, 0xa6, 0x6e, 0xfd, 0x75, 0xa3, 0xe0, 0x98, 0x83, 0xbd, 0x1b, 0xf4, 0x4c, 0x67, 0x5a, 0xca,
	0x0e, 0x4c, 0xa5, 0x1d, 0x28, 0x7b, 0xef, 0x3f, 0xd3, 0x95, 0x1e, 0xc8, 0x5e, 0xcd, 0x28, 0x3f,
	0x95, 0x60, 0x67, 0xab, 0xf9, 0x26, 0x23, 0xec, 0x37, 0x4d, 0x9a, 0x9c, 0x7a, 0x56, 0xfd, 0x72,
	0xf3, 0x13, 0xb1, 0x1f, 0xd3, 0xf9, 0xfd, 0x76, 0x9d, 0x3f, 0x00, 0xe8, 0x5d, 0x99, 0x51, 0x6b,
	0xb5, 0x32, 0xfe, 0x52, 0x03, 0x9b, 0x16, 0x9a, 0x80, 0xb4, 0xfd, 0xba, 0xdc, 0x5c, 0xc3, 0x2c,
	0xc6, 0x33, 0x93, 0x7d, 0x4c, 0x65, 0x87, 0xe8, 0x08, 0x76, 0xde, 0xd1, 0x04, 0xec, 0xb0, 0x9f,
	0x4f, 0xd5, 0xd4, 0xaa, 0xc9, 0x82, 0xbd, 0xaf, 0xb4, 0x4b, 0x44, 0xa3, 0x37, 0x50, 0xf6, 0x1e,
	0x9d, 0x19, 0xa6, 0xcd, 0x73, 0x17, 0x59, 0xb0, 0x47, 0x44, 0xaf, 0x0b, 0xb2, 0x73, 0xc9, 0x7e,
	0xc6, 0x94, 0x05, 0x7b, 0x64, 0x2e, 0x71, 0x8c, 0x8b, 0xc6, 0x22, 0xe4, 0xe3, 0xd0, 0x18, 0x9d,
	0x82, 0x7e, 0xfb, 0x69, 0x49, 0xb7, 0xf0, 0x2c, 0xae, 0xd4, 0x54, 0xaa, 0x5a, 0xba, 0x41, 0xe4,
	0x91, 0x18, 0xd6, 0x30, 0x06, 0x74, 0x18, 0x32, 0x0e, 0x79, 0x01, 0x5b, 0x97, 0x0c, 0x4d, 0xce,
	0x15, 0xa5, 0xb1, 0x1d, 0x82, 0x25, 0x30, 0x86, 0xc6, 0xa0, 0x97, 0x51, 0x6c, 0x9b, 0x93, 0x0a,
	0x96, 0x77, 0x33, 0x33, 0x70, 0x6c, 0xcb, 0x08, 0x7a, 0x1e, 0x80, 0x7b, 0x47, 0x35, 0x0d, 0x22,
	0xef, 0x89, 0x51, 0xcb, 0x87, 0xb3, 0x6d, 0x50, 0x36, 0x0c, 0x6b, 0x79, 0x55, 0x1e, 0x8d, 0xb3,
	0x01, 0xc7, 0x38, 0x16, 0x5b, 0x5e, 0x95, 0xf3, 0x8f, 0xb3, 0xd8, 0xf2, 0x2a, 0x9a, 0x82, 0xbe,
	0xb9, 0x2b, 0x6b, 0x98, 0x98, 0x78, 0x06, 0x13, 0x0b, 0x53, 0xb9, 0x10, 0xc3, 0xd4, 0x0a, 0x45,
	0x2f, 0x41, 0xa6, 0x8c, 0x4d, 0xa3, 0x41, 0x2b, 0x0e, 0x73, 0x31, 0x86, 0x39, 0x80, 0x45, 0xa7,
	0x20, 0x33, 0x8b, 0x6b, 0xb8, 0xca, 0x2c, 0xbe, 0xb4, 0x86, 0x2b, 0xb2, 0xc2, 0xb8, 0x65, 0x37,
	0x40, 0xbd, 0xe1, 0x65, 0xe3, 0x32, 0x26, 0x8e, 0x9c, 0x56, 0x2e, 0xf4, 0x69, 0xd8, 0xb5, 0x48,
	0x0d, 0xad, 0x51, 0xc1, 0x74, 0x49, 0xaf, 0x12, 0xd5, 0x6a, 0x50, 0x2c, 0xff, 0x5f, 0x54, 0xb1,
	0x68, 0xc7, 0xa2, 0x69, 0x40, 0x65, 0x5c, 0xd5, 0x4d, 0x8b, 0xaa, 0x3e, 0x09, 0xfb, 0xa3, 0x24,
	0x84, 0x80, 0xd1, 0x2a, 0x0c, 0xbb, 0xd4, 0xc0, 0xa2, 0x0e, 0x6c, 0x6a, 0x51, 0x51, 0xec, 0x68,
	0x16, 0xb2, 0xbe, 0x7c, 0xe6, 0x69, 0x69, 0x57, 0xc2, 0xae, 0x92, 0x2c, 0xd2, 0xac, 0x6d, 0xbc,
	0xdc, 0x46, 0xb1, 0xf3, 0xe2, 0x33, 0xc4, 0x78, 0x83, 0xf0, 0x34, 0x99, 0x27, 0x15, 0xa3, 0xae,
	0x93, 0xaa, 0x7c, 0x28, 0x2e, 0x2f, 0x42, 0x18, 0xd0, 0x09, 0x1e, 0xe9, 0xe7, 0x1a, 0x56, 0xd5,
	0xb0, 0x05, 0x3c, 0x1b, 0x23, 0xa0, 0x05, 0x69, 0x97, 0x89, 0xe5, 0xd5, 0xb9, 0x2b, 0x6b, 0x3a,
	0x6d, 0xca, 0x87, 0x63, 0xca, 0x84, 0x03, 0x42, 0x2f, 0xc2, 0xce, 0x25, 0x5c, 0x69, 0x50, 0xdd,
	0x6a, 0xce, 0x18, 0xc4, 0xc2, 0x57, 0x2c, 0xf9, 0x48, 0x94, 0x4b, 0x82, 0x48, 0xbb, 0x8a, 0x2d,
	0xaf, 0x3a, 0x6c, 0xe3, 0x51, 0x6c, 0x1e, 0xc6, 0x66, 0x98, 0xa6, 0xd5, 0x46, 0x1d, 0x13, 0xcb,
	0x94, 0x27, 0x22, 0x19, 0x5c, 0x0c, 0xdb, 0x63, 0xff, 0x94, 0x52, 0xbe, 0x91, 0x82, 0x1e, 0x51,
	0x70, 0xcd, 0x46, 0xed, 0x7f, 0xae, 0xde, 0x1e, 0x80, 0x1e, 0xbe, 0x70, 0xae, 0xff, 0x88, 0xaf,
	0xf0, 0xf9, 0x07, 0xda, 0xe2, 0x26, 0xb7, 0xe9, 0xb8, 0x11, 0x9c, 0x6e, 0xc8, 0xee, 0x7e, 0x1c,
	0xa7, 0x1b, 0xab, 0xed, 0xf5, 0x65, 0x74, 0x5b, 0xf5, 0x65, 0x16, 0x90, 0x5f, 0x2e, 0x5f, 0x56,
	0x6c, 0x99, 0x0c, 0xc1, 0x87, 0x57, 0xa9, 0xe2, 0x13, 0x57, 0xa9, 0xbd, 0x1f, 0x53, 0x95, 0x52,
	0x9e, 0xac, 0x4a, 0x85, 0x24, 0xeb, 0xfe, 0x4d, 0x27, 0xeb, 0x8b, 0xb0, 0xb3, 0x8c, 0xad, 0x06,
	0x25, 0x5e, 0x06, 0x1e, 0x88, 0x64, 0x0e, 0x20, 0x59, 0x1e, 0xfe, 0x39, 0xa5, 0xfc, 0x26, 0x09,
	0x7d, 0x2b, 0x4b, 0x96, 0x6a, 0x61, 0xe7, 0xe4, 0x73, 0x10, 0x3a, 0x59, 0x8e, 0x0c, 0x44, 0xe7,
	0x48, 0xa7, 0x93, 0x1f, 0xe7, 0x2e, 0x7c, 0x11, 0x57, 0xac, 0xf8, 0xb3, 0x3d, 0xc7, 0xa0, 0xb3,
	0x90, 0x15, 0x33, 0x60, 0x8d, 0x2d, 0x80, 0x58, 0x2c, 0x0d, 0xbb, 0x4a, 0x45, 0x31, 0x85, 0xec,
	0x57, 0x43, 0x40, 0x44, 0x5d, 0x0e, 0x72, 0xa2, 0x57, 0x61, 0x30, 0x48, 0x3b, 0xab, 0xd7, 0x75,
	0x4b, 0xa4, 0x6a, 0x88, 0x01, 0xc2, 0xf1, 0x21, 0xc1, 0x3e, 0xf2, 0xf1, 0x6d, 0xa6, 0xbb, 0xb7,
	0x10, 0xa6, 0x47, 0x43, 0xf6, 0xab, 0x3d, 0xcc, 0x3e, 0x9c, 0xa5, 0x6d, 0x94, 0x79, 0xf0, 0xbd,
	0x94, 0xf2, 0x56, 0x1f, 0xf4, 0x3a, 0x1e, 0x5c, 0x33, 0xa8, 0x1d, 0x16, 0xdd, 0xf6, 0x6b, 0xc3,
	0x64, 0xa1, 0x94, 0x99, 0x1c, 0x65, 0xf3, 0xfb, 0x21, 0xe3, 0xec, 0x99, 0x83, 0xdc, 0x16, 0x8c,
	0xbd, 0x3d, 0x2d, 0xef, 0xb7, 0x9b, 0x79, 0x78, 0x5b, 0x66, 0x9e, 0x82, 0xc1, 0xf3, 0xc4, 0xa0,
	0x1a, 0xa6, 0x58, 0x5b, 0xc4, 0x44, 0xd3, 0x49, 0x75, 0xc6, 0x68, 0x10, 0x8b, 0x79, 0xcd, 0x31,
	0x55, 0x38, 0x04, 0x7d, 0x0e, 0x46, 0x83, 0x03, 0x73, 0x2a, 0xad, 0xe9, 0xd8, 0xb4, 0x78, 0x0f,
	0x99, 0x8b, 0x5e, 0x73, 0x3c, 0x27, 0x3a, 0x0e, 0xfd, 0xe7, 0x42, 0x94, 0xda, 0xed, 0x53, 0x2a,
	0x0c, 0x80, 0xce, 0xc3, 0xee, 0x73, 0x31, 0x0a, 0xed, 0x89, 0x56, 0x28, 0x8e, 0x0f, 0x9d, 0x84,
	0xe1, 0x45, 0x8a, 0x79, 0xcd, 0xb1, 0x41, 0x9f, 0x6d, 0xe0, 0x06, 0xe6, 0x2a, 0x8d, 0xfa, 0x54,
	0x8a, 0x02, 0xa1, 0x25, 0xc8, 0xb5, 0x0c, 0xb5, 0x6a, 0x95, 0x8f, 0xd6, 0x2a, 0x86, 0x0d, 0xbd,
	0x04, 0x43, 0x8b, 0x54, 0x37, 0x58, 0x01, 0x53, 0x6b, 0x35, 0x9f, 0x4e, 0x05, 0x9f, 0x4e, 0x11,
	0x18, 0x74, 0x1a, 0x06, 0xce, 0xaa, 0x16, 0x36, 0xad, 0x15, 0xb5, 0xa6, 0x6b, 0xaa, 0x85, 0x35,
	0x16, 0xc3, 0xb1, 0x07, 0xe7, 0x50, 0x0e, 0xfb, 0x48, 0x17, 0xa0, 0xcf, 0x18, 0x9a, 0xb3, 0x21,
	0x44, 0x1c, 0xe9, 0x42, 0x18, 0xd0, 0x2b, 0x90, 0xe5, 0xe4, 0x59, 0x9d, 0x5a, 0x4d, 0xae, 0x8d,
	0x12, 0x23, 0xa4, 0x0d, 0x8d, 0x4e, 0xc2, 0x4e, 0x1f, 0x8d, 0x69, 0xb1, 0x2f, 0x46, 0x40, 0x10,
	0x8c, 0xce, 0xc3, 0xce, 0x45, 0x6a, 0xac, 0xeb, 0x9a, 0x57, 0x51, 0xf9, 0xf1, 0x7d, 0x7f, 0x7b,
	0xc6, 0x07, 0x80, 0x25, 0x43, 0xe3, 0xb5, 0x48, 0x2a, 0x07, 0x65, 0xe4, 0x7e, 0x9e, 0x84, 0xfe,
	0x10, 0x38, 0x3a, 0x13, 0xe1, 0x02, 0x9e, 0xff, 0x59, 0x36, 0x27, 0x4f, 0x77, 0x46, 0x17, 0xe2,
	0xc3, 0x9d, 0x50, 0x0a, 0x31, 0xde, 0x50, 0xac, 0x9c, 0x76, 0xf3, 0x9d, 0x0e, 0x77, 0xe4, 0x70,
	0xac, 0x98, 0x08, 0x57, 0xb6, 0x39, 0x42, 0x8e, 0x95, 0xd2, 0xe6, 0x8a, 0x13, 0xd0, 0x2b, 0x12,
	0x92, 0xc5, 0xac, 0x3c, 0x52, 0x4c, 0x46, 0x9f, 0xb6, 0xfc, 0x48, 0xbb, 0x17, 0x74, 0x6b, 0x0b,
	0xe7, 0xcd, 0xc5, 0xf0, 0x06, 0xb0, 0x53, 0x69, 0x71, 0x63, 0x93, 0x50, 0xbe, 0x2e, 0x41, 0x8f,
	0xaf, 0xac, 0xa3, 0x21, 0x40, 0xbe, 0xd7, 0x79, 0xb2, 0x6e, 0xaf, 0x38, 0x9b, 0x40, 0x03, 0x90,
	0xf5, 0xd1, 0xcb, 0x58, 0xd5, 0x9a, 0x59, 0x29, 0x40, 0x9d, 0xab, 0xaf, 0x59, 0xcd, 0x6c, 0x07,
	0x1a, 0x86, 0xfe, 0x16, 0x19, 0x6a, 0xc5, 0xd2, 0xd7, 0x71, 0x36, 0x19, 0x10, 0xbe, 0xa0, 0x9b,
	0xa6, 0x4e, 0xaa, 0xd9, 0x4e, 0xb6, 0x25, 0xbd, 0x9f, 0x52, 0x7e, 0x2d, 0x41, 0x8f, 0xcf, 0x68,
	0x68, 0x12, 0x76, 0xb8, 0x0b, 0x11, 0x37, 0x86, 0xe1, 0xcb, 0xf3, 0x60, 0xe8, 0x19, 0xe8, 0x9a,
	0xa9, 0xa9, 0xa6, 0x19, 0x7b, 0x11, 0xc8, 0x21, 0xe8, 0x20, 0x74, 0xf1, 0x10, 0x8a, 0xdc, 0xfd,
	0xf9, 0xb8, 0x7d, 0xec, 0x9e, 0xc5, 0x6c, 0x15, 0xb6, 0xef, 0xd9, 0xa6, 0x91, 0x76, 0x8e, 0xdd,
	0xbe, 0x01, 0xe5, 0x6e, 0x12, 0x46, 0x56, 0xc4, 0xd6, 0x83, 0x35, 0x67, 0xd7, 0xd5, 0x89, 0x6e,
	0x5e, 0xc2, 0xda, 0x27, 0xd0, 0xab, 0x78, 0xcd, 0xc4, 0xd0, 0xd6, 0x9b, 0x89, 0xe1, 0xcd, 0x36,
	0x13, 0xf2, 0xb6, 0x9b, 0x89, 0x91, 0x27, 0x68, 0x26, 0x72, 0xdb, 0xda, 0xf8, 0x4f, 0x40, 0x0f,
	0xcf, 0x39, 0xee, 0xe8, 0xd1, 0xd8, 0xf4, 0xf4, 0x43, 0x59, 0x4c, 0x7e, 0x90, 0x52, 0x7e, 0xd1,
	0x01, 0x83, 0x9e, 0x4b, 0xfd, 0x57, 0x7d, 0x9e, 0xb1, 0x07, 0x36, 0x61, 0xec, 0x2d, 0xfb, 0x32,
	0x68, 0xf5, 0xa1, 0x6d, 0x5b, 0x5d, 0x7e, 0x02, 0xab, 0x6f, 0xeb, 0x54, 0xcb, 0x6c, 0xf7, 0x30,
	0xa5, 0xfc, 0x5e, 0x82, 0xa1, 0xa0, 0xed, 0xcc, 0x35, 0x83, 0x98, 0x78, 0x8b, 0xc6, 0x0b, 0xae,
	0x68, 0x70, 0xd3, 0x2b, 0x5a, 0x81, 0x21, 0x67, 0xce, 0xc0, 0xca, 0x86, 0x36, 0xb5, 0xb2, 0x08,
	0x6e, 0xb6, 0xc2, 0xbf, 0xa4, 0x94, 0x1f, 0x49, 0x90, 0x5d, 0x39, 0xa5, 0x93, 0x96, 0xc0, 0x78,
	0x16, 0xba, 0xcf, 0x1a, 0xc6, 0xe5, 0x69, 0x2b, 0xee, 0x34, 0x2c, 0x20, 0x3e, 0x43, 0x0c, 0x6e,
	0xc2, 0x10, 0x47, 0x21, 0xbd, 0xa9, 0x80, 0x70, 0x51, 0x4c, 0xd1, 0xbf, 0xa5, 0x94, 0x6f, 0x26,
	0x61, 0x97, 0x4f, 0x51, 0xe1, 0x85, 0x09, 0x48, 0xdb, 0x6a, 0x60, 0x2d, 0x5e, 0x57, 0x17, 0xf4,
	0xb4, 0xb5, 0x45, 0x27, 0xdd, 0x1e, 0x64, 0x98, 0x15, 0xc8, 0x22, 0x3f, 0x91, 0x04, 0x15, 0x67,
	0x0e, 0xf3, 0x32, 0xd7, 0x6b, 0x43, 0x8e, 0x3b, 0xf7, 0xbd, 0xec, 0xce, 0xc0, 0xbf, 0x19, 0xfb,
	0x2e, 0x8d, 0x44, 0xb6, 0xfb, 0x90, 0x8a, 0xca, 0xb3, 0x93, 0x57, 0xfb, 0x01, 0xde, 0x52, 0xb1,
	0x97, 0x96, 0x0d, 0xd0, 0xa5, 0x3a, 0x3b, 0x97, 0xd4, 0x42, 0x3d, 0x4f, 0x2e, 0x13, 0xe3, 0x0d,
	0x92, 0xed, 0x40, 0x48, 0x5c, 0x67, 0xdb, 0xd4, 0x53, 0x46, 0x83, 0x68, 0xd9, 0x24, 0x73, 0xc4,
	0xdf, 0x53, 0xca, 0x57, 0x60, 0x60, 0x65, 0x46, 0xad, 0x5c, 0xc2, 0xda, 0x02, 0xae, 0x1b, 0xb4,
	0xe9, 0xab, 0x26, 0x5b, 0xe8, 0x8b, 0xc6, 0x21, 0xc5, 0xd5, 0x9b, 0x95, 0x27, 0x63, 0xe0, 0x0e,
	0x88, 0x4d, 0xfe, 0x61, 0x4a, 0xf9, 0x30, 0x09, 0x83, 0x81, 0xd9, 0xbd, 0x7c, 0x7c, 0x7a, 0xd3,
	0xa3, 0x57, 0xb9, 0x5b, 0x84, 0x6b, 0x8f, 0x31, 0xd7, 0xee, 0x75, 0xdc, 0xd2, 0xae, 0xcd, 0x78,
	0x4b, 0x8b, 0xe9, 0x63, 0x45, 0x63, 0xd0, 0xf9, 0x9a, 0x7d, 0xcc, 0x7a, 0x3e, 0x66, 0x56, 0x86,
	0x40, 0xc7, 0xa1, 0x67, 0x91, 0xe2, 0x75, 0x47, 0xcd, 0xff, 0x8f, 0x61, 0xf0, 0x03, 0x51, 0x11,
	0xd2, 0xce, 0x81, 0xa5, 0x65, 0x9f, 0x77, 0xa9, 0xe8, 0x10, 0x74, 0x73, 0x75, 0xe5, 0xe3, 0x51,
	0xc7, 0x06, 0x01, 0x50, 0xbe, 0xea, 0x84, 0x33, 0xda, 0x03, 0xb2, 0x7f, 0xa5, 0x2d, 0xf1, 0x92,
	0x40, 0x39, 0x18, 0x6a, 0x1b, 0xe5, 0x71, 0x23, 0xa1, 0x51, 0x18, 0x69, 0x1b, 0x2b, 0x63, 0x4d,
	0xa7, 0xb8, 0x62, 0x65, 0x3b, 0x42, 0x05, 0x3b, 0xe1, 0xc9, 0x83, 0xee, 0xa3, 0x94, 0x72, 0x2d,
	0x0d, 0xc3, 0x2b, 0xdc, 0x77, 0xcb, 0x54, 0x25, 0x66, 0x85, 0xea, 0x6b, 0x96, 0x68, 0xfb, 0x9f,
	0x09, 0x7c, 0x62, 0xf3, 0xbe, 0xc9, 0xa6, 0x9d, 0x0f, 0x6b, 0xee, 0xb7, 0xb4, 0x31, 0xd1, 0xe5,
	0xb3, 0xef, 0x68, 0xb1, 0x6d, 0xfe, 0x11, 0x37, 0x9e, 0xd8, 0x07, 0xb5, 0xc7, 0x05, 0xd4, 0x17,
	0x00, 0x89, 0x8e, 0xd4, 0xd3, 0xcf, 0x94, 0xbf, 0x95, 0x61, 0x47, 0xda, 0x83, 0x3c, 0x52, 0xc2,
	0xf5, 0x1f, 0xf7, 0x08, 0xce, 0x4d, 0x5c, 0xbb, 0x24, 0xf4, 0x79, 0xc8, 0x06, 0xd9, 0xe5, 0x6f,
	0x73, 0xc5, 0xb6, 0x28, 0xbd, 0x4d, 0x4e, 0xee, 0x97, 0x12, 0xe4, 0xbd, 0xd7, 0x39, 0x62, 0xd1,
	0xa6, 0x77, 0x17, 0xc9, 0x93, 0xfb, 0x53, 0xd0, 0xcb, 0xd9, 0x44, 0xe0, 0x5c, 0x8d, 0xb3, 0x49,
	0x0b, 0x14, 0x3d, 0x67, 0xc7, 0xa3, 0xd8, 0xf6, 0x62, 0x4d, 0xe9, 0xc2, 0x50, 0x01, 0x52, 0x62,
	0x62, 0xf9, 0x9a, 0xff, 0x6b, 0xa6, 0x43, 0x9d, 0x02, 0x71, 0xfa, 0xff, 0xd7, 0xf5, 0xee, 0xdc,
	0xeb, 0x6d, 0xca, 0x3b, 0xc5, 0xd8, 0x51, 0xfe, 0x39, 0x5f, 0x15, 0x8f, 0x55, 0xdc, 0xdb, 0x74,
	0x9c, 0x09, 0xfe, 0x7d, 0xbd, 0x3b, 0xf7, 0x1d, 0x09, 0x46, 0x23, 0x67, 0x60, 0x57, 0xb5, 0x2f,
	0x43, 0xa6, 0x95, 0x12, 0x3f, 0x4d, 0x00, 0x8c, 0xf6, 0xb7, 0xd4, 0xfc, 0x96, 0xef, 0xb7, 0xbe,
	0x01, 0x57, 0xa7, 0xff, 0x5c, 0xef, 0xce, 0xfd, 0xb0, 0x5d, 0xa7, 0xc0, 0xf5, 0xf1, 0xcb, 0x90,
	0x09, 0x5c, 0x40, 0xc7, 0xeb, 0x14, 0x60, 0x7f, 0xa1, 0xa5, 0x91, 0x89, 0x77, 0x9c, 0x1f, 0xe9,
	0x6a, 0xf9, 0xb5, 0x1b, 0xdd, 0xb9, 0x69, 0x00, 0x4f, 0x49, 0x74, 0x08, 0x52, 0xb6, 0xa2, 0x3a,
	0x36, 0x6d, 0x55, 0x92, 0x61, 0xff, 0x9e, 0x10, 0xe3, 0x5e, 0x77, 0xc7, 0xf2, 0xff, 0x1f, 0xa9,
	0xd6, 0x6f, 0xd6, 0x3f, 0x96, 0xdc, 0x62, 0x20, 0xda, 0x59, 0xdd, 0x20, 0xa2, 0x18, 0x6c, 0x6d,
	0x1b, 0xd8, 0x07, 0x1d, 0xf3, 0x44, 0x7e, 0x21, 0xba, 0x16, 0x74, 0xcc, 0x13, 0xbb, 0x89, 0x73,
	0xbb, 0xe6, 0xd8, 0xdd, 0xc2, 0x83, 0x31, 0xb5, 0xff, 0x99, 0x2a, 0x35, 0xef, 0xbc, 0x93, 0x97,
	0xee, 0xbe, 0x93, 0x4f, 0xdc, 0xbe, 0x9f, 0x97, 0xee, 0xdc, 0xcf, 0x4b, 0x77, 0xef, 0xe7, 0xa5,
	0x8d, 0xfb, 0x79, 0xe9, 0x0f, 0xf7, 0xf3, 0x89, 0xb7, 0x1e, 0xe4, 0x13, 0xb7, 0x1e, 0xe4, 0xa5,
	0xbb, 0x0f, 0xf2, 0x89, 0x8d, 0x07, 0xf9, 0xc4, 0xbb, 0x37, 0x0a, 0xd2, 0xc3, 0x1b, 0x05, 0xe9,
	0xd1, 0x8d, 0x42, 0x4a, 0xfc, 0x8d, 0xe0, 0xda, 0xcd, 0x02, 0xfb, 0xd3, 0xc3, 0x77, 0x6f, 0x8a,
	0xbf, 0x24, 0xfc, 0xe4, 0x66, 0xa1, 0xdf, 0xb9, 0x67, 0x12, 0x18, 0xbb, 0xd1, 0xfa, 0xd9, 0xcd,
	0xe0, 0x3f, 0x15, 0x2e, 0x74, 0xb3, 0xbf, 0xae, 0x1c, 0xfb, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xf7, 0x93, 0x76, 0xc8, 0x78, 0x23, 0x00, 0x00,
}

func (this *Meta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Meta)
	if !ok {
		that2, ok := that.(Meta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Payload.Equal(&that1.Payload) {
		return false
	}
	if !this.Sender.Equal(&that1.Sender) {
		return false
	}
	if !this.Receiver.Equal(&that1.Receiver) {
		return false
	}
	if this.Pulse != that1.Pulse {
		return false
	}
	if !this.ID.Equal(&that1.ID) {
		return false
	}
	return true
}
func (this *MessageExample) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageExample)
	if !ok {
		that2, ok := that.(MessageExample)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RecordExample.Equal(&that1.RecordExample) {
		return false
	}
	if this.MsgParam != that1.MsgParam {
		return false
	}
	if !bytes.Equal(this.MsgBytes, that1.MsgBytes) {
		return false
	}
	return true
}
func (this *MessageExample_Head) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageExample_Head)
	if !ok {
		that2, ok := that.(MessageExample_Head)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Str.Equal(&that1.Str) {
		return false
	}
	if this.MsgParam != that1.MsgParam {
		return false
	}
	return true
}
func (this *MessageExample2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageExample2)
	if !ok {
		that2, ok := that.(MessageExample2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyRecordLazy.Equal(&that1.AnyRecordLazy) {
		return false
	}
	if this.MsgParam != that1.MsgParam {
		return false
	}
	if !bytes.Equal(this.MsgBytes, that1.MsgBytes) {
		return false
	}
	return true
}
func (this *VCallRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VCallRequest)
	if !ok {
		that2, ok := that.(VCallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallType != that1.CallType {
		return false
	}
	if this.CallFlags != that1.CallFlags {
		return false
	}
	if this.CallAsOf != that1.CallAsOf {
		return false
	}
	if !this.Caller.Equal(&that1.Caller) {
		return false
	}
	if !this.Callee.Equal(&that1.Callee) {
		return false
	}
	if !this.CallSiteDeclaration.Equal(&that1.CallSiteDeclaration) {
		return false
	}
	if this.CallSiteMethod != that1.CallSiteMethod {
		return false
	}
	if this.CallSequence != that1.CallSequence {
		return false
	}
	if !this.CallReason.Equal(&that1.CallReason) {
		return false
	}
	if !this.RootTX.Equal(&that1.RootTX) {
		return false
	}
	if !this.CallTX.Equal(&that1.CallTX) {
		return false
	}
	if !this.ExpenseCenter.Equal(&that1.ExpenseCenter) {
		return false
	}
	if !this.ResourceCenter.Equal(&that1.ResourceCenter) {
		return false
	}
	if !this.DelegationSpec.Equal(&that1.DelegationSpec) {
		return false
	}
	if !this.ProducerSignature.Equal(&that1.ProducerSignature) {
		return false
	}
	if !this.RegistrarSignature.Equal(&that1.RegistrarSignature) {
		return false
	}
	if !this.RegistrarDelegationSpec.Equal(&that1.RegistrarDelegationSpec) {
		return false
	}
	if this.CallRequestFlags != that1.CallRequestFlags {
		return false
	}
	if !this.KnownCalleeIncoming.Equal(&that1.KnownCalleeIncoming) {
		return false
	}
	if !this.CallOutgoing.Equal(&that1.CallOutgoing) {
		return false
	}
	if this.TXExpiry != that1.TXExpiry {
		return false
	}
	if !this.SecurityContext.Equal(&that1.SecurityContext) {
		return false
	}
	if !this.TXContext.Equal(&that1.TXContext) {
		return false
	}
	if !this.Arguments.Equal(&that1.Arguments) {
		return false
	}
	return true
}
func (this *VCallResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VCallResult)
	if !ok {
		that2, ok := that.(VCallResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallType != that1.CallType {
		return false
	}
	if this.CallFlags != that1.CallFlags {
		return false
	}
	if this.CallAsOf != that1.CallAsOf {
		return false
	}
	if !this.Caller.Equal(&that1.Caller) {
		return false
	}
	if !this.Callee.Equal(&that1.Callee) {
		return false
	}
	if this.ResultFlags != that1.ResultFlags {
		return false
	}
	if !this.CallOutgoing.Equal(&that1.CallOutgoing) {
		return false
	}
	if !this.CallIncoming.Equal(&that1.CallIncoming) {
		return false
	}
	if !this.DelegationSpec.Equal(&that1.DelegationSpec) {
		return false
	}
	if !this.CallIncomingResult.Equal(&that1.CallIncomingResult) {
		return false
	}
	if !this.ProducerSignature.Equal(&that1.ProducerSignature) {
		return false
	}
	if !this.RegistrarSignature.Equal(&that1.RegistrarSignature) {
		return false
	}
	if !this.RegistrarDelegationSpec.Equal(&that1.RegistrarDelegationSpec) {
		return false
	}
	if !this.SecurityContext.Equal(&that1.SecurityContext) {
		return false
	}
	if !this.ReturnArguments.Equal(&that1.ReturnArguments) {
		return false
	}
	return true
}
func (this *VStateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VStateRequest)
	if !ok {
		that2, ok := that.(VStateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsOf != that1.AsOf {
		return false
	}
	if !this.Object.Equal(&that1.Object) {
		return false
	}
	if this.RequestedContent != that1.RequestedContent {
		return false
	}
	if !this.RequestedContentLimit.Equal(&that1.RequestedContentLimit) {
		return false
	}
	if !this.DelegationSpec.Equal(&that1.DelegationSpec) {
		return false
	}
	if !this.ProducerSignature.Equal(&that1.ProducerSignature) {
		return false
	}
	if this.CallRequestFlags != that1.CallRequestFlags {
		return false
	}
	return true
}
func (this *VStateReport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VStateReport)
	if !ok {
		that2, ok := that.(VStateReport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsOf != that1.AsOf {
		return false
	}
	if !this.Object.Equal(&that1.Object) {
		return false
	}
	if !this.DelegationSpec.Equal(&that1.DelegationSpec) {
		return false
	}
	if this.UnorderedPendingCount != that1.UnorderedPendingCount {
		return false
	}
	if this.UnorderedPendingEarliestPulse != that1.UnorderedPendingEarliestPulse {
		return false
	}
	if this.OrderedPendingCount != that1.OrderedPendingCount {
		return false
	}
	if this.OrderedPendingEarliestPulse != that1.OrderedPendingEarliestPulse {
		return false
	}
	if this.PreRegisteredQueueCount != that1.PreRegisteredQueueCount {
		return false
	}
	if this.PreRegisteredEarliestPulse != that1.PreRegisteredEarliestPulse {
		return false
	}
	if this.PriorityCallQueueCount != that1.PriorityCallQueueCount {
		return false
	}
	if !this.LatestValidatedState.Equal(&that1.LatestValidatedState) {
		return false
	}
	if !this.LatestValidatedCode.Equal(&that1.LatestValidatedCode) {
		return false
	}
	if !this.LatestDirtyState.Equal(&that1.LatestDirtyState) {
		return false
	}
	if !this.LatestDirtyCode.Equal(&that1.LatestDirtyCode) {
		return false
	}
	if !this.ProvidedContent.Equal(that1.ProvidedContent) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *VStateReport_ProvidedContentBody) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VStateReport_ProvidedContentBody)
	if !ok {
		that2, ok := that.(VStateReport_ProvidedContentBody)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LatestValidatedState.Equal(that1.LatestValidatedState) {
		return false
	}
	if !this.LatestDirtyState.Equal(that1.LatestDirtyState) {
		return false
	}
	if !this.LatestValidatedCode.Equal(that1.LatestValidatedCode) {
		return false
	}
	if !this.LatestDirtyCode.Equal(that1.LatestDirtyCode) {
		return false
	}
	if len(this.OrderedQueue) != len(that1.OrderedQueue) {
		return false
	}
	for i := range this.OrderedQueue {
		if !this.OrderedQueue[i].Equal(&that1.OrderedQueue[i]) {
			return false
		}
	}
	if len(this.UnorderedQueue) != len(that1.UnorderedQueue) {
		return false
	}
	for i := range this.UnorderedQueue {
		if !this.UnorderedQueue[i].Equal(&that1.UnorderedQueue[i]) {
			return false
		}
	}
	return true
}
func (this *ObjectState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectState)
	if !ok {
		that2, ok := that.(ObjectState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Reference.Equal(&that1.Reference) {
		return false
	}
	if !this.Class.Equal(&that1.Class) {
		return false
	}
	if !this.State.Equal(&that1.State) {
		return false
	}
	if this.Deactivated != that1.Deactivated {
		return false
	}
	return true
}
func (this *VDelegatedRequestFinished) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VDelegatedRequestFinished)
	if !ok {
		that2, ok := that.(VDelegatedRequestFinished)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallType != that1.CallType {
		return false
	}
	if this.CallFlags != that1.CallFlags {
		return false
	}
	if !this.Callee.Equal(&that1.Callee) {
		return false
	}
	if this.ResultFlags != that1.ResultFlags {
		return false
	}
	if !this.CallOutgoing.Equal(&that1.CallOutgoing) {
		return false
	}
	if !this.CallIncoming.Equal(&that1.CallIncoming) {
		return false
	}
	if !this.DelegationSpec.Equal(&that1.DelegationSpec) {
		return false
	}
	if !this.LatestState.Equal(that1.LatestState) {
		return false
	}
	return true
}
func (this *VDelegatedCallRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VDelegatedCallRequest)
	if !ok {
		that2, ok := that.(VDelegatedCallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Callee.Equal(&that1.Callee) {
		return false
	}
	if this.CallFlags != that1.CallFlags {
		return false
	}
	if !this.CallOutgoing.Equal(&that1.CallOutgoing) {
		return false
	}
	if !this.CallIncoming.Equal(&that1.CallIncoming) {
		return false
	}
	if !this.DelegationSpec.Equal(&that1.DelegationSpec) {
		return false
	}
	return true
}
func (this *VDelegatedCallResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VDelegatedCallResponse)
	if !ok {
		that2, ok := that.(VDelegatedCallResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Callee.Equal(&that1.Callee) {
		return false
	}
	if !this.CallIncoming.Equal(&that1.CallIncoming) {
		return false
	}
	if !this.ResponseDelegationSpec.Equal(&that1.ResponseDelegationSpec) {
		return false
	}
	return true
}
func (this *VFindCallRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VFindCallRequest)
	if !ok {
		that2, ok := that.(VFindCallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LookAt != that1.LookAt {
		return false
	}
	if !this.Callee.Equal(&that1.Callee) {
		return false
	}
	if !this.Outgoing.Equal(&that1.Outgoing) {
		return false
	}
	return true
}
func (this *VFindCallResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VFindCallResponse)
	if !ok {
		that2, ok := that.(VFindCallResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LookedAt != that1.LookedAt {
		return false
	}
	if !this.Callee.Equal(&that1.Callee) {
		return false
	}
	if !this.Outgoing.Equal(&that1.Outgoing) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.CallResult.Equal(that1.CallResult) {
		return false
	}
	return true
}
func (this *VCachedMemoryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VCachedMemoryRequest)
	if !ok {
		that2, ok := that.(VCachedMemoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Object.Equal(&that1.Object) {
		return false
	}
	if !this.StateID.Equal(&that1.StateID) {
		return false
	}
	return true
}
func (this *VCachedMemoryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VCachedMemoryResponse)
	if !ok {
		that2, ok := that.(VCachedMemoryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Object.Equal(&that1.Object) {
		return false
	}
	if this.Inactive != that1.Inactive {
		return false
	}
	if !this.StateID.Equal(&that1.StateID) {
		return false
	}
	if this.CallStatus != that1.CallStatus {
		return false
	}
	if !this.Node.Equal(&that1.Node) {
		return false
	}
	if !this.PrevStateID.Equal(&that1.PrevStateID) {
		return false
	}
	if !this.Memory.Equal(&that1.Memory) {
		return false
	}
	return true
}
func (this *VObjectTranscriptReport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VObjectTranscriptReport)
	if !ok {
		that2, ok := that.(VObjectTranscriptReport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Any.Equal(&that1.Any) {
		return false
	}
	if this.AsOf != that1.AsOf {
		return false
	}
	if !this.Object.Equal(&that1.Object) {
		return false
	}
	if len(this.PendingTranscripts) != len(that1.PendingTranscripts) {
		return false
	}
	for i := range this.PendingTranscripts {
		if !this.PendingTranscripts[i].Equal(&that1.PendingTranscripts[i]) {
			return false
		}
	}
	if !this.ObjectTranscript.Equal(&that1.ObjectTranscript) {
		return false
	}
	return true
}
func (this *VObjectTranscriptReport_TranscriptEntryIncomingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VObjectTranscriptReport_TranscriptEntryIncomingRequest)
	if !ok {
		that2, ok := that.(VObjectTranscriptReport_TranscriptEntryIncomingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ObjectMemory.Equal(&that1.ObjectMemory) {
		return false
	}
	if !this.Incoming.Equal(&that1.Incoming) {
		return false
	}
	if !bytes.Equal(this.Request, that1.Request) {
		return false
	}
	return true
}
func (this *VObjectTranscriptReport_TranscriptEntryOutgoingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VObjectTranscriptReport_TranscriptEntryOutgoingRequest)
	if !ok {
		that2, ok := that.(VObjectTranscriptReport_TranscriptEntryOutgoingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Outgoing.Equal(&that1.Outgoing) {
		return false
	}
	return true
}
func (this *VObjectTranscriptReport_TranscriptEntryOutgoingResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VObjectTranscriptReport_TranscriptEntryOutgoingResult)
	if !ok {
		that2, ok := that.(VObjectTranscriptReport_TranscriptEntryOutgoingResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutgoingResult.Equal(&that1.OutgoingResult) {
		return false
	}
	if !bytes.Equal(this.CallResult, that1.CallResult) {
		return false
	}
	return true
}
func (this *VObjectTranscriptReport_TranscriptEntryIncomingResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VObjectTranscriptReport_TranscriptEntryIncomingResult)
	if !ok {
		that2, ok := that.(VObjectTranscriptReport_TranscriptEntryIncomingResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IncomingResult.Equal(&that1.IncomingResult) {
		return false
	}
	if !this.ObjectState.Equal(&that1.ObjectState) {
		return false
	}
	return true
}
func (this *VObjectTranscriptReport_Transcript) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VObjectTranscriptReport_Transcript)
	if !ok {
		that2, ok := that.(VObjectTranscriptReport_Transcript)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Entries) != len(that1.Entries) {
		return false
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(&that1.Entries[i]) {
			return false
		}
	}
	return true
}
func (this *VObjectValidationReport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VObjectValidationReport)
	if !ok {
		that2, ok := that.(VObjectValidationReport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Object.Equal(&that1.Object) {
		return false
	}
	if !this.Validated.Equal(&that1.Validated) {
		return false
	}
	if this.In != that1.In {
		return false
	}
	return true
}

type MessageExample_HeadFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetStr() Binary
	GetMsgParam() uint64
}

func (this *MessageExample_Head) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *MessageExample_Head) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewMessageExample_HeadFromFace(this)
}

func (this *MessageExample_Head) GetStr() Binary {
	return this.Str
}

func (this *MessageExample_Head) GetMsgParam() uint64 {
	return this.MsgParam
}

func NewMessageExample_HeadFromFace(that MessageExample_HeadFace) *MessageExample_Head {
	this := &MessageExample_Head{}
	this.Str = that.GetStr()
	this.MsgParam = that.GetMsgParam()
	return this
}

func (m *Meta) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 1000)
}

const TypeMetaPolymorphID = 1000

func (*Meta) GetDefaultPolymorphID() uint64 {
	return 1000
}

func (m *Meta) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *Meta) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Meta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.Pulse != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.Pulse))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	{
		size, err := m.Receiver.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	{
		size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	{
		size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(1000))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

type MessageExampleHead MessageExample_HeadFace
type MessageExample_Head MessageExample

func (m *MessageExample) AsHead() *MessageExample_Head {
	return (*MessageExample_Head)(m)
}

func (m *MessageExample) AsHeadFace() MessageExampleHead {
	if m == nil {
		return nil
	}
	return (*MessageExample_Head)(m)
}

func (m *MessageExample_Head) AsMessageExample() *MessageExample {
	return (*MessageExample)(m)
}

func (m *MessageExample_Head) AsProjectionBase() interface{} {
	if m == nil {
		return nil
	}
	return (*MessageExample)(m)
}

func (m *MessageExample) AsProjection(name string) interface{} {
	if m == nil {
		return nil
	}
	switch name {
	case "Head":
		return m.AsHead()
	}
	return nil
}

func (m *MessageExample) Visit(ctx MessageVisitor) error {
	if err := ctx.MsgRecord(m, 19, &m.RecordExample); err != nil {
		return err
	}
	return ctx.Message(m, 999999990)
}

const TypeMessageExamplePolymorphID = 999999990

func (*MessageExample) GetDefaultPolymorphID() uint64 {
	return 999999990
}

func (m *MessageExample) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *MessageExample) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageExample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if len(m.MsgBytes) > 0 {
		i -= len(m.MsgBytes)
		copy(dAtA[i:], m.MsgBytes)
		i--
		dAtA[i] = 132
		i = encodeVarintProtoVnvn(dAtA, i, uint64(len(m.MsgBytes)+1))
		i--
		dAtA[i] = 0x70
		i--
		dAtA[i] = 0xca
	}
	if m.MsgParam != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.MsgParam))
		i--
		dAtA[i] = 0x70
		i--
		dAtA[i] = 0xc0
	}
	{
		size, err := m.RecordExample.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(999999990))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *MessageExample_Head) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 999999990)
}

const TypeMessageExample_HeadPolymorphID = 999999990

func (*MessageExample_Head) GetDefaultPolymorphID() uint64 {
	return 999999990
}

func (m *MessageExample_Head) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *MessageExample_Head) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageExample_Head) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.MsgParam != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.MsgParam))
		i--
		dAtA[i] = 0x70
		i--
		dAtA[i] = 0xc0
	}
	{
		size, err := m.Str.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(999999990))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *MessageExample2) Visit(ctx MessageVisitor) error {
	if err := ctx.MsgRecord(m, 19, &m.AnyRecordLazy); err != nil {
		return err
	}
	return ctx.Message(m, 999999980)
}

const TypeMessageExample2PolymorphID = 999999980

func (*MessageExample2) GetDefaultPolymorphID() uint64 {
	return 999999980
}

func (m *MessageExample2) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *MessageExample2) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageExample2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if len(m.MsgBytes) > 0 {
		i -= len(m.MsgBytes)
		copy(dAtA[i:], m.MsgBytes)
		i--
		dAtA[i] = 132
		i = encodeVarintProtoVnvn(dAtA, i, uint64(len(m.MsgBytes)+1))
		i--
		dAtA[i] = 0x70
		i--
		dAtA[i] = 0xca
	}
	if m.MsgParam != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.MsgParam))
		i--
		dAtA[i] = 0x70
		i--
		dAtA[i] = 0xc0
	}
	{
		size, err := m.AnyRecordLazy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(999999980))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VCallRequest) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 1001)
}

const TypeVCallRequestPolymorphID = 1001

func (*VCallRequest) GetDefaultPolymorphID() uint64 {
	return 1001
}

func (m *VCallRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VCallRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VCallRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.Arguments.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xfa
		}
	}
	{
		size, err := m.TXContext.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xf2
		}
	}
	{
		size, err := m.SecurityContext.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xea
		}
	}
	if m.TXExpiry != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.TXExpiry))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe0
	}
	{
		size, err := m.CallOutgoing.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xda
		}
	}
	{
		size, err := m.KnownCalleeIncoming.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xca
		}
	}
	if m.CallRequestFlags != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.CallRequestFlags))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	{
		size, err := m.RegistrarDelegationSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xb2
		}
	}
	{
		size, err := m.RegistrarSignature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	{
		size, err := m.ProducerSignature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa2
		}
	}
	{
		size, err := m.DelegationSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	{
		size, err := m.ResourceCenter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x82
		}
	}
	{
		size, err := m.ExpenseCenter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
	}
	{
		size, err := m.CallTX.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	{
		size, err := m.RootTX.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
	}
	{
		size, err := m.CallReason.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.CallSequence != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.CallSequence))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if len(m.CallSiteMethod) > 0 {
		i -= len(m.CallSiteMethod)
		copy(dAtA[i:], m.CallSiteMethod)
		i = encodeVarintProtoVnvn(dAtA, i, uint64(len(m.CallSiteMethod)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	{
		size, err := m.CallSiteDeclaration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	{
		size, err := m.Callee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	{
		size, err := m.Caller.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if m.CallAsOf != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.CallAsOf))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CallFlags != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.CallFlags))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.CallType != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.CallType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(1001))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VCallResult) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 1002)
}

const TypeVCallResultPolymorphID = 1002

func (*VCallResult) GetDefaultPolymorphID() uint64 {
	return 1002
}

func (m *VCallResult) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VCallResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VCallResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.ReturnArguments.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xb2
		}
	}
	{
		size, err := m.SecurityContext.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	{
		size, err := m.RegistrarDelegationSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	{
		size, err := m.RegistrarSignature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	{
		size, err := m.ProducerSignature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x82
		}
	}
	{
		size, err := m.CallIncomingResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
	}
	{
		size, err := m.DelegationSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
	}
	{
		size, err := m.CallIncoming.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	{
		size, err := m.CallOutgoing.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.ResultFlags != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.ResultFlags))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	{
		size, err := m.Callee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	{
		size, err := m.Caller.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if m.CallAsOf != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.CallAsOf))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CallFlags != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.CallFlags))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.CallType != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.CallType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(1002))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VStateRequest) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 1003)
}

const TypeVStateRequestPolymorphID = 1003

func (*VStateRequest) GetDefaultPolymorphID() uint64 {
	return 1003
}

func (m *VStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.CallRequestFlags != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.CallRequestFlags))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	{
		size, err := m.ProducerSignature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	{
		size, err := m.DelegationSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	{
		size, err := m.RequestedContentLimit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if m.RequestedContent != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.RequestedContent))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	{
		size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.AsOf != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.AsOf))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(1003))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VStateReport) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 1004)
}

const TypeVStateReportPolymorphID = 1004

func (*VStateReport) GetDefaultPolymorphID() uint64 {
	return 1004
}

func (m *VStateReport) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VStateReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VStateReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.Status != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.ProvidedContent != nil {
		{
			size, err := m.ProvidedContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			if size > 0 {
				i -= size
				i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
				i--
				dAtA[i] = 0x2
				i--
				dAtA[i] = 0xa2
			}
		}
	}
	{
		size, err := m.LatestDirtyCode.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	{
		size, err := m.LatestDirtyState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	{
		size, err := m.LatestValidatedCode.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	{
		size, err := m.LatestValidatedState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x82
		}
	}
	if m.PriorityCallQueueCount != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.PriorityCallQueueCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.PreRegisteredEarliestPulse != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.PreRegisteredEarliestPulse))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.PreRegisteredQueueCount != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.PreRegisteredQueueCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.OrderedPendingEarliestPulse != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.OrderedPendingEarliestPulse))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.OrderedPendingCount != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.OrderedPendingCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.UnorderedPendingEarliestPulse != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.UnorderedPendingEarliestPulse))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.UnorderedPendingCount != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.UnorderedPendingCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	{
		size, err := m.DelegationSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	{
		size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.AsOf != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.AsOf))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(1004))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VStateReport_ProvidedContentBody) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 0)
}

func (m *VStateReport_ProvidedContentBody) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VStateReport_ProvidedContentBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VStateReport_ProvidedContentBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if len(m.UnorderedQueue) > 0 {
		for iNdEx := len(m.UnorderedQueue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnorderedQueue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.OrderedQueue) > 0 {
		for iNdEx := len(m.OrderedQueue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderedQueue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if m.LatestDirtyCode != nil {
		{
			size, err := m.LatestDirtyCode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			if size > 0 {
				i -= size
				i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xc2
			}
		}
	}
	if m.LatestValidatedCode != nil {
		{
			size, err := m.LatestValidatedCode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			if size > 0 {
				i -= size
				i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xba
			}
		}
	}
	if m.LatestDirtyState != nil {
		{
			size, err := m.LatestDirtyState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			if size > 0 {
				i -= size
				i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xb2
			}
		}
	}
	if m.LatestValidatedState != nil {
		{
			size, err := m.LatestValidatedState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			if size > 0 {
				i -= size
				i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xaa
			}
		}
	}
	if i < len(dAtA) {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(0))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	return len(dAtA) - i, nil
}

func (m *ObjectState) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 0)
}

func (m *ObjectState) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *ObjectState) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.Deactivated {
		i--
		if m.Deactivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	{
		size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	{
		size, err := m.Class.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	{
		size, err := m.Reference.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if i < len(dAtA) {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(0))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	return len(dAtA) - i, nil
}

func (m *VDelegatedRequestFinished) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 1006)
}

const TypeVDelegatedRequestFinishedPolymorphID = 1006

func (*VDelegatedRequestFinished) GetDefaultPolymorphID() uint64 {
	return 1006
}

func (m *VDelegatedRequestFinished) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VDelegatedRequestFinished) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VDelegatedRequestFinished) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.LatestState != nil {
		{
			size, err := m.LatestState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			if size > 0 {
				i -= size
				i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xea
			}
		}
	}
	{
		size, err := m.DelegationSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	{
		size, err := m.CallIncoming.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	{
		size, err := m.CallOutgoing.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.ResultFlags != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.ResultFlags))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	{
		size, err := m.Callee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.CallFlags != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.CallFlags))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.CallType != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.CallType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(1006))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VDelegatedCallRequest) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 1008)
}

const TypeVDelegatedCallRequestPolymorphID = 1008

func (*VDelegatedCallRequest) GetDefaultPolymorphID() uint64 {
	return 1008
}

func (m *VDelegatedCallRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VDelegatedCallRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VDelegatedCallRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.DelegationSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	{
		size, err := m.CallIncoming.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	{
		size, err := m.CallOutgoing.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.CallFlags != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.CallFlags))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	{
		size, err := m.Callee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(1008))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VDelegatedCallResponse) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 1009)
}

const TypeVDelegatedCallResponsePolymorphID = 1009

func (*VDelegatedCallResponse) GetDefaultPolymorphID() uint64 {
	return 1009
}

func (m *VDelegatedCallResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VDelegatedCallResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VDelegatedCallResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.ResponseDelegationSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	{
		size, err := m.CallIncoming.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	{
		size, err := m.Callee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(1009))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VFindCallRequest) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 1011)
}

const TypeVFindCallRequestPolymorphID = 1011

func (*VFindCallRequest) GetDefaultPolymorphID() uint64 {
	return 1011
}

func (m *VFindCallRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VFindCallRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VFindCallRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.Outgoing.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	{
		size, err := m.Callee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.LookAt != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.LookAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(1011))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VFindCallResponse) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 1012)
}

const TypeVFindCallResponsePolymorphID = 1012

func (*VFindCallResponse) GetDefaultPolymorphID() uint64 {
	return 1012
}

func (m *VFindCallResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VFindCallResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VFindCallResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.CallResult != nil {
		{
			size, err := m.CallResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			if size > 0 {
				i -= size
				i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xc2
			}
		}
	}
	if m.Status != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	{
		size, err := m.Outgoing.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	{
		size, err := m.Callee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.LookedAt != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.LookedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(1012))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VCachedMemoryRequest) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 1013)
}

const TypeVCachedMemoryRequestPolymorphID = 1013

func (*VCachedMemoryRequest) GetDefaultPolymorphID() uint64 {
	return 1013
}

func (m *VCachedMemoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VCachedMemoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VCachedMemoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.StateID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x92
		}
	}
	{
		size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(1013))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VCachedMemoryResponse) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 1014)
}

const TypeVCachedMemoryResponsePolymorphID = 1014

func (*VCachedMemoryResponse) GetDefaultPolymorphID() uint64 {
	return 1014
}

func (m *VCachedMemoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VCachedMemoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VCachedMemoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.Memory.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xb2
		}
	}
	{
		size, err := m.PrevStateID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xaa
		}
	}
	{
		size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.CallStatus != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.CallStatus))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	{
		size, err := m.StateID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x92
		}
	}
	if m.Inactive {
		i--
		if m.Inactive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	{
		size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(1014))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VObjectTranscriptReport) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 1015)
}

const TypeVObjectTranscriptReportPolymorphID = 1015

func (*VObjectTranscriptReport) GetDefaultPolymorphID() uint64 {
	return 1015
}

func (m *VObjectTranscriptReport) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VObjectTranscriptReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VObjectTranscriptReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.ObjectTranscript.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.PendingTranscripts) > 0 {
		for iNdEx := len(m.PendingTranscripts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingTranscripts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xda
		}
	}
	{
		size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xca
		}
	}
	if m.AsOf != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.AsOf))
		i--
		dAtA[i] = 0x70
		i--
		dAtA[i] = 0xc0
	}
	{
		size, err := m.Any.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(1015))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 101501)
}

const TypeVObjectTranscriptReport_TranscriptEntryIncomingRequestPolymorphID = 101501

func (*VObjectTranscriptReport_TranscriptEntryIncomingRequest) GetDefaultPolymorphID() uint64 {
	return 101501
}

func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if len(m.Request) > 0 {
		i -= len(m.Request)
		copy(dAtA[i:], m.Request)
		i--
		dAtA[i] = 132
		i = encodeVarintProtoVnvn(dAtA, i, uint64(len(m.Request)+1))
		i--
		dAtA[i] = 0x70
		i--
		dAtA[i] = 0xd2
	}
	{
		size, err := m.Incoming.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xca
		}
	}
	{
		size, err := m.ObjectMemory.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xc2
		}
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(101501))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VObjectTranscriptReport_TranscriptEntryOutgoingRequest) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 101502)
}

const TypeVObjectTranscriptReport_TranscriptEntryOutgoingRequestPolymorphID = 101502

func (*VObjectTranscriptReport_TranscriptEntryOutgoingRequest) GetDefaultPolymorphID() uint64 {
	return 101502
}

func (m *VObjectTranscriptReport_TranscriptEntryOutgoingRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VObjectTranscriptReport_TranscriptEntryOutgoingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VObjectTranscriptReport_TranscriptEntryOutgoingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.Outgoing.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xc2
		}
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(101502))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VObjectTranscriptReport_TranscriptEntryOutgoingResult) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 101503)
}

const TypeVObjectTranscriptReport_TranscriptEntryOutgoingResultPolymorphID = 101503

func (*VObjectTranscriptReport_TranscriptEntryOutgoingResult) GetDefaultPolymorphID() uint64 {
	return 101503
}

func (m *VObjectTranscriptReport_TranscriptEntryOutgoingResult) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VObjectTranscriptReport_TranscriptEntryOutgoingResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VObjectTranscriptReport_TranscriptEntryOutgoingResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if len(m.CallResult) > 0 {
		i -= len(m.CallResult)
		copy(dAtA[i:], m.CallResult)
		i--
		dAtA[i] = 132
		i = encodeVarintProtoVnvn(dAtA, i, uint64(len(m.CallResult)+1))
		i--
		dAtA[i] = 0x70
		i--
		dAtA[i] = 0xca
	}
	{
		size, err := m.OutgoingResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xc2
		}
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(101503))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VObjectTranscriptReport_TranscriptEntryIncomingResult) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 101504)
}

const TypeVObjectTranscriptReport_TranscriptEntryIncomingResultPolymorphID = 101504

func (*VObjectTranscriptReport_TranscriptEntryIncomingResult) GetDefaultPolymorphID() uint64 {
	return 101504
}

func (m *VObjectTranscriptReport_TranscriptEntryIncomingResult) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VObjectTranscriptReport_TranscriptEntryIncomingResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VObjectTranscriptReport_TranscriptEntryIncomingResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.ObjectState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xca
		}
	}
	{
		size, err := m.IncomingResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xc2
		}
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(101504))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *VObjectTranscriptReport_Transcript) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 0)
}

func (m *VObjectTranscriptReport_Transcript) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VObjectTranscriptReport_Transcript) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VObjectTranscriptReport_Transcript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xc2
		}
	}
	if i < len(dAtA) {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(0))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	return len(dAtA) - i, nil
}

func (m *VObjectValidationReport) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 1016)
}

const TypeVObjectValidationReportPolymorphID = 1016

func (*VObjectValidationReport) GetDefaultPolymorphID() uint64 {
	return 1016
}

func (m *VObjectValidationReport) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *VObjectValidationReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VObjectValidationReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.In != 0 {
		i = encodeVarintProtoVnvn(dAtA, i, uint64(m.In))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	{
		size, err := m.Validated.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x92
		}
	}
	{
		size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnvn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	i = encodeVarintProtoVnvn(dAtA, i, uint64(1016))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func encodeVarintProtoVnvn(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtoVnvn(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func init() {
	RegisterMessageType(1000, "", (*Meta)(nil))
	RegisterMessageType(999999990, "", (*MessageExample)(nil))
	RegisterMessageType(999999990, "Head", (*MessageExample_Head)(nil))
	RegisterMessageType(999999980, "", (*MessageExample2)(nil))
	RegisterMessageType(1001, "", (*VCallRequest)(nil))
	RegisterMessageType(1002, "", (*VCallResult)(nil))
	RegisterMessageType(1003, "", (*VStateRequest)(nil))
	RegisterMessageType(1004, "", (*VStateReport)(nil))
	RegisterMessageType(1006, "", (*VDelegatedRequestFinished)(nil))
	RegisterMessageType(1008, "", (*VDelegatedCallRequest)(nil))
	RegisterMessageType(1009, "", (*VDelegatedCallResponse)(nil))
	RegisterMessageType(1011, "", (*VFindCallRequest)(nil))
	RegisterMessageType(1012, "", (*VFindCallResponse)(nil))
	RegisterMessageType(1013, "", (*VCachedMemoryRequest)(nil))
	RegisterMessageType(1014, "", (*VCachedMemoryResponse)(nil))
	RegisterMessageType(1015, "", (*VObjectTranscriptReport)(nil))
	RegisterMessageType(101501, "", (*VObjectTranscriptReport_TranscriptEntryIncomingRequest)(nil))
	RegisterMessageType(101502, "", (*VObjectTranscriptReport_TranscriptEntryOutgoingRequest)(nil))
	RegisterMessageType(101503, "", (*VObjectTranscriptReport_TranscriptEntryOutgoingResult)(nil))
	RegisterMessageType(101504, "", (*VObjectTranscriptReport_TranscriptEntryIncomingResult)(nil))
	RegisterMessageType(1016, "", (*VObjectValidationReport)(nil))
}

func (m *Meta) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.Payload.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.Sender.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.Receiver.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.Pulse != 0 {
		n += 2 + sovProtoVnvn(uint64(m.Pulse))
	}
	if l = m.ID.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	n += 2 + sovProtoVnvn(1000)
	return n
}

func (m *MessageExample) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.RecordExample.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.MsgParam != 0 {
		n += 2 + sovProtoVnvn(uint64(m.MsgParam))
	}
	l = len(m.MsgBytes)
	if l > 0 {
		l++
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	n += 2 + sovProtoVnvn(999999990)
	return n
}

func (m *MessageExample_Head) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.Str.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.MsgParam != 0 {
		n += 2 + sovProtoVnvn(uint64(m.MsgParam))
	}
	n += 2 + sovProtoVnvn(999999990)
	return n
}

func (m *MessageExample2) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.AnyRecordLazy.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.MsgParam != 0 {
		n += 2 + sovProtoVnvn(uint64(m.MsgParam))
	}
	l = len(m.MsgBytes)
	if l > 0 {
		l++
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	n += 2 + sovProtoVnvn(999999980)
	return n
}

func (m *VCallRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallType != 0 {
		n += 2 + sovProtoVnvn(uint64(m.CallType))
	}
	if m.CallFlags != 0 {
		n += 2 + sovProtoVnvn(uint64(m.CallFlags))
	}
	if m.CallAsOf != 0 {
		n += 2 + sovProtoVnvn(uint64(m.CallAsOf))
	}
	if l = m.Caller.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.Callee.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.CallSiteDeclaration.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	l = len(m.CallSiteMethod)
	if l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.CallSequence != 0 {
		n += 2 + sovProtoVnvn(uint64(m.CallSequence))
	}
	if l = m.CallReason.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.RootTX.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.CallTX.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.ExpenseCenter.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.ResourceCenter.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.DelegationSpec.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.ProducerSignature.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.RegistrarSignature.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.RegistrarDelegationSpec.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.CallRequestFlags != 0 {
		n += 2 + sovProtoVnvn(uint64(m.CallRequestFlags))
	}
	if l = m.KnownCalleeIncoming.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.CallOutgoing.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.TXExpiry != 0 {
		n += 2 + sovProtoVnvn(uint64(m.TXExpiry))
	}
	if l = m.SecurityContext.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.TXContext.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.Arguments.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	n += 2 + sovProtoVnvn(1001)
	return n
}

func (m *VCallResult) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallType != 0 {
		n += 2 + sovProtoVnvn(uint64(m.CallType))
	}
	if m.CallFlags != 0 {
		n += 2 + sovProtoVnvn(uint64(m.CallFlags))
	}
	if m.CallAsOf != 0 {
		n += 2 + sovProtoVnvn(uint64(m.CallAsOf))
	}
	if l = m.Caller.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.Callee.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.ResultFlags != 0 {
		n += 2 + sovProtoVnvn(uint64(m.ResultFlags))
	}
	if l = m.CallOutgoing.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.CallIncoming.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.DelegationSpec.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.CallIncomingResult.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.ProducerSignature.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.RegistrarSignature.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.RegistrarDelegationSpec.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.SecurityContext.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.ReturnArguments.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	n += 2 + sovProtoVnvn(1002)
	return n
}

func (m *VStateRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsOf != 0 {
		n += 2 + sovProtoVnvn(uint64(m.AsOf))
	}
	if l = m.Object.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.RequestedContent != 0 {
		n += 2 + sovProtoVnvn(uint64(m.RequestedContent))
	}
	if l = m.RequestedContentLimit.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.DelegationSpec.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.ProducerSignature.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.CallRequestFlags != 0 {
		n += 2 + sovProtoVnvn(uint64(m.CallRequestFlags))
	}
	n += 2 + sovProtoVnvn(1003)
	return n
}

func (m *VStateReport) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsOf != 0 {
		n += 2 + sovProtoVnvn(uint64(m.AsOf))
	}
	if l = m.Object.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.DelegationSpec.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.UnorderedPendingCount != 0 {
		n += 2 + sovProtoVnvn(uint64(m.UnorderedPendingCount))
	}
	if m.UnorderedPendingEarliestPulse != 0 {
		n += 2 + sovProtoVnvn(uint64(m.UnorderedPendingEarliestPulse))
	}
	if m.OrderedPendingCount != 0 {
		n += 2 + sovProtoVnvn(uint64(m.OrderedPendingCount))
	}
	if m.OrderedPendingEarliestPulse != 0 {
		n += 2 + sovProtoVnvn(uint64(m.OrderedPendingEarliestPulse))
	}
	if m.PreRegisteredQueueCount != 0 {
		n += 2 + sovProtoVnvn(uint64(m.PreRegisteredQueueCount))
	}
	if m.PreRegisteredEarliestPulse != 0 {
		n += 2 + sovProtoVnvn(uint64(m.PreRegisteredEarliestPulse))
	}
	if m.PriorityCallQueueCount != 0 {
		n += 2 + sovProtoVnvn(uint64(m.PriorityCallQueueCount))
	}
	if l = m.LatestValidatedState.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.LatestValidatedCode.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.LatestDirtyState.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.LatestDirtyCode.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.ProvidedContent != nil {
		if l = m.ProvidedContent.ProtoSize(); l > 0 {
			n += 2 + l + sovProtoVnvn(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 2 + sovProtoVnvn(uint64(m.Status))
	}
	n += 2 + sovProtoVnvn(1004)
	return n
}

func (m *VStateReport_ProvidedContentBody) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestValidatedState != nil {
		if l = m.LatestValidatedState.ProtoSize(); l > 0 {
			n += 2 + l + sovProtoVnvn(uint64(l))
		}
	}
	if m.LatestDirtyState != nil {
		if l = m.LatestDirtyState.ProtoSize(); l > 0 {
			n += 2 + l + sovProtoVnvn(uint64(l))
		}
	}
	if m.LatestValidatedCode != nil {
		if l = m.LatestValidatedCode.ProtoSize(); l > 0 {
			n += 2 + l + sovProtoVnvn(uint64(l))
		}
	}
	if m.LatestDirtyCode != nil {
		if l = m.LatestDirtyCode.ProtoSize(); l > 0 {
			n += 2 + l + sovProtoVnvn(uint64(l))
		}
	}
	if len(m.OrderedQueue) > 0 {
		for _, e := range m.OrderedQueue {
			l = e.ProtoSize()
			n += 2 + l + sovProtoVnvn(uint64(l))
		}
	}
	if len(m.UnorderedQueue) > 0 {
		for _, e := range m.UnorderedQueue {
			l = e.ProtoSize()
			n += 2 + l + sovProtoVnvn(uint64(l))
		}
	}
	if n > 0 {
		n += 2 + sovProtoVnvn(0)
	}
	return n
}

func (m *ObjectState) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.Reference.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.Class.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.State.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.Deactivated {
		n += 3
	}
	if n > 0 {
		n += 2 + sovProtoVnvn(0)
	}
	return n
}

func (m *VDelegatedRequestFinished) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallType != 0 {
		n += 2 + sovProtoVnvn(uint64(m.CallType))
	}
	if m.CallFlags != 0 {
		n += 2 + sovProtoVnvn(uint64(m.CallFlags))
	}
	if l = m.Callee.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.ResultFlags != 0 {
		n += 2 + sovProtoVnvn(uint64(m.ResultFlags))
	}
	if l = m.CallOutgoing.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.CallIncoming.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.DelegationSpec.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.LatestState != nil {
		if l = m.LatestState.ProtoSize(); l > 0 {
			n += 2 + l + sovProtoVnvn(uint64(l))
		}
	}
	n += 2 + sovProtoVnvn(1006)
	return n
}

func (m *VDelegatedCallRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.Callee.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.CallFlags != 0 {
		n += 2 + sovProtoVnvn(uint64(m.CallFlags))
	}
	if l = m.CallOutgoing.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.CallIncoming.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.DelegationSpec.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	n += 2 + sovProtoVnvn(1008)
	return n
}

func (m *VDelegatedCallResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.Callee.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.CallIncoming.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.ResponseDelegationSpec.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	n += 2 + sovProtoVnvn(1009)
	return n
}

func (m *VFindCallRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LookAt != 0 {
		n += 2 + sovProtoVnvn(uint64(m.LookAt))
	}
	if l = m.Callee.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.Outgoing.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	n += 2 + sovProtoVnvn(1011)
	return n
}

func (m *VFindCallResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LookedAt != 0 {
		n += 2 + sovProtoVnvn(uint64(m.LookedAt))
	}
	if l = m.Callee.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.Outgoing.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovProtoVnvn(uint64(m.Status))
	}
	if m.CallResult != nil {
		if l = m.CallResult.ProtoSize(); l > 0 {
			n += 2 + l + sovProtoVnvn(uint64(l))
		}
	}
	n += 2 + sovProtoVnvn(1012)
	return n
}

func (m *VCachedMemoryRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.Object.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.StateID.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	n += 2 + sovProtoVnvn(1013)
	return n
}

func (m *VCachedMemoryResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.Object.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.Inactive {
		n += 3
	}
	if l = m.StateID.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.CallStatus != 0 {
		n += 2 + sovProtoVnvn(uint64(m.CallStatus))
	}
	if l = m.Node.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.PrevStateID.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.Memory.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	n += 2 + sovProtoVnvn(1014)
	return n
}

func (m *VObjectTranscriptReport) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.Any.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.AsOf != 0 {
		n += 2 + sovProtoVnvn(uint64(m.AsOf))
	}
	if l = m.Object.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if len(m.PendingTranscripts) > 0 {
		for _, e := range m.PendingTranscripts {
			l = e.ProtoSize()
			n += 2 + l + sovProtoVnvn(uint64(l))
		}
	}
	if l = m.ObjectTranscript.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	n += 2 + sovProtoVnvn(1015)
	return n
}

func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.ObjectMemory.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.Incoming.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	l = len(m.Request)
	if l > 0 {
		l++
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	n += 2 + sovProtoVnvn(101501)
	return n
}

func (m *VObjectTranscriptReport_TranscriptEntryOutgoingRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.Outgoing.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	n += 2 + sovProtoVnvn(101502)
	return n
}

func (m *VObjectTranscriptReport_TranscriptEntryOutgoingResult) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.OutgoingResult.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	l = len(m.CallResult)
	if l > 0 {
		l++
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	n += 2 + sovProtoVnvn(101503)
	return n
}

func (m *VObjectTranscriptReport_TranscriptEntryIncomingResult) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.IncomingResult.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.ObjectState.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	n += 2 + sovProtoVnvn(101504)
	return n
}

func (m *VObjectTranscriptReport_Transcript) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.ProtoSize()
			n += 2 + l + sovProtoVnvn(uint64(l))
		}
	}
	if n > 0 {
		n += 2 + sovProtoVnvn(0)
	}
	return n
}

func (m *VObjectValidationReport) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.Object.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if l = m.Validated.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnvn(uint64(l))
	}
	if m.In != 0 {
		n += 2 + sovProtoVnvn(uint64(m.In))
	}
	n += 2 + sovProtoVnvn(1016)
	return n
}

func sovProtoVnvn(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtoVnvn(x uint64) (n int) {
	return sovProtoVnvn(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Meta) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *Meta) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Meta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Meta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Receiver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pulse", wireType)
			}
			m.Pulse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pulse |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageExample) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *MessageExample) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageExample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageExample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordExample", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecordExample.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1800:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgParam", wireType)
			}
			m.MsgParam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgParam |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1801:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if byteLen > 0 {
				if dAtA[iNdEx] != 132 {
					return ErrExpectedBinaryMarkerProtoVnvn
				}
				iNdEx++
			}
			m.MsgBytes = append(m.MsgBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgBytes == nil {
				m.MsgBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageExample_Head) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *MessageExample_Head) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Head: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Head: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Str.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1800:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgParam", wireType)
			}
			m.MsgParam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgParam |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageExample2) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *MessageExample2) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageExample2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageExample2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyRecordLazy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AnyRecordLazy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1800:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgParam", wireType)
			}
			m.MsgParam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgParam |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1801:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if byteLen > 0 {
				if dAtA[iNdEx] != 132 {
					return ErrExpectedBinaryMarkerProtoVnvn
				}
				iNdEx++
			}
			m.MsgBytes = append(m.MsgBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgBytes == nil {
				m.MsgBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VCallRequest) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VCallRequest) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VCallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VCallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallType", wireType)
			}
			m.CallType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallType |= CallType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallFlags", wireType)
			}
			m.CallFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallFlags |= CallFlags(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallAsOf", wireType)
			}
			m.CallAsOf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallAsOf |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Caller.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Callee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallSiteDeclaration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallSiteDeclaration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallSiteMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallSiteMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallSequence", wireType)
			}
			m.CallSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallSequence |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallReason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallReason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootTX", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RootTX.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallTX", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallTX.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpenseCenter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpenseCenter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceCenter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResourceCenter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProducerSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrarSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegistrarSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrarDelegationSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegistrarDelegationSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallRequestFlags", wireType)
			}
			m.CallRequestFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallRequestFlags |= CallRequestFlags(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KnownCalleeIncoming", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KnownCalleeIncoming.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallOutgoing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallOutgoing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TXExpiry", wireType)
			}
			m.TXExpiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TXExpiry |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SecurityContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TXContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TXContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Arguments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VCallResult) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VCallResult) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VCallResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VCallResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallType", wireType)
			}
			m.CallType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallType |= CallType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallFlags", wireType)
			}
			m.CallFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallFlags |= CallFlags(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallAsOf", wireType)
			}
			m.CallAsOf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallAsOf |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Caller.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Callee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultFlags", wireType)
			}
			m.ResultFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultFlags |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallOutgoing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallOutgoing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallIncoming", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallIncoming.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallIncomingResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallIncomingResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProducerSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrarSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegistrarSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrarDelegationSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegistrarDelegationSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SecurityContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnArguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReturnArguments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VStateRequest) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VStateRequest) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsOf", wireType)
			}
			m.AsOf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsOf |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedContent", wireType)
			}
			m.RequestedContent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestedContent |= StateRequestContentFlags(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedContentLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestedContentLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProducerSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallRequestFlags", wireType)
			}
			m.CallRequestFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallRequestFlags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VStateReport) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VStateReport) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VStateReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VStateReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsOf", wireType)
			}
			m.AsOf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsOf |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnorderedPendingCount", wireType)
			}
			m.UnorderedPendingCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnorderedPendingCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnorderedPendingEarliestPulse", wireType)
			}
			m.UnorderedPendingEarliestPulse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnorderedPendingEarliestPulse |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderedPendingCount", wireType)
			}
			m.OrderedPendingCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderedPendingCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderedPendingEarliestPulse", wireType)
			}
			m.OrderedPendingEarliestPulse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderedPendingEarliestPulse |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreRegisteredQueueCount", wireType)
			}
			m.PreRegisteredQueueCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreRegisteredQueueCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreRegisteredEarliestPulse", wireType)
			}
			m.PreRegisteredEarliestPulse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreRegisteredEarliestPulse |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityCallQueueCount", wireType)
			}
			m.PriorityCallQueueCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriorityCallQueueCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestValidatedState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestValidatedState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestValidatedCode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestValidatedCode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestDirtyState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestDirtyState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestDirtyCode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestDirtyCode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvidedContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProvidedContent == nil {
				m.ProvidedContent = &VStateReport_ProvidedContentBody{}
			}
			if err := m.ProvidedContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= VStateReport_StateStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VStateReport_ProvidedContentBody) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VStateReport_ProvidedContentBody) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvidedContentBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvidedContentBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestValidatedState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestValidatedState == nil {
				m.LatestValidatedState = &ObjectState{}
			}
			if err := m.LatestValidatedState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestDirtyState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestDirtyState == nil {
				m.LatestDirtyState = &ObjectState{}
			}
			if err := m.LatestDirtyState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestValidatedCode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestValidatedCode == nil {
				m.LatestValidatedCode = &ObjectState{}
			}
			if err := m.LatestValidatedCode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestDirtyCode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestDirtyCode == nil {
				m.LatestDirtyCode = &ObjectState{}
			}
			if err := m.LatestDirtyCode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderedQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderedQueue = append(m.OrderedQueue, Reference{})
			if err := m.OrderedQueue[len(m.OrderedQueue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnorderedQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnorderedQueue = append(m.UnorderedQueue, Reference{})
			if err := m.UnorderedQueue[len(m.UnorderedQueue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectState) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *ObjectState) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Class.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deactivated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VDelegatedRequestFinished) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VDelegatedRequestFinished) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VDelegatedRequestFinished: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VDelegatedRequestFinished: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallType", wireType)
			}
			m.CallType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallType |= CallType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallFlags", wireType)
			}
			m.CallFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallFlags |= CallFlags(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Callee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultFlags", wireType)
			}
			m.ResultFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultFlags |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallOutgoing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallOutgoing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallIncoming", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallIncoming.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestState == nil {
				m.LatestState = &ObjectState{}
			}
			if err := m.LatestState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VDelegatedCallRequest) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VDelegatedCallRequest) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VDelegatedCallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VDelegatedCallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Callee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallFlags", wireType)
			}
			m.CallFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallFlags |= CallFlags(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallOutgoing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallOutgoing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallIncoming", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallIncoming.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VDelegatedCallResponse) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VDelegatedCallResponse) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VDelegatedCallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VDelegatedCallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Callee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallIncoming", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallIncoming.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseDelegationSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseDelegationSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VFindCallRequest) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VFindCallRequest) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VFindCallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VFindCallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookAt", wireType)
			}
			m.LookAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LookAt |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Callee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outgoing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Outgoing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VFindCallResponse) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VFindCallResponse) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VFindCallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VFindCallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookedAt", wireType)
			}
			m.LookedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LookedAt |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Callee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outgoing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Outgoing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= VFindCallResponse_CallState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CallResult == nil {
				m.CallResult = &VCallResult{}
			}
			if err := m.CallResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VCachedMemoryRequest) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VCachedMemoryRequest) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VCachedMemoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VCachedMemoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StateID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VCachedMemoryResponse) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VCachedMemoryResponse) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VCachedMemoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VCachedMemoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inactive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inactive = bool(v != 0)
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StateID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallStatus", wireType)
			}
			m.CallStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallStatus |= VCachedMemoryResponse_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevStateID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrevStateID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Memory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VObjectTranscriptReport) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VObjectTranscriptReport) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VObjectTranscriptReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VObjectTranscriptReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Any", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Any.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1800:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsOf", wireType)
			}
			m.AsOf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsOf |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1801:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1803:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTranscripts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingTranscripts = append(m.PendingTranscripts, VObjectTranscriptReport_Transcript{})
			if err := m.PendingTranscripts[len(m.PendingTranscripts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1804:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectTranscript", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectTranscript.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VObjectTranscriptReport_TranscriptEntryIncomingRequest) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TranscriptEntryIncomingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TranscriptEntryIncomingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1800:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMemory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMemory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1801:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Incoming", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Incoming.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1802:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if byteLen > 0 {
				if dAtA[iNdEx] != 132 {
					return ErrExpectedBinaryMarkerProtoVnvn
				}
				iNdEx++
			}
			m.Request = append(m.Request[:0], dAtA[iNdEx:postIndex]...)
			if m.Request == nil {
				m.Request = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VObjectTranscriptReport_TranscriptEntryOutgoingRequest) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VObjectTranscriptReport_TranscriptEntryOutgoingRequest) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TranscriptEntryOutgoingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TranscriptEntryOutgoingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1800:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outgoing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Outgoing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VObjectTranscriptReport_TranscriptEntryOutgoingResult) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VObjectTranscriptReport_TranscriptEntryOutgoingResult) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TranscriptEntryOutgoingResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TranscriptEntryOutgoingResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1800:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutgoingResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1801:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if byteLen > 0 {
				if dAtA[iNdEx] != 132 {
					return ErrExpectedBinaryMarkerProtoVnvn
				}
				iNdEx++
			}
			m.CallResult = append(m.CallResult[:0], dAtA[iNdEx:postIndex]...)
			if m.CallResult == nil {
				m.CallResult = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VObjectTranscriptReport_TranscriptEntryIncomingResult) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VObjectTranscriptReport_TranscriptEntryIncomingResult) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TranscriptEntryIncomingResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TranscriptEntryIncomingResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1800:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomingResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncomingResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1801:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VObjectTranscriptReport_Transcript) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VObjectTranscriptReport_Transcript) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transcript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transcript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1800:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, Any{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VObjectValidationReport) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnvn)
}
func (m *VObjectValidationReport) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VObjectValidationReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VObjectValidationReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Validated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			m.In = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.In |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnvn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnvn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtoVnvn(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtoVnvn
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoVnvn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtoVnvn
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtoVnvn
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtoVnvn
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtoVnvn        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtoVnvn          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtoVnvn = fmt.Errorf("proto: unexpected end of group")
	ErrExpectedBinaryMarkerProtoVnvn = fmt.Errorf("proto: binary marker was expected")
)
