// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto_legacy.proto

package rms

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PulseProto struct {
	PulseNumber      PulseNumber `protobuf:"varint,1,opt,name=PulseNumber,proto3,casttype=PulseNumber" json:"PulseNumber"`
	PrevPulseNumber  PulseNumber `protobuf:"varint,2,opt,name=PrevPulseNumber,proto3,casttype=PulseNumber" json:"PrevPulseNumber"`
	NextPulseNumber  PulseNumber `protobuf:"varint,3,opt,name=NextPulseNumber,proto3,casttype=PulseNumber" json:"NextPulseNumber"`
	PulseTimestamp   int64       `protobuf:"varint,4,opt,name=PulseTimestamp,proto3" json:"PulseTimestamp,omitempty"`
	EpochPulseNumber int32       `protobuf:"varint,5,opt,name=EpochPulseNumber,proto3" json:"EpochPulseNumber,omitempty"`
	OriginID         []byte      `protobuf:"bytes,6,opt,name=OriginID,proto3" json:"OriginID,omitempty"`
	Entropy          Entropy     `protobuf:"bytes,7,opt,name=Entropy,proto3,customtype=Entropy" json:"Entropy"`
}

func (m *PulseProto) Reset()         { *m = PulseProto{} }
func (m *PulseProto) String() string { return proto.CompactTextString(m) }
func (*PulseProto) ProtoMessage()    {}
func (*PulseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed8d6024149e2f7b, []int{0}
}
func (m *PulseProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PulseProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PulseProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseProto.Merge(m, src)
}
func (m *PulseProto) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PulseProto) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseProto.DiscardUnknown(m)
}

var xxx_messageInfo_PulseProto proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PulseProto)(nil), "rms.PulseProto")
}

func init() { proto.RegisterFile("proto_legacy.proto", fileDescriptor_ed8d6024149e2f7b) }

var fileDescriptor_ed8d6024149e2f7b = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0x8f, 0xcf, 0x49, 0x4d, 0x4f, 0x4c, 0xae, 0xd4, 0x03, 0x73, 0x84, 0x98, 0x8b, 0x72, 0x8b,
	0xa5, 0x74, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xd3,
	0xf3, 0xf5, 0xc1, 0x72, 0x49, 0xa5, 0x69, 0x60, 0x1e, 0x98, 0x03, 0x66, 0x41, 0xf4, 0x28, 0xdd,
	0x61, 0xe2, 0xe2, 0x0a, 0x28, 0xcd, 0x29, 0x4e, 0x0d, 0x00, 0x1b, 0x61, 0xca, 0xc5, 0x0d, 0xe6,
	0xf9, 0x95, 0xe6, 0x26, 0xa5, 0x16, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x3a, 0x09, 0x9f, 0xb8,
	0x27, 0xcf, 0xf0, 0xeb, 0x9e, 0x3c, 0xb2, 0x54, 0x10, 0x32, 0x47, 0xc8, 0x96, 0x8b, 0x3f, 0xa0,
	0x28, 0xb5, 0x0c, 0x59, 0x2b, 0x13, 0x6e, 0xad, 0xe8, 0x6a, 0x41, 0xda, 0xfd, 0x52, 0x2b, 0x4a,
	0x90, 0xb5, 0x33, 0xe3, 0xd1, 0x8e, 0xa6, 0x56, 0x48, 0x8d, 0x8b, 0x0f, 0xcc, 0x0d, 0xc9, 0xcc,
	0x4d, 0x2d, 0x2e, 0x49, 0xcc, 0x2d, 0x90, 0x60, 0x51, 0x60, 0xd4, 0x60, 0x0e, 0x42, 0x13, 0x15,
	0xd2, 0xe2, 0x12, 0x70, 0x2d, 0xc8, 0x4f, 0xce, 0x40, 0xb6, 0x87, 0x55, 0x81, 0x51, 0x83, 0x35,
	0x08, 0x43, 0x5c, 0x48, 0x8a, 0x8b, 0xc3, 0xbf, 0x28, 0x33, 0x3d, 0x33, 0xcf, 0xd3, 0x45, 0x82,
	0x4d, 0x81, 0x51, 0x83, 0x27, 0x08, 0xce, 0x17, 0xd2, 0xe4, 0x62, 0x77, 0xcd, 0x2b, 0x29, 0xca,
	0x2f, 0xa8, 0x94, 0x60, 0x07, 0x49, 0x39, 0xf1, 0x83, 0x9c, 0x79, 0xeb, 0x9e, 0x3c, 0x4c, 0x38,
	0x08, 0xc6, 0x70, 0x32, 0x38, 0xf1, 0x50, 0x8e, 0xe1, 0xc3, 0x43, 0x39, 0xc6, 0x1f, 0x0f, 0xe5,
	0x18, 0x56, 0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x1b, 0x8f,
	0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x98, 0xf0, 0x58, 0x8e, 0x61, 0xc1, 0x63, 0x39, 0xc6, 0x0b,
	0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x48, 0x62, 0x03, 0xc7, 0x8b, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0x10, 0xe5, 0xcb, 0x63, 0xe1, 0x01, 0x00, 0x00,
}

func (this *PulseProto) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PulseProto)
	if !ok {
		that2, ok := that.(PulseProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PulseNumber != that1.PulseNumber {
		return false
	}
	if this.PrevPulseNumber != that1.PrevPulseNumber {
		return false
	}
	if this.NextPulseNumber != that1.NextPulseNumber {
		return false
	}
	if this.PulseTimestamp != that1.PulseTimestamp {
		return false
	}
	if this.EpochPulseNumber != that1.EpochPulseNumber {
		return false
	}
	if !bytes.Equal(this.OriginID, that1.OriginID) {
		return false
	}
	if !this.Entropy.Equal(that1.Entropy) {
		return false
	}
	return true
}
func (this *PulseProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&rms.PulseProto{")
	s = append(s, "PulseNumber: "+fmt.Sprintf("%#v", this.PulseNumber)+",\n")
	s = append(s, "PrevPulseNumber: "+fmt.Sprintf("%#v", this.PrevPulseNumber)+",\n")
	s = append(s, "NextPulseNumber: "+fmt.Sprintf("%#v", this.NextPulseNumber)+",\n")
	s = append(s, "PulseTimestamp: "+fmt.Sprintf("%#v", this.PulseTimestamp)+",\n")
	s = append(s, "EpochPulseNumber: "+fmt.Sprintf("%#v", this.EpochPulseNumber)+",\n")
	s = append(s, "OriginID: "+fmt.Sprintf("%#v", this.OriginID)+",\n")
	s = append(s, "Entropy: "+fmt.Sprintf("%#v", this.Entropy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProtoLegacy(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PulseProto) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *PulseProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PulseProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size := m.Entropy.ProtoSize()
		i -= size
		if _, err := m.Entropy.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProtoLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.OriginID) > 0 {
		i -= len(m.OriginID)
		copy(dAtA[i:], m.OriginID)
		i = encodeVarintProtoLegacy(dAtA, i, uint64(len(m.OriginID)))
		i--
		dAtA[i] = 0x32
	}
	if m.EpochPulseNumber != 0 {
		i = encodeVarintProtoLegacy(dAtA, i, uint64(m.EpochPulseNumber))
		i--
		dAtA[i] = 0x28
	}
	if m.PulseTimestamp != 0 {
		i = encodeVarintProtoLegacy(dAtA, i, uint64(m.PulseTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.NextPulseNumber != 0 {
		i = encodeVarintProtoLegacy(dAtA, i, uint64(m.NextPulseNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.PrevPulseNumber != 0 {
		i = encodeVarintProtoLegacy(dAtA, i, uint64(m.PrevPulseNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.PulseNumber != 0 {
		i = encodeVarintProtoLegacy(dAtA, i, uint64(m.PulseNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtoLegacy(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtoLegacy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *PulseProto) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PulseNumber != 0 {
		n += 1 + sovProtoLegacy(uint64(m.PulseNumber))
	}
	if m.PrevPulseNumber != 0 {
		n += 1 + sovProtoLegacy(uint64(m.PrevPulseNumber))
	}
	if m.NextPulseNumber != 0 {
		n += 1 + sovProtoLegacy(uint64(m.NextPulseNumber))
	}
	if m.PulseTimestamp != 0 {
		n += 1 + sovProtoLegacy(uint64(m.PulseTimestamp))
	}
	if m.EpochPulseNumber != 0 {
		n += 1 + sovProtoLegacy(uint64(m.EpochPulseNumber))
	}
	l = len(m.OriginID)
	if l > 0 {
		n += 1 + l + sovProtoLegacy(uint64(l))
	}
	l = m.Entropy.ProtoSize()
	n += 1 + l + sovProtoLegacy(uint64(l))
	return n
}

func sovProtoLegacy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtoLegacy(x uint64) (n int) {
	return sovProtoLegacy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PulseProto) Unmarshal(dAtA []byte) error {
	_, err := m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacy)
	return err
}
func (m *PulseProto) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) (int, error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		err := func() error {
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return fmt.Errorf("proto: PulseProto: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return fmt.Errorf("proto: PulseProto: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field PulseNumber", wireType)
				}
				m.PulseNumber = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					m.PulseNumber |= PulseNumber(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field PrevPulseNumber", wireType)
				}
				m.PrevPulseNumber = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					m.PrevPulseNumber |= PulseNumber(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field NextPulseNumber", wireType)
				}
				m.NextPulseNumber = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					m.NextPulseNumber |= PulseNumber(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field PulseTimestamp", wireType)
				}
				m.PulseTimestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					m.PulseTimestamp |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return fmt.Errorf("proto: wrong wireType = %d for field EpochPulseNumber", wireType)
				}
				m.EpochPulseNumber = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					m.EpochPulseNumber |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field OriginID", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return ErrInvalidLengthProtoLegacy
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacy
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.OriginID = append(m.OriginID[:0], dAtA[iNdEx:postIndex]...)
				if m.OriginID == nil {
					m.OriginID = []byte{}
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Entropy", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLegacy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return ErrInvalidLengthProtoLegacy
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return ErrInvalidLengthProtoLegacy
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if err := m.Entropy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := skipFn(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					l = iNdEx
					break
				}
				if skippy == 0 {
					if skippy, err = skipProtoLegacy(dAtA[iNdEx:]); err != nil {
						return err
					}
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthProtoLegacy
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += skippy
			}
			return nil
		}()
		if err != nil {
			return preIndex, err
		}
	}

	if iNdEx > l {
		return iNdEx, io.ErrUnexpectedEOF
	}
	return iNdEx, nil
}
func skipProtoLegacy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtoLegacy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtoLegacy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtoLegacy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtoLegacy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtoLegacy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtoLegacy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtoLegacy = fmt.Errorf("proto: unexpected end of group")
	ErrExpectedBinaryMarkerProtoLegacy = fmt.Errorf("proto: binary marker was expected")
)
