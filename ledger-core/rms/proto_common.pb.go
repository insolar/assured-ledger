// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto_common.proto

package rms

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/insolar/assured-ledger/ledger-core/insproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CallType int32

const (
	CallTypeInvalid     CallType = 0
	CallTypeInboundAPI  CallType = 1
	CallTypeOutboundAPI CallType = 2
	CallTypeMethod      CallType = 3
	CallTypeConstructor CallType = 4
	CallTypeNotify      CallType = 5
	CallTypeSAGA        CallType = 6
	CallTypeParallel    CallType = 7
	CallTypeSchedule    CallType = 8
)

var CallType_name = map[int32]string{
	0: "CallTypeInvalid",
	1: "CallTypeInboundAPI",
	2: "CallTypeOutboundAPI",
	3: "CallTypeMethod",
	4: "CallTypeConstructor",
	5: "CallTypeNotify",
	6: "CallTypeSAGA",
	7: "CallTypeParallel",
	8: "CallTypeSchedule",
}

var CallType_value = map[string]int32{
	"CallTypeInvalid":     0,
	"CallTypeInboundAPI":  1,
	"CallTypeOutboundAPI": 2,
	"CallTypeMethod":      3,
	"CallTypeConstructor": 4,
	"CallTypeNotify":      5,
	"CallTypeSAGA":        6,
	"CallTypeParallel":    7,
	"CallTypeSchedule":    8,
}

func (x CallType) String() string {
	return proto.EnumName(CallType_name, int32(x))
}

func (CallType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_05bf5807c45a1c34, []int{0}
}

type CallDelegationToken struct {
	TokenTypeAndFlags CallDelegationTokenType `protobuf:"varint,20,opt,name=TokenTypeAndFlags,proto3,casttype=CallDelegationTokenType" json:"TokenTypeAndFlags"`
	Approver          Reference               `protobuf:"bytes,21,opt,name=Approver,proto3" json:"Approver"`
	DelegateTo        Reference               `protobuf:"bytes,22,opt,name=DelegateTo,proto3" json:"DelegateTo"`
	PulseNumber       PulseNumber             `protobuf:"varint,23,opt,name=PulseNumber,proto3,casttype=PulseNumber" json:"PulseNumber"`
	Callee            Reference               `protobuf:"bytes,24,opt,name=Callee,proto3" json:"Callee"`
	Caller            Reference               `protobuf:"bytes,25,opt,name=Caller,proto3" json:"Caller"`
	Outgoing          Reference               `protobuf:"bytes,26,opt,name=Outgoing,proto3" json:"Outgoing"`
	ApproverSignature Binary                  `protobuf:"bytes,27,opt,name=ApproverSignature,proto3" json:"ApproverSignature"`
}

func (m *CallDelegationToken) Reset()         { *m = CallDelegationToken{} }
func (m *CallDelegationToken) String() string { return proto.CompactTextString(m) }
func (*CallDelegationToken) ProtoMessage()    {}
func (*CallDelegationToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_05bf5807c45a1c34, []int{0}
}
func (m *CallDelegationToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallDelegationToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CallDelegationToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallDelegationToken.Merge(m, src)
}
func (m *CallDelegationToken) XXX_Size() int {
	return m.ProtoSize()
}
func (m *CallDelegationToken) XXX_DiscardUnknown() {
	xxx_messageInfo_CallDelegationToken.DiscardUnknown(m)
}

var xxx_messageInfo_CallDelegationToken proto.InternalMessageInfo

func (m *CallDelegationToken) GetTokenTypeAndFlags() CallDelegationTokenType {
	if m != nil {
		return m.TokenTypeAndFlags
	}
	return 0
}

func (m *CallDelegationToken) GetApprover() Reference {
	if m != nil {
		return m.Approver
	}
	return Reference{}
}

func (m *CallDelegationToken) GetDelegateTo() Reference {
	if m != nil {
		return m.DelegateTo
	}
	return Reference{}
}

func (m *CallDelegationToken) GetPulseNumber() PulseNumber {
	if m != nil {
		return m.PulseNumber
	}
	return 0
}

func (m *CallDelegationToken) GetCallee() Reference {
	if m != nil {
		return m.Callee
	}
	return Reference{}
}

func (m *CallDelegationToken) GetCaller() Reference {
	if m != nil {
		return m.Caller
	}
	return Reference{}
}

func (m *CallDelegationToken) GetOutgoing() Reference {
	if m != nil {
		return m.Outgoing
	}
	return Reference{}
}

func (m *CallDelegationToken) GetApproverSignature() Binary {
	if m != nil {
		return m.ApproverSignature
	}
	return Binary{}
}

func init() {
	proto.RegisterEnum("rms.CallType", CallType_name, CallType_value)
	proto.RegisterType((*CallDelegationToken)(nil), "rms.CallDelegationToken")
}

func init() { proto.RegisterFile("proto_common.proto", fileDescriptor_05bf5807c45a1c34) }

var fileDescriptor_05bf5807c45a1c34 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0xf4, 0x27, 0x57, 0x28, 0xee, 0xa5, 0x34, 0x26, 0x48, 0x76, 0xc5, 0x54, 0x21,
	0x92, 0x20, 0x7e, 0x2c, 0x2c, 0x90, 0x14, 0x01, 0x1d, 0xd2, 0x46, 0x49, 0xc4, 0x8a, 0x1c, 0xfb,
	0xc5, 0x39, 0x61, 0xdf, 0x45, 0x77, 0xe7, 0x4a, 0xf9, 0x17, 0x98, 0x10, 0x5b, 0x32, 0x31, 0x22,
	0x46, 0xfe, 0x02, 0xc6, 0x6c, 0x64, 0x0c, 0x4b, 0x45, 0x93, 0x85, 0x11, 0x31, 0x76, 0x42, 0x76,
	0xec, 0x60, 0xa9, 0x28, 0x4c, 0x7e, 0xef, 0xfb, 0x3e, 0xdf, 0x77, 0xef, 0x9d, 0x6d, 0x4c, 0x7a,
	0x82, 0x2b, 0xfe, 0xc6, 0xe1, 0x41, 0xc0, 0x59, 0x29, 0x4e, 0xc8, 0x8a, 0x08, 0x64, 0xa1, 0xe8,
	0x51, 0xd5, 0x0d, 0xdb, 0x25, 0x87, 0x07, 0x65, 0x8f, 0x7b, 0xbc, 0x1c, 0xd7, 0xda, 0x61, 0x27,
	0xce, 0xe2, 0x24, 0x8e, 0xe6, 0x9e, 0xc2, 0xb3, 0x0c, 0x4e, 0x99, 0xe4, 0xbe, 0x2d, 0xca, 0xb6,
	0x94, 0xa1, 0x00, 0xb7, 0xe8, 0x83, 0xeb, 0x81, 0x28, 0xcf, 0x1f, 0x45, 0x87, 0x0b, 0x88, 0x90,
	0x79, 0x0b, 0xca, 0x64, 0xd2, 0xe1, 0xaa, 0x08, 0x92, 0xf0, 0xce, 0xf7, 0x15, 0x9c, 0x3b, 0xb4,
	0x7d, 0xff, 0x39, 0xf8, 0xe0, 0xd9, 0x8a, 0x72, 0xd6, 0xe2, 0x6f, 0x81, 0x91, 0x1a, 0xde, 0x89,
	0x83, 0x56, 0xbf, 0x07, 0x15, 0xe6, 0xbe, 0xf0, 0x6d, 0x4f, 0x1a, 0xbb, 0xfb, 0xe8, 0xe0, 0x7a,
	0xd5, 0x1a, 0x9d, 0x59, 0xda, 0xc5, 0x99, 0x95, 0xff, 0x87, 0x2f, 0xc2, 0x1b, 0x97, 0x9d, 0xe4,
	0x3e, 0xde, 0xac, 0xf4, 0x7a, 0x82, 0x9f, 0x82, 0x30, 0x6e, 0xee, 0xa3, 0x83, 0xad, 0x07, 0xdb,
	0xa5, 0x68, 0x88, 0x06, 0x74, 0x40, 0x00, 0x73, 0xa0, 0xba, 0x1a, 0x75, 0x6d, 0x2c, 0x28, 0xf2,
	0x08, 0xe3, 0xa4, 0x37, 0xb4, 0xb8, 0xb1, 0xb7, 0xc4, 0x93, 0xe1, 0xc8, 0x63, 0xbc, 0x55, 0x0f,
	0x7d, 0x09, 0xc7, 0x61, 0xd0, 0x06, 0x61, 0xe4, 0xe3, 0x81, 0x73, 0xc9, 0xc0, 0xd9, 0x52, 0x23,
	0x9b, 0x90, 0x7b, 0x78, 0x3d, 0x5a, 0x06, 0xc0, 0x30, 0x96, 0x1c, 0x94, 0x30, 0x0b, 0x5a, 0x18,
	0xb7, 0xfe, 0x4b, 0x8b, 0x68, 0xf5, 0x93, 0x50, 0x79, 0x9c, 0x32, 0xcf, 0x28, 0x2c, 0x5b, 0x3d,
	0xa5, 0xc8, 0x53, 0xbc, 0x93, 0x5e, 0x43, 0x93, 0x7a, 0xcc, 0x56, 0xa1, 0x00, 0xe3, 0x76, 0x6c,
	0xdd, 0x8a, 0xad, 0x55, 0xca, 0x6c, 0xd1, 0x4f, 0x7c, 0x97, 0xd9, 0x27, 0x6b, 0x5f, 0x27, 0xd6,
	0xef, 0x8d, 0xbb, 0xdf, 0x10, 0xde, 0x8c, 0x86, 0x88, 0xde, 0x04, 0xc9, 0xe1, 0x1b, 0x69, 0x7c,
	0xc4, 0x4e, 0x6d, 0x9f, 0xba, 0xba, 0x46, 0xf6, 0x30, 0xf9, 0x2b, 0xb6, 0x79, 0xc8, 0xdc, 0x4a,
	0xfd, 0x48, 0x47, 0x24, 0x3f, 0xff, 0x28, 0x22, 0xfd, 0x24, 0x54, 0x8b, 0xc2, 0x15, 0x42, 0xf0,
	0x76, 0x5a, 0xa8, 0x81, 0xea, 0x72, 0x57, 0x5f, 0xc9, 0xc2, 0x87, 0x9c, 0x49, 0x25, 0x42, 0x47,
	0x71, 0xa1, 0xaf, 0x66, 0xe1, 0x63, 0xae, 0x68, 0xa7, 0xaf, 0xaf, 0x11, 0x1d, 0x5f, 0x4b, 0xb5,
	0x66, 0xe5, 0x65, 0x45, 0x5f, 0x27, 0xbb, 0x58, 0x4f, 0x95, 0xba, 0x2d, 0xa2, 0x3b, 0xf3, 0xf5,
	0x8d, 0xac, 0xda, 0x74, 0xba, 0xe0, 0x86, 0x3e, 0xe8, 0x9b, 0xd5, 0xfe, 0xe8, 0xdc, 0x44, 0xe3,
	0x73, 0x53, 0xfb, 0x34, 0x35, 0xd1, 0x68, 0x6a, 0xa2, 0xf1, 0xd4, 0x44, 0x93, 0xa9, 0x89, 0x7e,
	0x4c, 0x4d, 0xed, 0xfd, 0xcc, 0xd4, 0x3e, 0xce, 0x4c, 0x34, 0x9e, 0x99, 0xda, 0x64, 0x66, 0x6a,
	0x3f, 0x07, 0x16, 0xfa, 0x35, 0xb0, 0xd0, 0xc5, 0xc0, 0xda, 0xa8, 0x81, 0x94, 0xb6, 0x07, 0xef,
	0x86, 0xd6, 0xea, 0x2b, 0xb0, 0xdd, 0x0f, 0x43, 0x6b, 0xed, 0x35, 0x95, 0x54, 0x7d, 0x1e, 0x5a,
	0xb9, 0x06, 0x78, 0x54, 0x2a, 0x10, 0x09, 0x13, 0x1d, 0xf9, 0x65, 0x68, 0x6d, 0x27, 0x69, 0x8c,
	0x71, 0xd1, 0x5e, 0x8f, 0xff, 0x97, 0x87, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5b, 0xf4, 0xea,
	0x2b, 0xc6, 0x03, 0x00, 0x00,
}

func (this *CallDelegationToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CallDelegationToken)
	if !ok {
		that2, ok := that.(CallDelegationToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TokenTypeAndFlags != that1.TokenTypeAndFlags {
		return false
	}
	if !this.Approver.Equal(&that1.Approver) {
		return false
	}
	if !this.DelegateTo.Equal(&that1.DelegateTo) {
		return false
	}
	if this.PulseNumber != that1.PulseNumber {
		return false
	}
	if !this.Callee.Equal(&that1.Callee) {
		return false
	}
	if !this.Caller.Equal(&that1.Caller) {
		return false
	}
	if !this.Outgoing.Equal(&that1.Outgoing) {
		return false
	}
	if !this.ApproverSignature.Equal(&that1.ApproverSignature) {
		return false
	}
	return true
}
func (m *CallDelegationToken) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 1010)
}

const TypeCallDelegationTokenPolymorphID = 1010

func (*CallDelegationToken) GetDefaultPolymorphID() uint64 {
	return 1010
}

func (m *CallDelegationToken) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *CallDelegationToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallDelegationToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.ApproverSignature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoCommon(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	{
		size, err := m.Outgoing.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoCommon(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	{
		size, err := m.Caller.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoCommon(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	{
		size, err := m.Callee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoCommon(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.PulseNumber != 0 {
		i = encodeVarintProtoCommon(dAtA, i, uint64(m.PulseNumber))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	{
		size, err := m.DelegateTo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoCommon(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	{
		size, err := m.Approver.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoCommon(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.TokenTypeAndFlags != 0 {
		i = encodeVarintProtoCommon(dAtA, i, uint64(m.TokenTypeAndFlags))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	i = encodeVarintProtoCommon(dAtA, i, uint64(1010))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func encodeVarintProtoCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtoCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func init() {
	RegisterMessageType(1010, "", (*CallDelegationToken)(nil))
}

func (m *CallDelegationToken) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenTypeAndFlags != 0 {
		n += 2 + sovProtoCommon(uint64(m.TokenTypeAndFlags))
	}
	if l = m.Approver.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoCommon(uint64(l))
	}
	if l = m.DelegateTo.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoCommon(uint64(l))
	}
	if m.PulseNumber != 0 {
		n += 2 + sovProtoCommon(uint64(m.PulseNumber))
	}
	if l = m.Callee.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoCommon(uint64(l))
	}
	if l = m.Caller.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoCommon(uint64(l))
	}
	if l = m.Outgoing.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoCommon(uint64(l))
	}
	if l = m.ApproverSignature.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoCommon(uint64(l))
	}
	n += 2 + sovProtoCommon(1010)
	return n
}

func sovProtoCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtoCommon(x uint64) (n int) {
	return sovProtoCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CallDelegationToken) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoCommon)
}
func (m *CallDelegationToken) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallDelegationToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallDelegationToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenTypeAndFlags", wireType)
			}
			m.TokenTypeAndFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenTypeAndFlags |= CallDelegationTokenType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Approver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateTo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegateTo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PulseNumber", wireType)
			}
			m.PulseNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PulseNumber |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Callee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Caller.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outgoing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Outgoing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproverSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApproverSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoCommon(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtoCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtoCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtoCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtoCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtoCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtoCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtoCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtoCommon = fmt.Errorf("proto: unexpected end of group")
	ErrExpectedBinaryMarkerProtoCommon = fmt.Errorf("proto: binary marker was expected")
)
