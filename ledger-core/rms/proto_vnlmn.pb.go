// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto_vnlmn.proto

package rms

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/insolar/assured-ledger/ledger-core/insproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RegistrationFlags int32

const (
	RegistrationFlags_Undefined RegistrationFlags = 0
	RegistrationFlags_Fast      RegistrationFlags = 1
	RegistrationFlags_Safe      RegistrationFlags = 2
	RegistrationFlags_FastSafe  RegistrationFlags = 3
)

var RegistrationFlags_name = map[int32]string{
	0: "Undefined",
	1: "Fast",
	2: "Safe",
	3: "FastSafe",
}

var RegistrationFlags_value = map[string]int32{
	"Undefined": 0,
	"Fast":      1,
	"Safe":      2,
	"FastSafe":  3,
}

func (x RegistrationFlags) String() string {
	return proto.EnumName(RegistrationFlags_name, int32(x))
}

func (RegistrationFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b0afd09ea099d9b9, []int{0}
}

type LRegisterRequest struct {
	AnyRecordLazy      `protobuf:"bytes,19,opt,name=Record,proto3,embedded=Record" json:"Record"`
	Flags              RegistrationFlags `protobuf:"varint,1800,opt,name=Flags,proto3,enum=rms.RegistrationFlags" json:"Flags"`
	AnticipatedRef     Reference         `protobuf:"bytes,1801,opt,name=AnticipatedRef,proto3" json:"AnticipatedRef"`
	OverrideRecordType uint32            `protobuf:"varint,1816,opt,name=OverrideRecordType,proto3" json:"OverrideRecordType"`
	OverridePrevRef    Reference         `protobuf:"bytes,1824,opt,name=OverridePrevRef,proto3" json:"OverridePrevRef"`
	OverrideRootRef    Reference         `protobuf:"bytes,1825,opt,name=OverrideRootRef,proto3" json:"OverrideRootRef"`
	OverrideReasonRef  Reference         `protobuf:"bytes,1826,opt,name=OverrideReasonRef,proto3" json:"OverrideReasonRef"`
	ProducerSignature  Binary            `protobuf:"bytes,1839,opt,name=ProducerSignature,proto3" json:"ProducerSignature"`
	ProducedBy         Reference         `protobuf:"bytes,1840,opt,name=ProducedBy,proto3" json:"ProducedBy"`
}

func (m *LRegisterRequest) Reset()         { *m = LRegisterRequest{} }
func (m *LRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*LRegisterRequest) ProtoMessage()    {}
func (*LRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0afd09ea099d9b9, []int{0}
}
func (m *LRegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LRegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LRegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LRegisterRequest.Merge(m, src)
}
func (m *LRegisterRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *LRegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LRegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LRegisterRequest proto.InternalMessageInfo

func (m *LRegisterRequest) GetFlags() RegistrationFlags {
	if m != nil {
		return m.Flags
	}
	return RegistrationFlags_Undefined
}

func (m *LRegisterRequest) GetAnticipatedRef() Reference {
	if m != nil {
		return m.AnticipatedRef
	}
	return Reference{}
}

func (m *LRegisterRequest) GetOverrideRecordType() uint32 {
	if m != nil {
		return m.OverrideRecordType
	}
	return 0
}

func (m *LRegisterRequest) GetOverridePrevRef() Reference {
	if m != nil {
		return m.OverridePrevRef
	}
	return Reference{}
}

func (m *LRegisterRequest) GetOverrideRootRef() Reference {
	if m != nil {
		return m.OverrideRootRef
	}
	return Reference{}
}

func (m *LRegisterRequest) GetOverrideReasonRef() Reference {
	if m != nil {
		return m.OverrideReasonRef
	}
	return Reference{}
}

func (m *LRegisterRequest) GetProducerSignature() Binary {
	if m != nil {
		return m.ProducerSignature
	}
	return Binary{}
}

func (m *LRegisterRequest) GetProducedBy() Reference {
	if m != nil {
		return m.ProducedBy
	}
	return Reference{}
}

type LRegisterResponse struct {
	Flags              RegistrationFlags `protobuf:"varint,1800,opt,name=Flags,proto3,enum=rms.RegistrationFlags" json:"Flags"`
	AnticipatedRef     Reference         `protobuf:"bytes,1801,opt,name=AnticipatedRef,proto3" json:"AnticipatedRef"`
	RegistrarSignature Binary            `protobuf:"bytes,1805,opt,name=RegistrarSignature,proto3" json:"RegistrarSignature"`
}

func (m *LRegisterResponse) Reset()         { *m = LRegisterResponse{} }
func (m *LRegisterResponse) String() string { return proto.CompactTextString(m) }
func (*LRegisterResponse) ProtoMessage()    {}
func (*LRegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0afd09ea099d9b9, []int{1}
}
func (m *LRegisterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LRegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LRegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LRegisterResponse.Merge(m, src)
}
func (m *LRegisterResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *LRegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LRegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LRegisterResponse proto.InternalMessageInfo

func (m *LRegisterResponse) GetFlags() RegistrationFlags {
	if m != nil {
		return m.Flags
	}
	return RegistrationFlags_Undefined
}

func (m *LRegisterResponse) GetAnticipatedRef() Reference {
	if m != nil {
		return m.AnticipatedRef
	}
	return Reference{}
}

func (m *LRegisterResponse) GetRegistrarSignature() Binary {
	if m != nil {
		return m.RegistrarSignature
	}
	return Binary{}
}

func init() {
	proto.RegisterEnum("rms.RegistrationFlags", RegistrationFlags_name, RegistrationFlags_value)
	proto.RegisterType((*LRegisterRequest)(nil), "rms.LRegisterRequest")
	proto.RegisterType((*LRegisterResponse)(nil), "rms.LRegisterResponse")
}

func init() { proto.RegisterFile("proto_vnlmn.proto", fileDescriptor_b0afd09ea099d9b9) }

var fileDescriptor_b0afd09ea099d9b9 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x93, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0x80, 0x77, 0x6c, 0x52, 0x93, 0xa9, 0x5d, 0x37, 0x53, 0x95, 0xa5, 0x87, 0xdd, 0xd2, 0x53,
	0x11, 0xda, 0x40, 0x4b, 0x2f, 0x82, 0xd8, 0xae, 0x52, 0xa4, 0xb4, 0x58, 0xb6, 0xea, 0x55, 0xa6,
	0xbb, 0x2f, 0xeb, 0x40, 0x32, 0x93, 0xce, 0xec, 0x16, 0xe2, 0x2f, 0xa8, 0x82, 0x20, 0x1e, 0xc4,
	0xe6, 0x54, 0x3d, 0x89, 0x17, 0x8b, 0xfe, 0x01, 0x8f, 0x3d, 0xf6, 0xe0, 0x21, 0x5e, 0x8a, 0x26,
	0x17, 0x7f, 0x43, 0x4f, 0xb2, 0xb3, 0x1b, 0x0c, 0x4d, 0x0d, 0xde, 0x3c, 0xe5, 0xbd, 0x37, 0xdf,
	0xfb, 0xde, 0xcb, 0x30, 0x8b, 0x2b, 0x4d, 0x29, 0x62, 0xf1, 0x64, 0x8f, 0xd7, 0x1b, 0x7c, 0x41,
	0xc7, 0x64, 0x4c, 0x36, 0xd4, 0xf4, 0x7c, 0xc4, 0xe2, 0xa7, 0xc9, 0xce, 0x42, 0x20, 0x1a, 0xd5,
	0x48, 0x44, 0xa2, 0xaa, 0xcf, 0x76, 0x92, 0x9a, 0xce, 0x74, 0xa2, 0xa3, 0xac, 0x67, 0x7a, 0x65,
	0x00, 0x67, 0x5c, 0x89, 0x3a, 0x95, 0x55, 0xaa, 0x54, 0x22, 0x21, 0x9c, 0xaf, 0x43, 0x18, 0x81,
	0xac, 0x66, 0x3f, 0xf3, 0x81, 0x90, 0x90, 0x22, 0x99, 0x82, 0x71, 0x95, 0x1b, 0xca, 0xb2, 0x91,
	0x87, 0xb3, 0xdf, 0x0a, 0xd8, 0xda, 0xf0, 0x21, 0x62, 0x2a, 0x06, 0xe9, 0xc3, 0x6e, 0x02, 0x2a,
	0x26, 0xab, 0x78, 0xdc, 0x87, 0x40, 0xc8, 0xd0, 0x9e, 0x9a, 0x41, 0x73, 0x13, 0x8b, 0x64, 0x21,
	0x6d, 0x58, 0xe5, 0xad, 0xac, 0xba, 0x41, 0x9f, 0xb5, 0xbc, 0xeb, 0xc7, 0xa7, 0xae, 0x71, 0x72,
	0xea, 0xa2, 0xb3, 0x37, 0x33, 0xe5, 0x4d, 0x15, 0x65, 0x47, 0x7e, 0xde, 0x48, 0x96, 0x70, 0x71,
	0xad, 0x4e, 0x23, 0x65, 0xef, 0x9b, 0x33, 0x68, 0xce, 0x5c, 0xbc, 0xa1, 0x15, 0xd9, 0x20, 0x49,
	0x63, 0x26, 0xb8, 0x3e, 0xf6, 0x0a, 0xa9, 0xc6, 0xcf, 0x58, 0x72, 0x1b, 0x9b, 0xab, 0x3c, 0x66,
	0x01, 0x6b, 0xd2, 0x18, 0x42, 0x1f, 0x6a, 0xf6, 0x73, 0x53, 0x2f, 0x60, 0xe6, 0xdd, 0x35, 0x90,
	0xc0, 0x03, 0xc8, 0xbb, 0xce, 0xc1, 0x64, 0x19, 0x93, 0x07, 0x7b, 0x20, 0x25, 0x0b, 0x21, 0xdb,
	0xe2, 0x61, 0xab, 0x09, 0xf6, 0xdb, 0x54, 0x31, 0x99, 0xb7, 0x5c, 0x00, 0x90, 0x3b, 0xf8, 0x6a,
	0xbf, 0xba, 0x25, 0x61, 0x2f, 0x1d, 0x7b, 0x38, 0x6a, 0xec, 0x79, 0x7a, 0x50, 0xe0, 0x0b, 0x11,
	0xa7, 0x82, 0x77, 0xff, 0x24, 0xc8, 0x69, 0x72, 0x17, 0x57, 0xfe, 0xec, 0x45, 0x95, 0xe0, 0xa9,
	0xe2, 0xfd, 0x28, 0xc5, 0x30, 0x4f, 0x56, 0x70, 0x65, 0x4b, 0x8a, 0x30, 0x09, 0x40, 0x6e, 0xb3,
	0x88, 0xd3, 0x38, 0x91, 0x60, 0x7f, 0xca, 0x24, 0x13, 0x5a, 0xe2, 0x31, 0x4e, 0x65, 0xab, 0x6f,
	0x18, 0x82, 0xc9, 0x32, 0xc6, 0x79, 0x31, 0xf4, 0x5a, 0xf6, 0xd1, 0xa8, 0xf9, 0x03, 0xe0, 0xad,
	0xe2, 0xd7, 0x8e, 0x7b, 0x54, 0x5e, 0x2f, 0x94, 0x90, 0x35, 0xb5, 0x5e, 0x2c, 0x5d, 0xb3, 0xf6,
	0xcd, 0xd9, 0xef, 0x08, 0x57, 0x06, 0x9e, 0x95, 0x6a, 0x0a, 0xae, 0xe0, 0xbf, 0x3c, 0x0a, 0x0f,
	0x93, 0xfe, 0x80, 0x81, 0x7b, 0x79, 0xf9, 0xd7, 0x7b, 0xb9, 0x80, 0xd6, 0xff, 0xf0, 0x4b, 0x79,
	0xbd, 0x58, 0x42, 0xd6, 0xbe, 0x79, 0xf3, 0x1e, 0xae, 0x0c, 0xad, 0x4c, 0x26, 0x71, 0xf9, 0x11,
	0x0f, 0xa1, 0xc6, 0x38, 0x84, 0x96, 0x41, 0x4a, 0xb8, 0xb0, 0x46, 0x55, 0x6c, 0xa1, 0x34, 0xda,
	0xa6, 0x35, 0xb0, 0x2e, 0x91, 0x2b, 0xb8, 0x94, 0xd6, 0x74, 0x36, 0xe6, 0xed, 0x1e, 0xff, 0x74,
	0xd0, 0x87, 0xae, 0x83, 0x8e, 0xbb, 0x0e, 0x3a, 0xe9, 0x3a, 0xa8, 0xd3, 0x75, 0xd0, 0x8f, 0xae,
	0x63, 0xbc, 0xea, 0x39, 0xc6, 0x61, 0xcf, 0x41, 0x27, 0x3d, 0xc7, 0xe8, 0xf4, 0x1c, 0xe3, 0xd7,
	0x81, 0x8b, 0xce, 0x0e, 0xdc, 0xcb, 0x9b, 0xa0, 0x14, 0x8d, 0xe0, 0x45, 0xdb, 0x2d, 0xdc, 0x07,
	0x1a, 0xbe, 0x6e, 0xbb, 0xc5, 0xc7, 0x4c, 0xb1, 0xf8, 0x63, 0xdb, 0x9d, 0xea, 0xdf, 0x74, 0xce,
	0xa4, 0xcf, 0xfa, 0x73, 0xdb, 0x35, 0xf3, 0x54, 0x63, 0x42, 0xee, 0x8c, 0xeb, 0x4f, 0x7e, 0xe9,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xee, 0xa0, 0x2b, 0x88, 0x04, 0x00, 0x00,
}

func (this *LRegisterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LRegisterRequest)
	if !ok {
		that2, ok := that.(LRegisterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyRecordLazy.Equal(&that1.AnyRecordLazy) {
		return false
	}
	if this.Flags != that1.Flags {
		return false
	}
	if !this.AnticipatedRef.Equal(&that1.AnticipatedRef) {
		return false
	}
	if this.OverrideRecordType != that1.OverrideRecordType {
		return false
	}
	if !this.OverridePrevRef.Equal(&that1.OverridePrevRef) {
		return false
	}
	if !this.OverrideRootRef.Equal(&that1.OverrideRootRef) {
		return false
	}
	if !this.OverrideReasonRef.Equal(&that1.OverrideReasonRef) {
		return false
	}
	if !this.ProducerSignature.Equal(&that1.ProducerSignature) {
		return false
	}
	if !this.ProducedBy.Equal(&that1.ProducedBy) {
		return false
	}
	return true
}
func (this *LRegisterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LRegisterResponse)
	if !ok {
		that2, ok := that.(LRegisterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Flags != that1.Flags {
		return false
	}
	if !this.AnticipatedRef.Equal(&that1.AnticipatedRef) {
		return false
	}
	if !this.RegistrarSignature.Equal(&that1.RegistrarSignature) {
		return false
	}
	return true
}
func (m *LRegisterRequest) Visit(ctx MessageVisitor) error {
	if err := ctx.MsgRecord(m, 19, &m.AnyRecordLazy); err != nil {
		return err
	}
	return ctx.Message(m, 1200)
}

const TypeLRegisterRequestPolymorphID = 1200

func (*LRegisterRequest) GetDefaultPolymorphID() uint64 {
	return 1200
}

func (m *LRegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LRegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LRegisterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.ProducedBy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnlmn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x73
			i--
			dAtA[i] = 0x82
		}
	}
	{
		size, err := m.ProducerSignature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnlmn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x72
			i--
			dAtA[i] = 0xfa
		}
	}
	{
		size, err := m.OverrideReasonRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnlmn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x72
			i--
			dAtA[i] = 0x92
		}
	}
	{
		size, err := m.OverrideRootRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnlmn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x72
			i--
			dAtA[i] = 0x8a
		}
	}
	{
		size, err := m.OverridePrevRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnlmn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x72
			i--
			dAtA[i] = 0x82
		}
	}
	if m.OverrideRecordType != 0 {
		i = encodeVarintProtoVnlmn(dAtA, i, uint64(m.OverrideRecordType))
		i--
		dAtA[i] = 0x71
		i--
		dAtA[i] = 0xc0
	}
	{
		size, err := m.AnticipatedRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnlmn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xca
		}
	}
	if m.Flags != 0 {
		i = encodeVarintProtoVnlmn(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x70
		i--
		dAtA[i] = 0xc0
	}
	{
		size, err := m.AnyRecordLazy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnlmn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	i = encodeVarintProtoVnlmn(dAtA, i, uint64(1200))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *LRegisterResponse) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 1203)
}

const TypeLRegisterResponsePolymorphID = 1203

func (*LRegisterResponse) GetDefaultPolymorphID() uint64 {
	return 1203
}

func (m *LRegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LRegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LRegisterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.RegistrarSignature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnlmn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xea
		}
	}
	{
		size, err := m.AnticipatedRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoVnlmn(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xca
		}
	}
	if m.Flags != 0 {
		i = encodeVarintProtoVnlmn(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x70
		i--
		dAtA[i] = 0xc0
	}
	i = encodeVarintProtoVnlmn(dAtA, i, uint64(1203))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func encodeVarintProtoVnlmn(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtoVnlmn(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func init() {
	RegisterMessageType(1200, "", (*LRegisterRequest)(nil))
	RegisterMessageType(1203, "", (*LRegisterResponse)(nil))
}

func (m *LRegisterRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.AnyRecordLazy.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnlmn(uint64(l))
	}
	if m.Flags != 0 {
		n += 2 + sovProtoVnlmn(uint64(m.Flags))
	}
	if l = m.AnticipatedRef.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnlmn(uint64(l))
	}
	if m.OverrideRecordType != 0 {
		n += 2 + sovProtoVnlmn(uint64(m.OverrideRecordType))
	}
	if l = m.OverridePrevRef.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnlmn(uint64(l))
	}
	if l = m.OverrideRootRef.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnlmn(uint64(l))
	}
	if l = m.OverrideReasonRef.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnlmn(uint64(l))
	}
	if l = m.ProducerSignature.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnlmn(uint64(l))
	}
	if l = m.ProducedBy.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnlmn(uint64(l))
	}
	n += 2 + sovProtoVnlmn(1200)
	return n
}

func (m *LRegisterResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Flags != 0 {
		n += 2 + sovProtoVnlmn(uint64(m.Flags))
	}
	if l = m.AnticipatedRef.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnlmn(uint64(l))
	}
	if l = m.RegistrarSignature.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoVnlmn(uint64(l))
	}
	n += 2 + sovProtoVnlmn(1203)
	return n
}

func sovProtoVnlmn(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtoVnlmn(x uint64) (n int) {
	return sovProtoVnlmn(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LRegisterRequest) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnlmn)
}
func (m *LRegisterRequest) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnlmn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LRegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LRegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyRecordLazy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnlmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AnyRecordLazy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1800:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnlmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= RegistrationFlags(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1801:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnticipatedRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnlmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AnticipatedRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1816:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverrideRecordType", wireType)
			}
			m.OverrideRecordType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnlmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverrideRecordType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1824:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverridePrevRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnlmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OverridePrevRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1825:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverrideRootRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnlmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OverrideRootRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1826:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverrideReasonRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnlmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OverrideReasonRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1839:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnlmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProducerSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1840:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnlmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProducedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnlmn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LRegisterResponse) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoVnlmn)
}
func (m *LRegisterResponse) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoVnlmn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LRegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LRegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1800:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnlmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= RegistrationFlags(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1801:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnticipatedRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnlmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AnticipatedRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1805:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrarSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoVnlmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegistrarSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoVnlmn(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoVnlmn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtoVnlmn(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtoVnlmn
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoVnlmn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoVnlmn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtoVnlmn
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtoVnlmn
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtoVnlmn
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtoVnlmn        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtoVnlmn          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtoVnlmn = fmt.Errorf("proto: unexpected end of group")
	ErrExpectedBinaryMarkerProtoVnlmn = fmt.Errorf("proto: binary marker was expected")
)
