package census

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/assured-ledger/ledger-core/insolar/node"
	"github.com/insolar/assured-ledger/ledger-core/network/consensus/gcpv2/api/member"
	"github.com/insolar/assured-ledger/ledger-core/network/consensus/gcpv2/api/profiles"
)

// OnlinePopulationMock implements OnlinePopulation
type OnlinePopulationMock struct {
	t minimock.Tester

	funcFindProfile          func(nodeID node.ShortNodeID) (a1 profiles.ActiveNode)
	inspectFuncFindProfile   func(nodeID node.ShortNodeID)
	afterFindProfileCounter  uint64
	beforeFindProfileCounter uint64
	FindProfileMock          mOnlinePopulationMockFindProfile

	funcGetIdleCount          func() (i1 int)
	inspectFuncGetIdleCount   func()
	afterGetIdleCountCounter  uint64
	beforeGetIdleCountCounter uint64
	GetIdleCountMock          mOnlinePopulationMockGetIdleCount

	funcGetIdleProfiles          func() (aa1 []profiles.ActiveNode)
	inspectFuncGetIdleProfiles   func()
	afterGetIdleProfilesCounter  uint64
	beforeGetIdleProfilesCounter uint64
	GetIdleProfilesMock          mOnlinePopulationMockGetIdleProfiles

	funcGetIndexedCapacity          func() (i1 int)
	inspectFuncGetIndexedCapacity   func()
	afterGetIndexedCapacityCounter  uint64
	beforeGetIndexedCapacityCounter uint64
	GetIndexedCapacityMock          mOnlinePopulationMockGetIndexedCapacity

	funcGetIndexedCount          func() (i1 int)
	inspectFuncGetIndexedCount   func()
	afterGetIndexedCountCounter  uint64
	beforeGetIndexedCountCounter uint64
	GetIndexedCountMock          mOnlinePopulationMockGetIndexedCount

	funcGetLocalProfile          func() (l1 profiles.LocalNode)
	inspectFuncGetLocalProfile   func()
	afterGetLocalProfileCounter  uint64
	beforeGetLocalProfileCounter uint64
	GetLocalProfileMock          mOnlinePopulationMockGetLocalProfile

	funcGetMistrustedCount          func() (i1 int)
	inspectFuncGetMistrustedCount   func()
	afterGetMistrustedCountCounter  uint64
	beforeGetMistrustedCountCounter uint64
	GetMistrustedCountMock          mOnlinePopulationMockGetMistrustedCount

	funcGetPoweredProfiles          func() (aa1 []profiles.ActiveNode)
	inspectFuncGetPoweredProfiles   func()
	afterGetPoweredProfilesCounter  uint64
	beforeGetPoweredProfilesCounter uint64
	GetPoweredProfilesMock          mOnlinePopulationMockGetPoweredProfiles

	funcGetPoweredRoles          func() (pa1 []member.PrimaryRole)
	inspectFuncGetPoweredRoles   func()
	afterGetPoweredRolesCounter  uint64
	beforeGetPoweredRolesCounter uint64
	GetPoweredRolesMock          mOnlinePopulationMockGetPoweredRoles

	funcGetProfile          func(index member.Index) (a1 profiles.ActiveNode)
	inspectFuncGetProfile   func(index member.Index)
	afterGetProfileCounter  uint64
	beforeGetProfileCounter uint64
	GetProfileMock          mOnlinePopulationMockGetProfile

	funcGetProfiles          func() (aa1 []profiles.ActiveNode)
	inspectFuncGetProfiles   func()
	afterGetProfilesCounter  uint64
	beforeGetProfilesCounter uint64
	GetProfilesMock          mOnlinePopulationMockGetProfiles

	funcGetRolePopulation          func(role member.PrimaryRole) (r1 RolePopulation)
	inspectFuncGetRolePopulation   func(role member.PrimaryRole)
	afterGetRolePopulationCounter  uint64
	beforeGetRolePopulationCounter uint64
	GetRolePopulationMock          mOnlinePopulationMockGetRolePopulation

	funcGetSuspendedCount          func() (i1 int)
	inspectFuncGetSuspendedCount   func()
	afterGetSuspendedCountCounter  uint64
	beforeGetSuspendedCountCounter uint64
	GetSuspendedCountMock          mOnlinePopulationMockGetSuspendedCount

	funcIsClean          func() (b1 bool)
	inspectFuncIsClean   func()
	afterIsCleanCounter  uint64
	beforeIsCleanCounter uint64
	IsCleanMock          mOnlinePopulationMockIsClean

	funcIsValid          func() (b1 bool)
	inspectFuncIsValid   func()
	afterIsValidCounter  uint64
	beforeIsValidCounter uint64
	IsValidMock          mOnlinePopulationMockIsValid
}

// NewOnlinePopulationMock returns a mock for OnlinePopulation
func NewOnlinePopulationMock(t minimock.Tester) *OnlinePopulationMock {
	m := &OnlinePopulationMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.FindProfileMock = mOnlinePopulationMockFindProfile{mock: m}
	m.FindProfileMock.callArgs = []*OnlinePopulationMockFindProfileParams{}

	m.GetIdleCountMock = mOnlinePopulationMockGetIdleCount{mock: m}

	m.GetIdleProfilesMock = mOnlinePopulationMockGetIdleProfiles{mock: m}

	m.GetIndexedCapacityMock = mOnlinePopulationMockGetIndexedCapacity{mock: m}

	m.GetIndexedCountMock = mOnlinePopulationMockGetIndexedCount{mock: m}

	m.GetLocalProfileMock = mOnlinePopulationMockGetLocalProfile{mock: m}

	m.GetMistrustedCountMock = mOnlinePopulationMockGetMistrustedCount{mock: m}

	m.GetPoweredProfilesMock = mOnlinePopulationMockGetPoweredProfiles{mock: m}

	m.GetPoweredRolesMock = mOnlinePopulationMockGetPoweredRoles{mock: m}

	m.GetProfileMock = mOnlinePopulationMockGetProfile{mock: m}
	m.GetProfileMock.callArgs = []*OnlinePopulationMockGetProfileParams{}

	m.GetProfilesMock = mOnlinePopulationMockGetProfiles{mock: m}

	m.GetRolePopulationMock = mOnlinePopulationMockGetRolePopulation{mock: m}
	m.GetRolePopulationMock.callArgs = []*OnlinePopulationMockGetRolePopulationParams{}

	m.GetSuspendedCountMock = mOnlinePopulationMockGetSuspendedCount{mock: m}

	m.IsCleanMock = mOnlinePopulationMockIsClean{mock: m}

	m.IsValidMock = mOnlinePopulationMockIsValid{mock: m}

	return m
}

type mOnlinePopulationMockFindProfile struct {
	mock               *OnlinePopulationMock
	defaultExpectation *OnlinePopulationMockFindProfileExpectation
	expectations       []*OnlinePopulationMockFindProfileExpectation

	callArgs []*OnlinePopulationMockFindProfileParams
	mutex    sync.RWMutex
}

// OnlinePopulationMockFindProfileExpectation specifies expectation struct of the OnlinePopulation.FindProfile
type OnlinePopulationMockFindProfileExpectation struct {
	mock    *OnlinePopulationMock
	params  *OnlinePopulationMockFindProfileParams
	results *OnlinePopulationMockFindProfileResults
	Counter uint64
}

// OnlinePopulationMockFindProfileParams contains parameters of the OnlinePopulation.FindProfile
type OnlinePopulationMockFindProfileParams struct {
	nodeID node.ShortNodeID
}

// OnlinePopulationMockFindProfileResults contains results of the OnlinePopulation.FindProfile
type OnlinePopulationMockFindProfileResults struct {
	a1 profiles.ActiveNode
}

// Expect sets up expected params for OnlinePopulation.FindProfile
func (mmFindProfile *mOnlinePopulationMockFindProfile) Expect(nodeID node.ShortNodeID) *mOnlinePopulationMockFindProfile {
	if mmFindProfile.mock.funcFindProfile != nil {
		mmFindProfile.mock.t.Fatalf("OnlinePopulationMock.FindProfile mock is already set by Set")
	}

	if mmFindProfile.defaultExpectation == nil {
		mmFindProfile.defaultExpectation = &OnlinePopulationMockFindProfileExpectation{}
	}

	mmFindProfile.defaultExpectation.params = &OnlinePopulationMockFindProfileParams{nodeID}
	for _, e := range mmFindProfile.expectations {
		if minimock.Equal(e.params, mmFindProfile.defaultExpectation.params) {
			mmFindProfile.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFindProfile.defaultExpectation.params)
		}
	}

	return mmFindProfile
}

// Inspect accepts an inspector function that has same arguments as the OnlinePopulation.FindProfile
func (mmFindProfile *mOnlinePopulationMockFindProfile) Inspect(f func(nodeID node.ShortNodeID)) *mOnlinePopulationMockFindProfile {
	if mmFindProfile.mock.inspectFuncFindProfile != nil {
		mmFindProfile.mock.t.Fatalf("Inspect function is already set for OnlinePopulationMock.FindProfile")
	}

	mmFindProfile.mock.inspectFuncFindProfile = f

	return mmFindProfile
}

// Return sets up results that will be returned by OnlinePopulation.FindProfile
func (mmFindProfile *mOnlinePopulationMockFindProfile) Return(a1 profiles.ActiveNode) *OnlinePopulationMock {
	if mmFindProfile.mock.funcFindProfile != nil {
		mmFindProfile.mock.t.Fatalf("OnlinePopulationMock.FindProfile mock is already set by Set")
	}

	if mmFindProfile.defaultExpectation == nil {
		mmFindProfile.defaultExpectation = &OnlinePopulationMockFindProfileExpectation{mock: mmFindProfile.mock}
	}
	mmFindProfile.defaultExpectation.results = &OnlinePopulationMockFindProfileResults{a1}
	return mmFindProfile.mock
}

//Set uses given function f to mock the OnlinePopulation.FindProfile method
func (mmFindProfile *mOnlinePopulationMockFindProfile) Set(f func(nodeID node.ShortNodeID) (a1 profiles.ActiveNode)) *OnlinePopulationMock {
	if mmFindProfile.defaultExpectation != nil {
		mmFindProfile.mock.t.Fatalf("Default expectation is already set for the OnlinePopulation.FindProfile method")
	}

	if len(mmFindProfile.expectations) > 0 {
		mmFindProfile.mock.t.Fatalf("Some expectations are already set for the OnlinePopulation.FindProfile method")
	}

	mmFindProfile.mock.funcFindProfile = f
	return mmFindProfile.mock
}

// When sets expectation for the OnlinePopulation.FindProfile which will trigger the result defined by the following
// Then helper
func (mmFindProfile *mOnlinePopulationMockFindProfile) When(nodeID node.ShortNodeID) *OnlinePopulationMockFindProfileExpectation {
	if mmFindProfile.mock.funcFindProfile != nil {
		mmFindProfile.mock.t.Fatalf("OnlinePopulationMock.FindProfile mock is already set by Set")
	}

	expectation := &OnlinePopulationMockFindProfileExpectation{
		mock:   mmFindProfile.mock,
		params: &OnlinePopulationMockFindProfileParams{nodeID},
	}
	mmFindProfile.expectations = append(mmFindProfile.expectations, expectation)
	return expectation
}

// Then sets up OnlinePopulation.FindProfile return parameters for the expectation previously defined by the When method
func (e *OnlinePopulationMockFindProfileExpectation) Then(a1 profiles.ActiveNode) *OnlinePopulationMock {
	e.results = &OnlinePopulationMockFindProfileResults{a1}
	return e.mock
}

// FindProfile implements OnlinePopulation
func (mmFindProfile *OnlinePopulationMock) FindProfile(nodeID node.ShortNodeID) (a1 profiles.ActiveNode) {
	mm_atomic.AddUint64(&mmFindProfile.beforeFindProfileCounter, 1)
	defer mm_atomic.AddUint64(&mmFindProfile.afterFindProfileCounter, 1)

	if mmFindProfile.inspectFuncFindProfile != nil {
		mmFindProfile.inspectFuncFindProfile(nodeID)
	}

	mm_params := &OnlinePopulationMockFindProfileParams{nodeID}

	// Record call args
	mmFindProfile.FindProfileMock.mutex.Lock()
	mmFindProfile.FindProfileMock.callArgs = append(mmFindProfile.FindProfileMock.callArgs, mm_params)
	mmFindProfile.FindProfileMock.mutex.Unlock()

	for _, e := range mmFindProfile.FindProfileMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.a1
		}
	}

	if mmFindProfile.FindProfileMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFindProfile.FindProfileMock.defaultExpectation.Counter, 1)
		mm_want := mmFindProfile.FindProfileMock.defaultExpectation.params
		mm_got := OnlinePopulationMockFindProfileParams{nodeID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFindProfile.t.Errorf("OnlinePopulationMock.FindProfile got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmFindProfile.FindProfileMock.defaultExpectation.results
		if mm_results == nil {
			mmFindProfile.t.Fatal("No results are set for the OnlinePopulationMock.FindProfile")
		}
		return (*mm_results).a1
	}
	if mmFindProfile.funcFindProfile != nil {
		return mmFindProfile.funcFindProfile(nodeID)
	}
	mmFindProfile.t.Fatalf("Unexpected call to OnlinePopulationMock.FindProfile. %v", nodeID)
	return
}

// FindProfileAfterCounter returns a count of finished OnlinePopulationMock.FindProfile invocations
func (mmFindProfile *OnlinePopulationMock) FindProfileAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindProfile.afterFindProfileCounter)
}

// FindProfileBeforeCounter returns a count of OnlinePopulationMock.FindProfile invocations
func (mmFindProfile *OnlinePopulationMock) FindProfileBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindProfile.beforeFindProfileCounter)
}

// Calls returns a list of arguments used in each call to OnlinePopulationMock.FindProfile.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFindProfile *mOnlinePopulationMockFindProfile) Calls() []*OnlinePopulationMockFindProfileParams {
	mmFindProfile.mutex.RLock()

	argCopy := make([]*OnlinePopulationMockFindProfileParams, len(mmFindProfile.callArgs))
	copy(argCopy, mmFindProfile.callArgs)

	mmFindProfile.mutex.RUnlock()

	return argCopy
}

// MinimockFindProfileDone returns true if the count of the FindProfile invocations corresponds
// the number of defined expectations
func (m *OnlinePopulationMock) MinimockFindProfileDone() bool {
	for _, e := range m.FindProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindProfileCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindProfile != nil && mm_atomic.LoadUint64(&m.afterFindProfileCounter) < 1 {
		return false
	}
	return true
}

// MinimockFindProfileInspect logs each unmet expectation
func (m *OnlinePopulationMock) MinimockFindProfileInspect() {
	for _, e := range m.FindProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OnlinePopulationMock.FindProfile with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindProfileCounter) < 1 {
		if m.FindProfileMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OnlinePopulationMock.FindProfile")
		} else {
			m.t.Errorf("Expected call to OnlinePopulationMock.FindProfile with params: %#v", *m.FindProfileMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindProfile != nil && mm_atomic.LoadUint64(&m.afterFindProfileCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.FindProfile")
	}
}

type mOnlinePopulationMockGetIdleCount struct {
	mock               *OnlinePopulationMock
	defaultExpectation *OnlinePopulationMockGetIdleCountExpectation
	expectations       []*OnlinePopulationMockGetIdleCountExpectation
}

// OnlinePopulationMockGetIdleCountExpectation specifies expectation struct of the OnlinePopulation.GetIdleCount
type OnlinePopulationMockGetIdleCountExpectation struct {
	mock *OnlinePopulationMock

	results *OnlinePopulationMockGetIdleCountResults
	Counter uint64
}

// OnlinePopulationMockGetIdleCountResults contains results of the OnlinePopulation.GetIdleCount
type OnlinePopulationMockGetIdleCountResults struct {
	i1 int
}

// Expect sets up expected params for OnlinePopulation.GetIdleCount
func (mmGetIdleCount *mOnlinePopulationMockGetIdleCount) Expect() *mOnlinePopulationMockGetIdleCount {
	if mmGetIdleCount.mock.funcGetIdleCount != nil {
		mmGetIdleCount.mock.t.Fatalf("OnlinePopulationMock.GetIdleCount mock is already set by Set")
	}

	if mmGetIdleCount.defaultExpectation == nil {
		mmGetIdleCount.defaultExpectation = &OnlinePopulationMockGetIdleCountExpectation{}
	}

	return mmGetIdleCount
}

// Inspect accepts an inspector function that has same arguments as the OnlinePopulation.GetIdleCount
func (mmGetIdleCount *mOnlinePopulationMockGetIdleCount) Inspect(f func()) *mOnlinePopulationMockGetIdleCount {
	if mmGetIdleCount.mock.inspectFuncGetIdleCount != nil {
		mmGetIdleCount.mock.t.Fatalf("Inspect function is already set for OnlinePopulationMock.GetIdleCount")
	}

	mmGetIdleCount.mock.inspectFuncGetIdleCount = f

	return mmGetIdleCount
}

// Return sets up results that will be returned by OnlinePopulation.GetIdleCount
func (mmGetIdleCount *mOnlinePopulationMockGetIdleCount) Return(i1 int) *OnlinePopulationMock {
	if mmGetIdleCount.mock.funcGetIdleCount != nil {
		mmGetIdleCount.mock.t.Fatalf("OnlinePopulationMock.GetIdleCount mock is already set by Set")
	}

	if mmGetIdleCount.defaultExpectation == nil {
		mmGetIdleCount.defaultExpectation = &OnlinePopulationMockGetIdleCountExpectation{mock: mmGetIdleCount.mock}
	}
	mmGetIdleCount.defaultExpectation.results = &OnlinePopulationMockGetIdleCountResults{i1}
	return mmGetIdleCount.mock
}

//Set uses given function f to mock the OnlinePopulation.GetIdleCount method
func (mmGetIdleCount *mOnlinePopulationMockGetIdleCount) Set(f func() (i1 int)) *OnlinePopulationMock {
	if mmGetIdleCount.defaultExpectation != nil {
		mmGetIdleCount.mock.t.Fatalf("Default expectation is already set for the OnlinePopulation.GetIdleCount method")
	}

	if len(mmGetIdleCount.expectations) > 0 {
		mmGetIdleCount.mock.t.Fatalf("Some expectations are already set for the OnlinePopulation.GetIdleCount method")
	}

	mmGetIdleCount.mock.funcGetIdleCount = f
	return mmGetIdleCount.mock
}

// GetIdleCount implements OnlinePopulation
func (mmGetIdleCount *OnlinePopulationMock) GetIdleCount() (i1 int) {
	mm_atomic.AddUint64(&mmGetIdleCount.beforeGetIdleCountCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIdleCount.afterGetIdleCountCounter, 1)

	if mmGetIdleCount.inspectFuncGetIdleCount != nil {
		mmGetIdleCount.inspectFuncGetIdleCount()
	}

	if mmGetIdleCount.GetIdleCountMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIdleCount.GetIdleCountMock.defaultExpectation.Counter, 1)

		mm_results := mmGetIdleCount.GetIdleCountMock.defaultExpectation.results
		if mm_results == nil {
			mmGetIdleCount.t.Fatal("No results are set for the OnlinePopulationMock.GetIdleCount")
		}
		return (*mm_results).i1
	}
	if mmGetIdleCount.funcGetIdleCount != nil {
		return mmGetIdleCount.funcGetIdleCount()
	}
	mmGetIdleCount.t.Fatalf("Unexpected call to OnlinePopulationMock.GetIdleCount.")
	return
}

// GetIdleCountAfterCounter returns a count of finished OnlinePopulationMock.GetIdleCount invocations
func (mmGetIdleCount *OnlinePopulationMock) GetIdleCountAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIdleCount.afterGetIdleCountCounter)
}

// GetIdleCountBeforeCounter returns a count of OnlinePopulationMock.GetIdleCount invocations
func (mmGetIdleCount *OnlinePopulationMock) GetIdleCountBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIdleCount.beforeGetIdleCountCounter)
}

// MinimockGetIdleCountDone returns true if the count of the GetIdleCount invocations corresponds
// the number of defined expectations
func (m *OnlinePopulationMock) MinimockGetIdleCountDone() bool {
	for _, e := range m.GetIdleCountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIdleCountMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIdleCountCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIdleCount != nil && mm_atomic.LoadUint64(&m.afterGetIdleCountCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIdleCountInspect logs each unmet expectation
func (m *OnlinePopulationMock) MinimockGetIdleCountInspect() {
	for _, e := range m.GetIdleCountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OnlinePopulationMock.GetIdleCount")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIdleCountMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIdleCountCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetIdleCount")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIdleCount != nil && mm_atomic.LoadUint64(&m.afterGetIdleCountCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetIdleCount")
	}
}

type mOnlinePopulationMockGetIdleProfiles struct {
	mock               *OnlinePopulationMock
	defaultExpectation *OnlinePopulationMockGetIdleProfilesExpectation
	expectations       []*OnlinePopulationMockGetIdleProfilesExpectation
}

// OnlinePopulationMockGetIdleProfilesExpectation specifies expectation struct of the OnlinePopulation.GetIdleProfiles
type OnlinePopulationMockGetIdleProfilesExpectation struct {
	mock *OnlinePopulationMock

	results *OnlinePopulationMockGetIdleProfilesResults
	Counter uint64
}

// OnlinePopulationMockGetIdleProfilesResults contains results of the OnlinePopulation.GetIdleProfiles
type OnlinePopulationMockGetIdleProfilesResults struct {
	aa1 []profiles.ActiveNode
}

// Expect sets up expected params for OnlinePopulation.GetIdleProfiles
func (mmGetIdleProfiles *mOnlinePopulationMockGetIdleProfiles) Expect() *mOnlinePopulationMockGetIdleProfiles {
	if mmGetIdleProfiles.mock.funcGetIdleProfiles != nil {
		mmGetIdleProfiles.mock.t.Fatalf("OnlinePopulationMock.GetIdleProfiles mock is already set by Set")
	}

	if mmGetIdleProfiles.defaultExpectation == nil {
		mmGetIdleProfiles.defaultExpectation = &OnlinePopulationMockGetIdleProfilesExpectation{}
	}

	return mmGetIdleProfiles
}

// Inspect accepts an inspector function that has same arguments as the OnlinePopulation.GetIdleProfiles
func (mmGetIdleProfiles *mOnlinePopulationMockGetIdleProfiles) Inspect(f func()) *mOnlinePopulationMockGetIdleProfiles {
	if mmGetIdleProfiles.mock.inspectFuncGetIdleProfiles != nil {
		mmGetIdleProfiles.mock.t.Fatalf("Inspect function is already set for OnlinePopulationMock.GetIdleProfiles")
	}

	mmGetIdleProfiles.mock.inspectFuncGetIdleProfiles = f

	return mmGetIdleProfiles
}

// Return sets up results that will be returned by OnlinePopulation.GetIdleProfiles
func (mmGetIdleProfiles *mOnlinePopulationMockGetIdleProfiles) Return(aa1 []profiles.ActiveNode) *OnlinePopulationMock {
	if mmGetIdleProfiles.mock.funcGetIdleProfiles != nil {
		mmGetIdleProfiles.mock.t.Fatalf("OnlinePopulationMock.GetIdleProfiles mock is already set by Set")
	}

	if mmGetIdleProfiles.defaultExpectation == nil {
		mmGetIdleProfiles.defaultExpectation = &OnlinePopulationMockGetIdleProfilesExpectation{mock: mmGetIdleProfiles.mock}
	}
	mmGetIdleProfiles.defaultExpectation.results = &OnlinePopulationMockGetIdleProfilesResults{aa1}
	return mmGetIdleProfiles.mock
}

//Set uses given function f to mock the OnlinePopulation.GetIdleProfiles method
func (mmGetIdleProfiles *mOnlinePopulationMockGetIdleProfiles) Set(f func() (aa1 []profiles.ActiveNode)) *OnlinePopulationMock {
	if mmGetIdleProfiles.defaultExpectation != nil {
		mmGetIdleProfiles.mock.t.Fatalf("Default expectation is already set for the OnlinePopulation.GetIdleProfiles method")
	}

	if len(mmGetIdleProfiles.expectations) > 0 {
		mmGetIdleProfiles.mock.t.Fatalf("Some expectations are already set for the OnlinePopulation.GetIdleProfiles method")
	}

	mmGetIdleProfiles.mock.funcGetIdleProfiles = f
	return mmGetIdleProfiles.mock
}

// GetIdleProfiles implements OnlinePopulation
func (mmGetIdleProfiles *OnlinePopulationMock) GetIdleProfiles() (aa1 []profiles.ActiveNode) {
	mm_atomic.AddUint64(&mmGetIdleProfiles.beforeGetIdleProfilesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIdleProfiles.afterGetIdleProfilesCounter, 1)

	if mmGetIdleProfiles.inspectFuncGetIdleProfiles != nil {
		mmGetIdleProfiles.inspectFuncGetIdleProfiles()
	}

	if mmGetIdleProfiles.GetIdleProfilesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIdleProfiles.GetIdleProfilesMock.defaultExpectation.Counter, 1)

		mm_results := mmGetIdleProfiles.GetIdleProfilesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetIdleProfiles.t.Fatal("No results are set for the OnlinePopulationMock.GetIdleProfiles")
		}
		return (*mm_results).aa1
	}
	if mmGetIdleProfiles.funcGetIdleProfiles != nil {
		return mmGetIdleProfiles.funcGetIdleProfiles()
	}
	mmGetIdleProfiles.t.Fatalf("Unexpected call to OnlinePopulationMock.GetIdleProfiles.")
	return
}

// GetIdleProfilesAfterCounter returns a count of finished OnlinePopulationMock.GetIdleProfiles invocations
func (mmGetIdleProfiles *OnlinePopulationMock) GetIdleProfilesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIdleProfiles.afterGetIdleProfilesCounter)
}

// GetIdleProfilesBeforeCounter returns a count of OnlinePopulationMock.GetIdleProfiles invocations
func (mmGetIdleProfiles *OnlinePopulationMock) GetIdleProfilesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIdleProfiles.beforeGetIdleProfilesCounter)
}

// MinimockGetIdleProfilesDone returns true if the count of the GetIdleProfiles invocations corresponds
// the number of defined expectations
func (m *OnlinePopulationMock) MinimockGetIdleProfilesDone() bool {
	for _, e := range m.GetIdleProfilesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIdleProfilesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIdleProfilesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIdleProfiles != nil && mm_atomic.LoadUint64(&m.afterGetIdleProfilesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIdleProfilesInspect logs each unmet expectation
func (m *OnlinePopulationMock) MinimockGetIdleProfilesInspect() {
	for _, e := range m.GetIdleProfilesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OnlinePopulationMock.GetIdleProfiles")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIdleProfilesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIdleProfilesCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetIdleProfiles")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIdleProfiles != nil && mm_atomic.LoadUint64(&m.afterGetIdleProfilesCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetIdleProfiles")
	}
}

type mOnlinePopulationMockGetIndexedCapacity struct {
	mock               *OnlinePopulationMock
	defaultExpectation *OnlinePopulationMockGetIndexedCapacityExpectation
	expectations       []*OnlinePopulationMockGetIndexedCapacityExpectation
}

// OnlinePopulationMockGetIndexedCapacityExpectation specifies expectation struct of the OnlinePopulation.GetIndexedCapacity
type OnlinePopulationMockGetIndexedCapacityExpectation struct {
	mock *OnlinePopulationMock

	results *OnlinePopulationMockGetIndexedCapacityResults
	Counter uint64
}

// OnlinePopulationMockGetIndexedCapacityResults contains results of the OnlinePopulation.GetIndexedCapacity
type OnlinePopulationMockGetIndexedCapacityResults struct {
	i1 int
}

// Expect sets up expected params for OnlinePopulation.GetIndexedCapacity
func (mmGetIndexedCapacity *mOnlinePopulationMockGetIndexedCapacity) Expect() *mOnlinePopulationMockGetIndexedCapacity {
	if mmGetIndexedCapacity.mock.funcGetIndexedCapacity != nil {
		mmGetIndexedCapacity.mock.t.Fatalf("OnlinePopulationMock.GetIndexedCapacity mock is already set by Set")
	}

	if mmGetIndexedCapacity.defaultExpectation == nil {
		mmGetIndexedCapacity.defaultExpectation = &OnlinePopulationMockGetIndexedCapacityExpectation{}
	}

	return mmGetIndexedCapacity
}

// Inspect accepts an inspector function that has same arguments as the OnlinePopulation.GetIndexedCapacity
func (mmGetIndexedCapacity *mOnlinePopulationMockGetIndexedCapacity) Inspect(f func()) *mOnlinePopulationMockGetIndexedCapacity {
	if mmGetIndexedCapacity.mock.inspectFuncGetIndexedCapacity != nil {
		mmGetIndexedCapacity.mock.t.Fatalf("Inspect function is already set for OnlinePopulationMock.GetIndexedCapacity")
	}

	mmGetIndexedCapacity.mock.inspectFuncGetIndexedCapacity = f

	return mmGetIndexedCapacity
}

// Return sets up results that will be returned by OnlinePopulation.GetIndexedCapacity
func (mmGetIndexedCapacity *mOnlinePopulationMockGetIndexedCapacity) Return(i1 int) *OnlinePopulationMock {
	if mmGetIndexedCapacity.mock.funcGetIndexedCapacity != nil {
		mmGetIndexedCapacity.mock.t.Fatalf("OnlinePopulationMock.GetIndexedCapacity mock is already set by Set")
	}

	if mmGetIndexedCapacity.defaultExpectation == nil {
		mmGetIndexedCapacity.defaultExpectation = &OnlinePopulationMockGetIndexedCapacityExpectation{mock: mmGetIndexedCapacity.mock}
	}
	mmGetIndexedCapacity.defaultExpectation.results = &OnlinePopulationMockGetIndexedCapacityResults{i1}
	return mmGetIndexedCapacity.mock
}

//Set uses given function f to mock the OnlinePopulation.GetIndexedCapacity method
func (mmGetIndexedCapacity *mOnlinePopulationMockGetIndexedCapacity) Set(f func() (i1 int)) *OnlinePopulationMock {
	if mmGetIndexedCapacity.defaultExpectation != nil {
		mmGetIndexedCapacity.mock.t.Fatalf("Default expectation is already set for the OnlinePopulation.GetIndexedCapacity method")
	}

	if len(mmGetIndexedCapacity.expectations) > 0 {
		mmGetIndexedCapacity.mock.t.Fatalf("Some expectations are already set for the OnlinePopulation.GetIndexedCapacity method")
	}

	mmGetIndexedCapacity.mock.funcGetIndexedCapacity = f
	return mmGetIndexedCapacity.mock
}

// GetIndexedCapacity implements OnlinePopulation
func (mmGetIndexedCapacity *OnlinePopulationMock) GetIndexedCapacity() (i1 int) {
	mm_atomic.AddUint64(&mmGetIndexedCapacity.beforeGetIndexedCapacityCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIndexedCapacity.afterGetIndexedCapacityCounter, 1)

	if mmGetIndexedCapacity.inspectFuncGetIndexedCapacity != nil {
		mmGetIndexedCapacity.inspectFuncGetIndexedCapacity()
	}

	if mmGetIndexedCapacity.GetIndexedCapacityMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIndexedCapacity.GetIndexedCapacityMock.defaultExpectation.Counter, 1)

		mm_results := mmGetIndexedCapacity.GetIndexedCapacityMock.defaultExpectation.results
		if mm_results == nil {
			mmGetIndexedCapacity.t.Fatal("No results are set for the OnlinePopulationMock.GetIndexedCapacity")
		}
		return (*mm_results).i1
	}
	if mmGetIndexedCapacity.funcGetIndexedCapacity != nil {
		return mmGetIndexedCapacity.funcGetIndexedCapacity()
	}
	mmGetIndexedCapacity.t.Fatalf("Unexpected call to OnlinePopulationMock.GetIndexedCapacity.")
	return
}

// GetIndexedCapacityAfterCounter returns a count of finished OnlinePopulationMock.GetIndexedCapacity invocations
func (mmGetIndexedCapacity *OnlinePopulationMock) GetIndexedCapacityAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIndexedCapacity.afterGetIndexedCapacityCounter)
}

// GetIndexedCapacityBeforeCounter returns a count of OnlinePopulationMock.GetIndexedCapacity invocations
func (mmGetIndexedCapacity *OnlinePopulationMock) GetIndexedCapacityBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIndexedCapacity.beforeGetIndexedCapacityCounter)
}

// MinimockGetIndexedCapacityDone returns true if the count of the GetIndexedCapacity invocations corresponds
// the number of defined expectations
func (m *OnlinePopulationMock) MinimockGetIndexedCapacityDone() bool {
	for _, e := range m.GetIndexedCapacityMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIndexedCapacityMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIndexedCapacityCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIndexedCapacity != nil && mm_atomic.LoadUint64(&m.afterGetIndexedCapacityCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIndexedCapacityInspect logs each unmet expectation
func (m *OnlinePopulationMock) MinimockGetIndexedCapacityInspect() {
	for _, e := range m.GetIndexedCapacityMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OnlinePopulationMock.GetIndexedCapacity")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIndexedCapacityMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIndexedCapacityCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetIndexedCapacity")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIndexedCapacity != nil && mm_atomic.LoadUint64(&m.afterGetIndexedCapacityCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetIndexedCapacity")
	}
}

type mOnlinePopulationMockGetIndexedCount struct {
	mock               *OnlinePopulationMock
	defaultExpectation *OnlinePopulationMockGetIndexedCountExpectation
	expectations       []*OnlinePopulationMockGetIndexedCountExpectation
}

// OnlinePopulationMockGetIndexedCountExpectation specifies expectation struct of the OnlinePopulation.GetIndexedCount
type OnlinePopulationMockGetIndexedCountExpectation struct {
	mock *OnlinePopulationMock

	results *OnlinePopulationMockGetIndexedCountResults
	Counter uint64
}

// OnlinePopulationMockGetIndexedCountResults contains results of the OnlinePopulation.GetIndexedCount
type OnlinePopulationMockGetIndexedCountResults struct {
	i1 int
}

// Expect sets up expected params for OnlinePopulation.GetIndexedCount
func (mmGetIndexedCount *mOnlinePopulationMockGetIndexedCount) Expect() *mOnlinePopulationMockGetIndexedCount {
	if mmGetIndexedCount.mock.funcGetIndexedCount != nil {
		mmGetIndexedCount.mock.t.Fatalf("OnlinePopulationMock.GetIndexedCount mock is already set by Set")
	}

	if mmGetIndexedCount.defaultExpectation == nil {
		mmGetIndexedCount.defaultExpectation = &OnlinePopulationMockGetIndexedCountExpectation{}
	}

	return mmGetIndexedCount
}

// Inspect accepts an inspector function that has same arguments as the OnlinePopulation.GetIndexedCount
func (mmGetIndexedCount *mOnlinePopulationMockGetIndexedCount) Inspect(f func()) *mOnlinePopulationMockGetIndexedCount {
	if mmGetIndexedCount.mock.inspectFuncGetIndexedCount != nil {
		mmGetIndexedCount.mock.t.Fatalf("Inspect function is already set for OnlinePopulationMock.GetIndexedCount")
	}

	mmGetIndexedCount.mock.inspectFuncGetIndexedCount = f

	return mmGetIndexedCount
}

// Return sets up results that will be returned by OnlinePopulation.GetIndexedCount
func (mmGetIndexedCount *mOnlinePopulationMockGetIndexedCount) Return(i1 int) *OnlinePopulationMock {
	if mmGetIndexedCount.mock.funcGetIndexedCount != nil {
		mmGetIndexedCount.mock.t.Fatalf("OnlinePopulationMock.GetIndexedCount mock is already set by Set")
	}

	if mmGetIndexedCount.defaultExpectation == nil {
		mmGetIndexedCount.defaultExpectation = &OnlinePopulationMockGetIndexedCountExpectation{mock: mmGetIndexedCount.mock}
	}
	mmGetIndexedCount.defaultExpectation.results = &OnlinePopulationMockGetIndexedCountResults{i1}
	return mmGetIndexedCount.mock
}

//Set uses given function f to mock the OnlinePopulation.GetIndexedCount method
func (mmGetIndexedCount *mOnlinePopulationMockGetIndexedCount) Set(f func() (i1 int)) *OnlinePopulationMock {
	if mmGetIndexedCount.defaultExpectation != nil {
		mmGetIndexedCount.mock.t.Fatalf("Default expectation is already set for the OnlinePopulation.GetIndexedCount method")
	}

	if len(mmGetIndexedCount.expectations) > 0 {
		mmGetIndexedCount.mock.t.Fatalf("Some expectations are already set for the OnlinePopulation.GetIndexedCount method")
	}

	mmGetIndexedCount.mock.funcGetIndexedCount = f
	return mmGetIndexedCount.mock
}

// GetIndexedCount implements OnlinePopulation
func (mmGetIndexedCount *OnlinePopulationMock) GetIndexedCount() (i1 int) {
	mm_atomic.AddUint64(&mmGetIndexedCount.beforeGetIndexedCountCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIndexedCount.afterGetIndexedCountCounter, 1)

	if mmGetIndexedCount.inspectFuncGetIndexedCount != nil {
		mmGetIndexedCount.inspectFuncGetIndexedCount()
	}

	if mmGetIndexedCount.GetIndexedCountMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIndexedCount.GetIndexedCountMock.defaultExpectation.Counter, 1)

		mm_results := mmGetIndexedCount.GetIndexedCountMock.defaultExpectation.results
		if mm_results == nil {
			mmGetIndexedCount.t.Fatal("No results are set for the OnlinePopulationMock.GetIndexedCount")
		}
		return (*mm_results).i1
	}
	if mmGetIndexedCount.funcGetIndexedCount != nil {
		return mmGetIndexedCount.funcGetIndexedCount()
	}
	mmGetIndexedCount.t.Fatalf("Unexpected call to OnlinePopulationMock.GetIndexedCount.")
	return
}

// GetIndexedCountAfterCounter returns a count of finished OnlinePopulationMock.GetIndexedCount invocations
func (mmGetIndexedCount *OnlinePopulationMock) GetIndexedCountAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIndexedCount.afterGetIndexedCountCounter)
}

// GetIndexedCountBeforeCounter returns a count of OnlinePopulationMock.GetIndexedCount invocations
func (mmGetIndexedCount *OnlinePopulationMock) GetIndexedCountBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIndexedCount.beforeGetIndexedCountCounter)
}

// MinimockGetIndexedCountDone returns true if the count of the GetIndexedCount invocations corresponds
// the number of defined expectations
func (m *OnlinePopulationMock) MinimockGetIndexedCountDone() bool {
	for _, e := range m.GetIndexedCountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIndexedCountMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIndexedCountCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIndexedCount != nil && mm_atomic.LoadUint64(&m.afterGetIndexedCountCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIndexedCountInspect logs each unmet expectation
func (m *OnlinePopulationMock) MinimockGetIndexedCountInspect() {
	for _, e := range m.GetIndexedCountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OnlinePopulationMock.GetIndexedCount")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIndexedCountMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIndexedCountCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetIndexedCount")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIndexedCount != nil && mm_atomic.LoadUint64(&m.afterGetIndexedCountCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetIndexedCount")
	}
}

type mOnlinePopulationMockGetLocalProfile struct {
	mock               *OnlinePopulationMock
	defaultExpectation *OnlinePopulationMockGetLocalProfileExpectation
	expectations       []*OnlinePopulationMockGetLocalProfileExpectation
}

// OnlinePopulationMockGetLocalProfileExpectation specifies expectation struct of the OnlinePopulation.GetLocalProfile
type OnlinePopulationMockGetLocalProfileExpectation struct {
	mock *OnlinePopulationMock

	results *OnlinePopulationMockGetLocalProfileResults
	Counter uint64
}

// OnlinePopulationMockGetLocalProfileResults contains results of the OnlinePopulation.GetLocalProfile
type OnlinePopulationMockGetLocalProfileResults struct {
	l1 profiles.LocalNode
}

// Expect sets up expected params for OnlinePopulation.GetLocalProfile
func (mmGetLocalProfile *mOnlinePopulationMockGetLocalProfile) Expect() *mOnlinePopulationMockGetLocalProfile {
	if mmGetLocalProfile.mock.funcGetLocalProfile != nil {
		mmGetLocalProfile.mock.t.Fatalf("OnlinePopulationMock.GetLocalProfile mock is already set by Set")
	}

	if mmGetLocalProfile.defaultExpectation == nil {
		mmGetLocalProfile.defaultExpectation = &OnlinePopulationMockGetLocalProfileExpectation{}
	}

	return mmGetLocalProfile
}

// Inspect accepts an inspector function that has same arguments as the OnlinePopulation.GetLocalProfile
func (mmGetLocalProfile *mOnlinePopulationMockGetLocalProfile) Inspect(f func()) *mOnlinePopulationMockGetLocalProfile {
	if mmGetLocalProfile.mock.inspectFuncGetLocalProfile != nil {
		mmGetLocalProfile.mock.t.Fatalf("Inspect function is already set for OnlinePopulationMock.GetLocalProfile")
	}

	mmGetLocalProfile.mock.inspectFuncGetLocalProfile = f

	return mmGetLocalProfile
}

// Return sets up results that will be returned by OnlinePopulation.GetLocalProfile
func (mmGetLocalProfile *mOnlinePopulationMockGetLocalProfile) Return(l1 profiles.LocalNode) *OnlinePopulationMock {
	if mmGetLocalProfile.mock.funcGetLocalProfile != nil {
		mmGetLocalProfile.mock.t.Fatalf("OnlinePopulationMock.GetLocalProfile mock is already set by Set")
	}

	if mmGetLocalProfile.defaultExpectation == nil {
		mmGetLocalProfile.defaultExpectation = &OnlinePopulationMockGetLocalProfileExpectation{mock: mmGetLocalProfile.mock}
	}
	mmGetLocalProfile.defaultExpectation.results = &OnlinePopulationMockGetLocalProfileResults{l1}
	return mmGetLocalProfile.mock
}

//Set uses given function f to mock the OnlinePopulation.GetLocalProfile method
func (mmGetLocalProfile *mOnlinePopulationMockGetLocalProfile) Set(f func() (l1 profiles.LocalNode)) *OnlinePopulationMock {
	if mmGetLocalProfile.defaultExpectation != nil {
		mmGetLocalProfile.mock.t.Fatalf("Default expectation is already set for the OnlinePopulation.GetLocalProfile method")
	}

	if len(mmGetLocalProfile.expectations) > 0 {
		mmGetLocalProfile.mock.t.Fatalf("Some expectations are already set for the OnlinePopulation.GetLocalProfile method")
	}

	mmGetLocalProfile.mock.funcGetLocalProfile = f
	return mmGetLocalProfile.mock
}

// GetLocalProfile implements OnlinePopulation
func (mmGetLocalProfile *OnlinePopulationMock) GetLocalProfile() (l1 profiles.LocalNode) {
	mm_atomic.AddUint64(&mmGetLocalProfile.beforeGetLocalProfileCounter, 1)
	defer mm_atomic.AddUint64(&mmGetLocalProfile.afterGetLocalProfileCounter, 1)

	if mmGetLocalProfile.inspectFuncGetLocalProfile != nil {
		mmGetLocalProfile.inspectFuncGetLocalProfile()
	}

	if mmGetLocalProfile.GetLocalProfileMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetLocalProfile.GetLocalProfileMock.defaultExpectation.Counter, 1)

		mm_results := mmGetLocalProfile.GetLocalProfileMock.defaultExpectation.results
		if mm_results == nil {
			mmGetLocalProfile.t.Fatal("No results are set for the OnlinePopulationMock.GetLocalProfile")
		}
		return (*mm_results).l1
	}
	if mmGetLocalProfile.funcGetLocalProfile != nil {
		return mmGetLocalProfile.funcGetLocalProfile()
	}
	mmGetLocalProfile.t.Fatalf("Unexpected call to OnlinePopulationMock.GetLocalProfile.")
	return
}

// GetLocalProfileAfterCounter returns a count of finished OnlinePopulationMock.GetLocalProfile invocations
func (mmGetLocalProfile *OnlinePopulationMock) GetLocalProfileAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLocalProfile.afterGetLocalProfileCounter)
}

// GetLocalProfileBeforeCounter returns a count of OnlinePopulationMock.GetLocalProfile invocations
func (mmGetLocalProfile *OnlinePopulationMock) GetLocalProfileBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLocalProfile.beforeGetLocalProfileCounter)
}

// MinimockGetLocalProfileDone returns true if the count of the GetLocalProfile invocations corresponds
// the number of defined expectations
func (m *OnlinePopulationMock) MinimockGetLocalProfileDone() bool {
	for _, e := range m.GetLocalProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLocalProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLocalProfileCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLocalProfile != nil && mm_atomic.LoadUint64(&m.afterGetLocalProfileCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetLocalProfileInspect logs each unmet expectation
func (m *OnlinePopulationMock) MinimockGetLocalProfileInspect() {
	for _, e := range m.GetLocalProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OnlinePopulationMock.GetLocalProfile")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLocalProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLocalProfileCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetLocalProfile")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLocalProfile != nil && mm_atomic.LoadUint64(&m.afterGetLocalProfileCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetLocalProfile")
	}
}

type mOnlinePopulationMockGetMistrustedCount struct {
	mock               *OnlinePopulationMock
	defaultExpectation *OnlinePopulationMockGetMistrustedCountExpectation
	expectations       []*OnlinePopulationMockGetMistrustedCountExpectation
}

// OnlinePopulationMockGetMistrustedCountExpectation specifies expectation struct of the OnlinePopulation.GetMistrustedCount
type OnlinePopulationMockGetMistrustedCountExpectation struct {
	mock *OnlinePopulationMock

	results *OnlinePopulationMockGetMistrustedCountResults
	Counter uint64
}

// OnlinePopulationMockGetMistrustedCountResults contains results of the OnlinePopulation.GetMistrustedCount
type OnlinePopulationMockGetMistrustedCountResults struct {
	i1 int
}

// Expect sets up expected params for OnlinePopulation.GetMistrustedCount
func (mmGetMistrustedCount *mOnlinePopulationMockGetMistrustedCount) Expect() *mOnlinePopulationMockGetMistrustedCount {
	if mmGetMistrustedCount.mock.funcGetMistrustedCount != nil {
		mmGetMistrustedCount.mock.t.Fatalf("OnlinePopulationMock.GetMistrustedCount mock is already set by Set")
	}

	if mmGetMistrustedCount.defaultExpectation == nil {
		mmGetMistrustedCount.defaultExpectation = &OnlinePopulationMockGetMistrustedCountExpectation{}
	}

	return mmGetMistrustedCount
}

// Inspect accepts an inspector function that has same arguments as the OnlinePopulation.GetMistrustedCount
func (mmGetMistrustedCount *mOnlinePopulationMockGetMistrustedCount) Inspect(f func()) *mOnlinePopulationMockGetMistrustedCount {
	if mmGetMistrustedCount.mock.inspectFuncGetMistrustedCount != nil {
		mmGetMistrustedCount.mock.t.Fatalf("Inspect function is already set for OnlinePopulationMock.GetMistrustedCount")
	}

	mmGetMistrustedCount.mock.inspectFuncGetMistrustedCount = f

	return mmGetMistrustedCount
}

// Return sets up results that will be returned by OnlinePopulation.GetMistrustedCount
func (mmGetMistrustedCount *mOnlinePopulationMockGetMistrustedCount) Return(i1 int) *OnlinePopulationMock {
	if mmGetMistrustedCount.mock.funcGetMistrustedCount != nil {
		mmGetMistrustedCount.mock.t.Fatalf("OnlinePopulationMock.GetMistrustedCount mock is already set by Set")
	}

	if mmGetMistrustedCount.defaultExpectation == nil {
		mmGetMistrustedCount.defaultExpectation = &OnlinePopulationMockGetMistrustedCountExpectation{mock: mmGetMistrustedCount.mock}
	}
	mmGetMistrustedCount.defaultExpectation.results = &OnlinePopulationMockGetMistrustedCountResults{i1}
	return mmGetMistrustedCount.mock
}

//Set uses given function f to mock the OnlinePopulation.GetMistrustedCount method
func (mmGetMistrustedCount *mOnlinePopulationMockGetMistrustedCount) Set(f func() (i1 int)) *OnlinePopulationMock {
	if mmGetMistrustedCount.defaultExpectation != nil {
		mmGetMistrustedCount.mock.t.Fatalf("Default expectation is already set for the OnlinePopulation.GetMistrustedCount method")
	}

	if len(mmGetMistrustedCount.expectations) > 0 {
		mmGetMistrustedCount.mock.t.Fatalf("Some expectations are already set for the OnlinePopulation.GetMistrustedCount method")
	}

	mmGetMistrustedCount.mock.funcGetMistrustedCount = f
	return mmGetMistrustedCount.mock
}

// GetMistrustedCount implements OnlinePopulation
func (mmGetMistrustedCount *OnlinePopulationMock) GetMistrustedCount() (i1 int) {
	mm_atomic.AddUint64(&mmGetMistrustedCount.beforeGetMistrustedCountCounter, 1)
	defer mm_atomic.AddUint64(&mmGetMistrustedCount.afterGetMistrustedCountCounter, 1)

	if mmGetMistrustedCount.inspectFuncGetMistrustedCount != nil {
		mmGetMistrustedCount.inspectFuncGetMistrustedCount()
	}

	if mmGetMistrustedCount.GetMistrustedCountMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetMistrustedCount.GetMistrustedCountMock.defaultExpectation.Counter, 1)

		mm_results := mmGetMistrustedCount.GetMistrustedCountMock.defaultExpectation.results
		if mm_results == nil {
			mmGetMistrustedCount.t.Fatal("No results are set for the OnlinePopulationMock.GetMistrustedCount")
		}
		return (*mm_results).i1
	}
	if mmGetMistrustedCount.funcGetMistrustedCount != nil {
		return mmGetMistrustedCount.funcGetMistrustedCount()
	}
	mmGetMistrustedCount.t.Fatalf("Unexpected call to OnlinePopulationMock.GetMistrustedCount.")
	return
}

// GetMistrustedCountAfterCounter returns a count of finished OnlinePopulationMock.GetMistrustedCount invocations
func (mmGetMistrustedCount *OnlinePopulationMock) GetMistrustedCountAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMistrustedCount.afterGetMistrustedCountCounter)
}

// GetMistrustedCountBeforeCounter returns a count of OnlinePopulationMock.GetMistrustedCount invocations
func (mmGetMistrustedCount *OnlinePopulationMock) GetMistrustedCountBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMistrustedCount.beforeGetMistrustedCountCounter)
}

// MinimockGetMistrustedCountDone returns true if the count of the GetMistrustedCount invocations corresponds
// the number of defined expectations
func (m *OnlinePopulationMock) MinimockGetMistrustedCountDone() bool {
	for _, e := range m.GetMistrustedCountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMistrustedCountMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetMistrustedCountCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMistrustedCount != nil && mm_atomic.LoadUint64(&m.afterGetMistrustedCountCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetMistrustedCountInspect logs each unmet expectation
func (m *OnlinePopulationMock) MinimockGetMistrustedCountInspect() {
	for _, e := range m.GetMistrustedCountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OnlinePopulationMock.GetMistrustedCount")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMistrustedCountMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetMistrustedCountCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetMistrustedCount")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMistrustedCount != nil && mm_atomic.LoadUint64(&m.afterGetMistrustedCountCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetMistrustedCount")
	}
}

type mOnlinePopulationMockGetPoweredProfiles struct {
	mock               *OnlinePopulationMock
	defaultExpectation *OnlinePopulationMockGetPoweredProfilesExpectation
	expectations       []*OnlinePopulationMockGetPoweredProfilesExpectation
}

// OnlinePopulationMockGetPoweredProfilesExpectation specifies expectation struct of the OnlinePopulation.GetPoweredProfiles
type OnlinePopulationMockGetPoweredProfilesExpectation struct {
	mock *OnlinePopulationMock

	results *OnlinePopulationMockGetPoweredProfilesResults
	Counter uint64
}

// OnlinePopulationMockGetPoweredProfilesResults contains results of the OnlinePopulation.GetPoweredProfiles
type OnlinePopulationMockGetPoweredProfilesResults struct {
	aa1 []profiles.ActiveNode
}

// Expect sets up expected params for OnlinePopulation.GetPoweredProfiles
func (mmGetPoweredProfiles *mOnlinePopulationMockGetPoweredProfiles) Expect() *mOnlinePopulationMockGetPoweredProfiles {
	if mmGetPoweredProfiles.mock.funcGetPoweredProfiles != nil {
		mmGetPoweredProfiles.mock.t.Fatalf("OnlinePopulationMock.GetPoweredProfiles mock is already set by Set")
	}

	if mmGetPoweredProfiles.defaultExpectation == nil {
		mmGetPoweredProfiles.defaultExpectation = &OnlinePopulationMockGetPoweredProfilesExpectation{}
	}

	return mmGetPoweredProfiles
}

// Inspect accepts an inspector function that has same arguments as the OnlinePopulation.GetPoweredProfiles
func (mmGetPoweredProfiles *mOnlinePopulationMockGetPoweredProfiles) Inspect(f func()) *mOnlinePopulationMockGetPoweredProfiles {
	if mmGetPoweredProfiles.mock.inspectFuncGetPoweredProfiles != nil {
		mmGetPoweredProfiles.mock.t.Fatalf("Inspect function is already set for OnlinePopulationMock.GetPoweredProfiles")
	}

	mmGetPoweredProfiles.mock.inspectFuncGetPoweredProfiles = f

	return mmGetPoweredProfiles
}

// Return sets up results that will be returned by OnlinePopulation.GetPoweredProfiles
func (mmGetPoweredProfiles *mOnlinePopulationMockGetPoweredProfiles) Return(aa1 []profiles.ActiveNode) *OnlinePopulationMock {
	if mmGetPoweredProfiles.mock.funcGetPoweredProfiles != nil {
		mmGetPoweredProfiles.mock.t.Fatalf("OnlinePopulationMock.GetPoweredProfiles mock is already set by Set")
	}

	if mmGetPoweredProfiles.defaultExpectation == nil {
		mmGetPoweredProfiles.defaultExpectation = &OnlinePopulationMockGetPoweredProfilesExpectation{mock: mmGetPoweredProfiles.mock}
	}
	mmGetPoweredProfiles.defaultExpectation.results = &OnlinePopulationMockGetPoweredProfilesResults{aa1}
	return mmGetPoweredProfiles.mock
}

//Set uses given function f to mock the OnlinePopulation.GetPoweredProfiles method
func (mmGetPoweredProfiles *mOnlinePopulationMockGetPoweredProfiles) Set(f func() (aa1 []profiles.ActiveNode)) *OnlinePopulationMock {
	if mmGetPoweredProfiles.defaultExpectation != nil {
		mmGetPoweredProfiles.mock.t.Fatalf("Default expectation is already set for the OnlinePopulation.GetPoweredProfiles method")
	}

	if len(mmGetPoweredProfiles.expectations) > 0 {
		mmGetPoweredProfiles.mock.t.Fatalf("Some expectations are already set for the OnlinePopulation.GetPoweredProfiles method")
	}

	mmGetPoweredProfiles.mock.funcGetPoweredProfiles = f
	return mmGetPoweredProfiles.mock
}

// GetPoweredProfiles implements OnlinePopulation
func (mmGetPoweredProfiles *OnlinePopulationMock) GetPoweredProfiles() (aa1 []profiles.ActiveNode) {
	mm_atomic.AddUint64(&mmGetPoweredProfiles.beforeGetPoweredProfilesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPoweredProfiles.afterGetPoweredProfilesCounter, 1)

	if mmGetPoweredProfiles.inspectFuncGetPoweredProfiles != nil {
		mmGetPoweredProfiles.inspectFuncGetPoweredProfiles()
	}

	if mmGetPoweredProfiles.GetPoweredProfilesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPoweredProfiles.GetPoweredProfilesMock.defaultExpectation.Counter, 1)

		mm_results := mmGetPoweredProfiles.GetPoweredProfilesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPoweredProfiles.t.Fatal("No results are set for the OnlinePopulationMock.GetPoweredProfiles")
		}
		return (*mm_results).aa1
	}
	if mmGetPoweredProfiles.funcGetPoweredProfiles != nil {
		return mmGetPoweredProfiles.funcGetPoweredProfiles()
	}
	mmGetPoweredProfiles.t.Fatalf("Unexpected call to OnlinePopulationMock.GetPoweredProfiles.")
	return
}

// GetPoweredProfilesAfterCounter returns a count of finished OnlinePopulationMock.GetPoweredProfiles invocations
func (mmGetPoweredProfiles *OnlinePopulationMock) GetPoweredProfilesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPoweredProfiles.afterGetPoweredProfilesCounter)
}

// GetPoweredProfilesBeforeCounter returns a count of OnlinePopulationMock.GetPoweredProfiles invocations
func (mmGetPoweredProfiles *OnlinePopulationMock) GetPoweredProfilesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPoweredProfiles.beforeGetPoweredProfilesCounter)
}

// MinimockGetPoweredProfilesDone returns true if the count of the GetPoweredProfiles invocations corresponds
// the number of defined expectations
func (m *OnlinePopulationMock) MinimockGetPoweredProfilesDone() bool {
	for _, e := range m.GetPoweredProfilesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPoweredProfilesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPoweredProfilesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPoweredProfiles != nil && mm_atomic.LoadUint64(&m.afterGetPoweredProfilesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPoweredProfilesInspect logs each unmet expectation
func (m *OnlinePopulationMock) MinimockGetPoweredProfilesInspect() {
	for _, e := range m.GetPoweredProfilesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OnlinePopulationMock.GetPoweredProfiles")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPoweredProfilesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPoweredProfilesCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetPoweredProfiles")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPoweredProfiles != nil && mm_atomic.LoadUint64(&m.afterGetPoweredProfilesCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetPoweredProfiles")
	}
}

type mOnlinePopulationMockGetPoweredRoles struct {
	mock               *OnlinePopulationMock
	defaultExpectation *OnlinePopulationMockGetPoweredRolesExpectation
	expectations       []*OnlinePopulationMockGetPoweredRolesExpectation
}

// OnlinePopulationMockGetPoweredRolesExpectation specifies expectation struct of the OnlinePopulation.GetPoweredRoles
type OnlinePopulationMockGetPoweredRolesExpectation struct {
	mock *OnlinePopulationMock

	results *OnlinePopulationMockGetPoweredRolesResults
	Counter uint64
}

// OnlinePopulationMockGetPoweredRolesResults contains results of the OnlinePopulation.GetPoweredRoles
type OnlinePopulationMockGetPoweredRolesResults struct {
	pa1 []member.PrimaryRole
}

// Expect sets up expected params for OnlinePopulation.GetPoweredRoles
func (mmGetPoweredRoles *mOnlinePopulationMockGetPoweredRoles) Expect() *mOnlinePopulationMockGetPoweredRoles {
	if mmGetPoweredRoles.mock.funcGetPoweredRoles != nil {
		mmGetPoweredRoles.mock.t.Fatalf("OnlinePopulationMock.GetPoweredRoles mock is already set by Set")
	}

	if mmGetPoweredRoles.defaultExpectation == nil {
		mmGetPoweredRoles.defaultExpectation = &OnlinePopulationMockGetPoweredRolesExpectation{}
	}

	return mmGetPoweredRoles
}

// Inspect accepts an inspector function that has same arguments as the OnlinePopulation.GetPoweredRoles
func (mmGetPoweredRoles *mOnlinePopulationMockGetPoweredRoles) Inspect(f func()) *mOnlinePopulationMockGetPoweredRoles {
	if mmGetPoweredRoles.mock.inspectFuncGetPoweredRoles != nil {
		mmGetPoweredRoles.mock.t.Fatalf("Inspect function is already set for OnlinePopulationMock.GetPoweredRoles")
	}

	mmGetPoweredRoles.mock.inspectFuncGetPoweredRoles = f

	return mmGetPoweredRoles
}

// Return sets up results that will be returned by OnlinePopulation.GetPoweredRoles
func (mmGetPoweredRoles *mOnlinePopulationMockGetPoweredRoles) Return(pa1 []member.PrimaryRole) *OnlinePopulationMock {
	if mmGetPoweredRoles.mock.funcGetPoweredRoles != nil {
		mmGetPoweredRoles.mock.t.Fatalf("OnlinePopulationMock.GetPoweredRoles mock is already set by Set")
	}

	if mmGetPoweredRoles.defaultExpectation == nil {
		mmGetPoweredRoles.defaultExpectation = &OnlinePopulationMockGetPoweredRolesExpectation{mock: mmGetPoweredRoles.mock}
	}
	mmGetPoweredRoles.defaultExpectation.results = &OnlinePopulationMockGetPoweredRolesResults{pa1}
	return mmGetPoweredRoles.mock
}

//Set uses given function f to mock the OnlinePopulation.GetPoweredRoles method
func (mmGetPoweredRoles *mOnlinePopulationMockGetPoweredRoles) Set(f func() (pa1 []member.PrimaryRole)) *OnlinePopulationMock {
	if mmGetPoweredRoles.defaultExpectation != nil {
		mmGetPoweredRoles.mock.t.Fatalf("Default expectation is already set for the OnlinePopulation.GetPoweredRoles method")
	}

	if len(mmGetPoweredRoles.expectations) > 0 {
		mmGetPoweredRoles.mock.t.Fatalf("Some expectations are already set for the OnlinePopulation.GetPoweredRoles method")
	}

	mmGetPoweredRoles.mock.funcGetPoweredRoles = f
	return mmGetPoweredRoles.mock
}

// GetPoweredRoles implements OnlinePopulation
func (mmGetPoweredRoles *OnlinePopulationMock) GetPoweredRoles() (pa1 []member.PrimaryRole) {
	mm_atomic.AddUint64(&mmGetPoweredRoles.beforeGetPoweredRolesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPoweredRoles.afterGetPoweredRolesCounter, 1)

	if mmGetPoweredRoles.inspectFuncGetPoweredRoles != nil {
		mmGetPoweredRoles.inspectFuncGetPoweredRoles()
	}

	if mmGetPoweredRoles.GetPoweredRolesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPoweredRoles.GetPoweredRolesMock.defaultExpectation.Counter, 1)

		mm_results := mmGetPoweredRoles.GetPoweredRolesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPoweredRoles.t.Fatal("No results are set for the OnlinePopulationMock.GetPoweredRoles")
		}
		return (*mm_results).pa1
	}
	if mmGetPoweredRoles.funcGetPoweredRoles != nil {
		return mmGetPoweredRoles.funcGetPoweredRoles()
	}
	mmGetPoweredRoles.t.Fatalf("Unexpected call to OnlinePopulationMock.GetPoweredRoles.")
	return
}

// GetPoweredRolesAfterCounter returns a count of finished OnlinePopulationMock.GetPoweredRoles invocations
func (mmGetPoweredRoles *OnlinePopulationMock) GetPoweredRolesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPoweredRoles.afterGetPoweredRolesCounter)
}

// GetPoweredRolesBeforeCounter returns a count of OnlinePopulationMock.GetPoweredRoles invocations
func (mmGetPoweredRoles *OnlinePopulationMock) GetPoweredRolesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPoweredRoles.beforeGetPoweredRolesCounter)
}

// MinimockGetPoweredRolesDone returns true if the count of the GetPoweredRoles invocations corresponds
// the number of defined expectations
func (m *OnlinePopulationMock) MinimockGetPoweredRolesDone() bool {
	for _, e := range m.GetPoweredRolesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPoweredRolesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPoweredRolesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPoweredRoles != nil && mm_atomic.LoadUint64(&m.afterGetPoweredRolesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPoweredRolesInspect logs each unmet expectation
func (m *OnlinePopulationMock) MinimockGetPoweredRolesInspect() {
	for _, e := range m.GetPoweredRolesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OnlinePopulationMock.GetPoweredRoles")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPoweredRolesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPoweredRolesCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetPoweredRoles")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPoweredRoles != nil && mm_atomic.LoadUint64(&m.afterGetPoweredRolesCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetPoweredRoles")
	}
}

type mOnlinePopulationMockGetProfile struct {
	mock               *OnlinePopulationMock
	defaultExpectation *OnlinePopulationMockGetProfileExpectation
	expectations       []*OnlinePopulationMockGetProfileExpectation

	callArgs []*OnlinePopulationMockGetProfileParams
	mutex    sync.RWMutex
}

// OnlinePopulationMockGetProfileExpectation specifies expectation struct of the OnlinePopulation.GetProfile
type OnlinePopulationMockGetProfileExpectation struct {
	mock    *OnlinePopulationMock
	params  *OnlinePopulationMockGetProfileParams
	results *OnlinePopulationMockGetProfileResults
	Counter uint64
}

// OnlinePopulationMockGetProfileParams contains parameters of the OnlinePopulation.GetProfile
type OnlinePopulationMockGetProfileParams struct {
	index member.Index
}

// OnlinePopulationMockGetProfileResults contains results of the OnlinePopulation.GetProfile
type OnlinePopulationMockGetProfileResults struct {
	a1 profiles.ActiveNode
}

// Expect sets up expected params for OnlinePopulation.GetProfile
func (mmGetProfile *mOnlinePopulationMockGetProfile) Expect(index member.Index) *mOnlinePopulationMockGetProfile {
	if mmGetProfile.mock.funcGetProfile != nil {
		mmGetProfile.mock.t.Fatalf("OnlinePopulationMock.GetProfile mock is already set by Set")
	}

	if mmGetProfile.defaultExpectation == nil {
		mmGetProfile.defaultExpectation = &OnlinePopulationMockGetProfileExpectation{}
	}

	mmGetProfile.defaultExpectation.params = &OnlinePopulationMockGetProfileParams{index}
	for _, e := range mmGetProfile.expectations {
		if minimock.Equal(e.params, mmGetProfile.defaultExpectation.params) {
			mmGetProfile.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProfile.defaultExpectation.params)
		}
	}

	return mmGetProfile
}

// Inspect accepts an inspector function that has same arguments as the OnlinePopulation.GetProfile
func (mmGetProfile *mOnlinePopulationMockGetProfile) Inspect(f func(index member.Index)) *mOnlinePopulationMockGetProfile {
	if mmGetProfile.mock.inspectFuncGetProfile != nil {
		mmGetProfile.mock.t.Fatalf("Inspect function is already set for OnlinePopulationMock.GetProfile")
	}

	mmGetProfile.mock.inspectFuncGetProfile = f

	return mmGetProfile
}

// Return sets up results that will be returned by OnlinePopulation.GetProfile
func (mmGetProfile *mOnlinePopulationMockGetProfile) Return(a1 profiles.ActiveNode) *OnlinePopulationMock {
	if mmGetProfile.mock.funcGetProfile != nil {
		mmGetProfile.mock.t.Fatalf("OnlinePopulationMock.GetProfile mock is already set by Set")
	}

	if mmGetProfile.defaultExpectation == nil {
		mmGetProfile.defaultExpectation = &OnlinePopulationMockGetProfileExpectation{mock: mmGetProfile.mock}
	}
	mmGetProfile.defaultExpectation.results = &OnlinePopulationMockGetProfileResults{a1}
	return mmGetProfile.mock
}

//Set uses given function f to mock the OnlinePopulation.GetProfile method
func (mmGetProfile *mOnlinePopulationMockGetProfile) Set(f func(index member.Index) (a1 profiles.ActiveNode)) *OnlinePopulationMock {
	if mmGetProfile.defaultExpectation != nil {
		mmGetProfile.mock.t.Fatalf("Default expectation is already set for the OnlinePopulation.GetProfile method")
	}

	if len(mmGetProfile.expectations) > 0 {
		mmGetProfile.mock.t.Fatalf("Some expectations are already set for the OnlinePopulation.GetProfile method")
	}

	mmGetProfile.mock.funcGetProfile = f
	return mmGetProfile.mock
}

// When sets expectation for the OnlinePopulation.GetProfile which will trigger the result defined by the following
// Then helper
func (mmGetProfile *mOnlinePopulationMockGetProfile) When(index member.Index) *OnlinePopulationMockGetProfileExpectation {
	if mmGetProfile.mock.funcGetProfile != nil {
		mmGetProfile.mock.t.Fatalf("OnlinePopulationMock.GetProfile mock is already set by Set")
	}

	expectation := &OnlinePopulationMockGetProfileExpectation{
		mock:   mmGetProfile.mock,
		params: &OnlinePopulationMockGetProfileParams{index},
	}
	mmGetProfile.expectations = append(mmGetProfile.expectations, expectation)
	return expectation
}

// Then sets up OnlinePopulation.GetProfile return parameters for the expectation previously defined by the When method
func (e *OnlinePopulationMockGetProfileExpectation) Then(a1 profiles.ActiveNode) *OnlinePopulationMock {
	e.results = &OnlinePopulationMockGetProfileResults{a1}
	return e.mock
}

// GetProfile implements OnlinePopulation
func (mmGetProfile *OnlinePopulationMock) GetProfile(index member.Index) (a1 profiles.ActiveNode) {
	mm_atomic.AddUint64(&mmGetProfile.beforeGetProfileCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProfile.afterGetProfileCounter, 1)

	if mmGetProfile.inspectFuncGetProfile != nil {
		mmGetProfile.inspectFuncGetProfile(index)
	}

	mm_params := &OnlinePopulationMockGetProfileParams{index}

	// Record call args
	mmGetProfile.GetProfileMock.mutex.Lock()
	mmGetProfile.GetProfileMock.callArgs = append(mmGetProfile.GetProfileMock.callArgs, mm_params)
	mmGetProfile.GetProfileMock.mutex.Unlock()

	for _, e := range mmGetProfile.GetProfileMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.a1
		}
	}

	if mmGetProfile.GetProfileMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProfile.GetProfileMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProfile.GetProfileMock.defaultExpectation.params
		mm_got := OnlinePopulationMockGetProfileParams{index}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProfile.t.Errorf("OnlinePopulationMock.GetProfile got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProfile.GetProfileMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProfile.t.Fatal("No results are set for the OnlinePopulationMock.GetProfile")
		}
		return (*mm_results).a1
	}
	if mmGetProfile.funcGetProfile != nil {
		return mmGetProfile.funcGetProfile(index)
	}
	mmGetProfile.t.Fatalf("Unexpected call to OnlinePopulationMock.GetProfile. %v", index)
	return
}

// GetProfileAfterCounter returns a count of finished OnlinePopulationMock.GetProfile invocations
func (mmGetProfile *OnlinePopulationMock) GetProfileAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProfile.afterGetProfileCounter)
}

// GetProfileBeforeCounter returns a count of OnlinePopulationMock.GetProfile invocations
func (mmGetProfile *OnlinePopulationMock) GetProfileBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProfile.beforeGetProfileCounter)
}

// Calls returns a list of arguments used in each call to OnlinePopulationMock.GetProfile.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProfile *mOnlinePopulationMockGetProfile) Calls() []*OnlinePopulationMockGetProfileParams {
	mmGetProfile.mutex.RLock()

	argCopy := make([]*OnlinePopulationMockGetProfileParams, len(mmGetProfile.callArgs))
	copy(argCopy, mmGetProfile.callArgs)

	mmGetProfile.mutex.RUnlock()

	return argCopy
}

// MinimockGetProfileDone returns true if the count of the GetProfile invocations corresponds
// the number of defined expectations
func (m *OnlinePopulationMock) MinimockGetProfileDone() bool {
	for _, e := range m.GetProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProfileCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProfile != nil && mm_atomic.LoadUint64(&m.afterGetProfileCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProfileInspect logs each unmet expectation
func (m *OnlinePopulationMock) MinimockGetProfileInspect() {
	for _, e := range m.GetProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OnlinePopulationMock.GetProfile with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProfileCounter) < 1 {
		if m.GetProfileMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OnlinePopulationMock.GetProfile")
		} else {
			m.t.Errorf("Expected call to OnlinePopulationMock.GetProfile with params: %#v", *m.GetProfileMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProfile != nil && mm_atomic.LoadUint64(&m.afterGetProfileCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetProfile")
	}
}

type mOnlinePopulationMockGetProfiles struct {
	mock               *OnlinePopulationMock
	defaultExpectation *OnlinePopulationMockGetProfilesExpectation
	expectations       []*OnlinePopulationMockGetProfilesExpectation
}

// OnlinePopulationMockGetProfilesExpectation specifies expectation struct of the OnlinePopulation.GetProfiles
type OnlinePopulationMockGetProfilesExpectation struct {
	mock *OnlinePopulationMock

	results *OnlinePopulationMockGetProfilesResults
	Counter uint64
}

// OnlinePopulationMockGetProfilesResults contains results of the OnlinePopulation.GetProfiles
type OnlinePopulationMockGetProfilesResults struct {
	aa1 []profiles.ActiveNode
}

// Expect sets up expected params for OnlinePopulation.GetProfiles
func (mmGetProfiles *mOnlinePopulationMockGetProfiles) Expect() *mOnlinePopulationMockGetProfiles {
	if mmGetProfiles.mock.funcGetProfiles != nil {
		mmGetProfiles.mock.t.Fatalf("OnlinePopulationMock.GetProfiles mock is already set by Set")
	}

	if mmGetProfiles.defaultExpectation == nil {
		mmGetProfiles.defaultExpectation = &OnlinePopulationMockGetProfilesExpectation{}
	}

	return mmGetProfiles
}

// Inspect accepts an inspector function that has same arguments as the OnlinePopulation.GetProfiles
func (mmGetProfiles *mOnlinePopulationMockGetProfiles) Inspect(f func()) *mOnlinePopulationMockGetProfiles {
	if mmGetProfiles.mock.inspectFuncGetProfiles != nil {
		mmGetProfiles.mock.t.Fatalf("Inspect function is already set for OnlinePopulationMock.GetProfiles")
	}

	mmGetProfiles.mock.inspectFuncGetProfiles = f

	return mmGetProfiles
}

// Return sets up results that will be returned by OnlinePopulation.GetProfiles
func (mmGetProfiles *mOnlinePopulationMockGetProfiles) Return(aa1 []profiles.ActiveNode) *OnlinePopulationMock {
	if mmGetProfiles.mock.funcGetProfiles != nil {
		mmGetProfiles.mock.t.Fatalf("OnlinePopulationMock.GetProfiles mock is already set by Set")
	}

	if mmGetProfiles.defaultExpectation == nil {
		mmGetProfiles.defaultExpectation = &OnlinePopulationMockGetProfilesExpectation{mock: mmGetProfiles.mock}
	}
	mmGetProfiles.defaultExpectation.results = &OnlinePopulationMockGetProfilesResults{aa1}
	return mmGetProfiles.mock
}

//Set uses given function f to mock the OnlinePopulation.GetProfiles method
func (mmGetProfiles *mOnlinePopulationMockGetProfiles) Set(f func() (aa1 []profiles.ActiveNode)) *OnlinePopulationMock {
	if mmGetProfiles.defaultExpectation != nil {
		mmGetProfiles.mock.t.Fatalf("Default expectation is already set for the OnlinePopulation.GetProfiles method")
	}

	if len(mmGetProfiles.expectations) > 0 {
		mmGetProfiles.mock.t.Fatalf("Some expectations are already set for the OnlinePopulation.GetProfiles method")
	}

	mmGetProfiles.mock.funcGetProfiles = f
	return mmGetProfiles.mock
}

// GetProfiles implements OnlinePopulation
func (mmGetProfiles *OnlinePopulationMock) GetProfiles() (aa1 []profiles.ActiveNode) {
	mm_atomic.AddUint64(&mmGetProfiles.beforeGetProfilesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProfiles.afterGetProfilesCounter, 1)

	if mmGetProfiles.inspectFuncGetProfiles != nil {
		mmGetProfiles.inspectFuncGetProfiles()
	}

	if mmGetProfiles.GetProfilesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProfiles.GetProfilesMock.defaultExpectation.Counter, 1)

		mm_results := mmGetProfiles.GetProfilesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProfiles.t.Fatal("No results are set for the OnlinePopulationMock.GetProfiles")
		}
		return (*mm_results).aa1
	}
	if mmGetProfiles.funcGetProfiles != nil {
		return mmGetProfiles.funcGetProfiles()
	}
	mmGetProfiles.t.Fatalf("Unexpected call to OnlinePopulationMock.GetProfiles.")
	return
}

// GetProfilesAfterCounter returns a count of finished OnlinePopulationMock.GetProfiles invocations
func (mmGetProfiles *OnlinePopulationMock) GetProfilesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProfiles.afterGetProfilesCounter)
}

// GetProfilesBeforeCounter returns a count of OnlinePopulationMock.GetProfiles invocations
func (mmGetProfiles *OnlinePopulationMock) GetProfilesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProfiles.beforeGetProfilesCounter)
}

// MinimockGetProfilesDone returns true if the count of the GetProfiles invocations corresponds
// the number of defined expectations
func (m *OnlinePopulationMock) MinimockGetProfilesDone() bool {
	for _, e := range m.GetProfilesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProfilesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProfilesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProfiles != nil && mm_atomic.LoadUint64(&m.afterGetProfilesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProfilesInspect logs each unmet expectation
func (m *OnlinePopulationMock) MinimockGetProfilesInspect() {
	for _, e := range m.GetProfilesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OnlinePopulationMock.GetProfiles")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProfilesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProfilesCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetProfiles")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProfiles != nil && mm_atomic.LoadUint64(&m.afterGetProfilesCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetProfiles")
	}
}

type mOnlinePopulationMockGetRolePopulation struct {
	mock               *OnlinePopulationMock
	defaultExpectation *OnlinePopulationMockGetRolePopulationExpectation
	expectations       []*OnlinePopulationMockGetRolePopulationExpectation

	callArgs []*OnlinePopulationMockGetRolePopulationParams
	mutex    sync.RWMutex
}

// OnlinePopulationMockGetRolePopulationExpectation specifies expectation struct of the OnlinePopulation.GetRolePopulation
type OnlinePopulationMockGetRolePopulationExpectation struct {
	mock    *OnlinePopulationMock
	params  *OnlinePopulationMockGetRolePopulationParams
	results *OnlinePopulationMockGetRolePopulationResults
	Counter uint64
}

// OnlinePopulationMockGetRolePopulationParams contains parameters of the OnlinePopulation.GetRolePopulation
type OnlinePopulationMockGetRolePopulationParams struct {
	role member.PrimaryRole
}

// OnlinePopulationMockGetRolePopulationResults contains results of the OnlinePopulation.GetRolePopulation
type OnlinePopulationMockGetRolePopulationResults struct {
	r1 RolePopulation
}

// Expect sets up expected params for OnlinePopulation.GetRolePopulation
func (mmGetRolePopulation *mOnlinePopulationMockGetRolePopulation) Expect(role member.PrimaryRole) *mOnlinePopulationMockGetRolePopulation {
	if mmGetRolePopulation.mock.funcGetRolePopulation != nil {
		mmGetRolePopulation.mock.t.Fatalf("OnlinePopulationMock.GetRolePopulation mock is already set by Set")
	}

	if mmGetRolePopulation.defaultExpectation == nil {
		mmGetRolePopulation.defaultExpectation = &OnlinePopulationMockGetRolePopulationExpectation{}
	}

	mmGetRolePopulation.defaultExpectation.params = &OnlinePopulationMockGetRolePopulationParams{role}
	for _, e := range mmGetRolePopulation.expectations {
		if minimock.Equal(e.params, mmGetRolePopulation.defaultExpectation.params) {
			mmGetRolePopulation.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetRolePopulation.defaultExpectation.params)
		}
	}

	return mmGetRolePopulation
}

// Inspect accepts an inspector function that has same arguments as the OnlinePopulation.GetRolePopulation
func (mmGetRolePopulation *mOnlinePopulationMockGetRolePopulation) Inspect(f func(role member.PrimaryRole)) *mOnlinePopulationMockGetRolePopulation {
	if mmGetRolePopulation.mock.inspectFuncGetRolePopulation != nil {
		mmGetRolePopulation.mock.t.Fatalf("Inspect function is already set for OnlinePopulationMock.GetRolePopulation")
	}

	mmGetRolePopulation.mock.inspectFuncGetRolePopulation = f

	return mmGetRolePopulation
}

// Return sets up results that will be returned by OnlinePopulation.GetRolePopulation
func (mmGetRolePopulation *mOnlinePopulationMockGetRolePopulation) Return(r1 RolePopulation) *OnlinePopulationMock {
	if mmGetRolePopulation.mock.funcGetRolePopulation != nil {
		mmGetRolePopulation.mock.t.Fatalf("OnlinePopulationMock.GetRolePopulation mock is already set by Set")
	}

	if mmGetRolePopulation.defaultExpectation == nil {
		mmGetRolePopulation.defaultExpectation = &OnlinePopulationMockGetRolePopulationExpectation{mock: mmGetRolePopulation.mock}
	}
	mmGetRolePopulation.defaultExpectation.results = &OnlinePopulationMockGetRolePopulationResults{r1}
	return mmGetRolePopulation.mock
}

//Set uses given function f to mock the OnlinePopulation.GetRolePopulation method
func (mmGetRolePopulation *mOnlinePopulationMockGetRolePopulation) Set(f func(role member.PrimaryRole) (r1 RolePopulation)) *OnlinePopulationMock {
	if mmGetRolePopulation.defaultExpectation != nil {
		mmGetRolePopulation.mock.t.Fatalf("Default expectation is already set for the OnlinePopulation.GetRolePopulation method")
	}

	if len(mmGetRolePopulation.expectations) > 0 {
		mmGetRolePopulation.mock.t.Fatalf("Some expectations are already set for the OnlinePopulation.GetRolePopulation method")
	}

	mmGetRolePopulation.mock.funcGetRolePopulation = f
	return mmGetRolePopulation.mock
}

// When sets expectation for the OnlinePopulation.GetRolePopulation which will trigger the result defined by the following
// Then helper
func (mmGetRolePopulation *mOnlinePopulationMockGetRolePopulation) When(role member.PrimaryRole) *OnlinePopulationMockGetRolePopulationExpectation {
	if mmGetRolePopulation.mock.funcGetRolePopulation != nil {
		mmGetRolePopulation.mock.t.Fatalf("OnlinePopulationMock.GetRolePopulation mock is already set by Set")
	}

	expectation := &OnlinePopulationMockGetRolePopulationExpectation{
		mock:   mmGetRolePopulation.mock,
		params: &OnlinePopulationMockGetRolePopulationParams{role},
	}
	mmGetRolePopulation.expectations = append(mmGetRolePopulation.expectations, expectation)
	return expectation
}

// Then sets up OnlinePopulation.GetRolePopulation return parameters for the expectation previously defined by the When method
func (e *OnlinePopulationMockGetRolePopulationExpectation) Then(r1 RolePopulation) *OnlinePopulationMock {
	e.results = &OnlinePopulationMockGetRolePopulationResults{r1}
	return e.mock
}

// GetRolePopulation implements OnlinePopulation
func (mmGetRolePopulation *OnlinePopulationMock) GetRolePopulation(role member.PrimaryRole) (r1 RolePopulation) {
	mm_atomic.AddUint64(&mmGetRolePopulation.beforeGetRolePopulationCounter, 1)
	defer mm_atomic.AddUint64(&mmGetRolePopulation.afterGetRolePopulationCounter, 1)

	if mmGetRolePopulation.inspectFuncGetRolePopulation != nil {
		mmGetRolePopulation.inspectFuncGetRolePopulation(role)
	}

	mm_params := &OnlinePopulationMockGetRolePopulationParams{role}

	// Record call args
	mmGetRolePopulation.GetRolePopulationMock.mutex.Lock()
	mmGetRolePopulation.GetRolePopulationMock.callArgs = append(mmGetRolePopulation.GetRolePopulationMock.callArgs, mm_params)
	mmGetRolePopulation.GetRolePopulationMock.mutex.Unlock()

	for _, e := range mmGetRolePopulation.GetRolePopulationMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1
		}
	}

	if mmGetRolePopulation.GetRolePopulationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetRolePopulation.GetRolePopulationMock.defaultExpectation.Counter, 1)
		mm_want := mmGetRolePopulation.GetRolePopulationMock.defaultExpectation.params
		mm_got := OnlinePopulationMockGetRolePopulationParams{role}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetRolePopulation.t.Errorf("OnlinePopulationMock.GetRolePopulation got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetRolePopulation.GetRolePopulationMock.defaultExpectation.results
		if mm_results == nil {
			mmGetRolePopulation.t.Fatal("No results are set for the OnlinePopulationMock.GetRolePopulation")
		}
		return (*mm_results).r1
	}
	if mmGetRolePopulation.funcGetRolePopulation != nil {
		return mmGetRolePopulation.funcGetRolePopulation(role)
	}
	mmGetRolePopulation.t.Fatalf("Unexpected call to OnlinePopulationMock.GetRolePopulation. %v", role)
	return
}

// GetRolePopulationAfterCounter returns a count of finished OnlinePopulationMock.GetRolePopulation invocations
func (mmGetRolePopulation *OnlinePopulationMock) GetRolePopulationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRolePopulation.afterGetRolePopulationCounter)
}

// GetRolePopulationBeforeCounter returns a count of OnlinePopulationMock.GetRolePopulation invocations
func (mmGetRolePopulation *OnlinePopulationMock) GetRolePopulationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRolePopulation.beforeGetRolePopulationCounter)
}

// Calls returns a list of arguments used in each call to OnlinePopulationMock.GetRolePopulation.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetRolePopulation *mOnlinePopulationMockGetRolePopulation) Calls() []*OnlinePopulationMockGetRolePopulationParams {
	mmGetRolePopulation.mutex.RLock()

	argCopy := make([]*OnlinePopulationMockGetRolePopulationParams, len(mmGetRolePopulation.callArgs))
	copy(argCopy, mmGetRolePopulation.callArgs)

	mmGetRolePopulation.mutex.RUnlock()

	return argCopy
}

// MinimockGetRolePopulationDone returns true if the count of the GetRolePopulation invocations corresponds
// the number of defined expectations
func (m *OnlinePopulationMock) MinimockGetRolePopulationDone() bool {
	for _, e := range m.GetRolePopulationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetRolePopulationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetRolePopulationCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRolePopulation != nil && mm_atomic.LoadUint64(&m.afterGetRolePopulationCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetRolePopulationInspect logs each unmet expectation
func (m *OnlinePopulationMock) MinimockGetRolePopulationInspect() {
	for _, e := range m.GetRolePopulationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OnlinePopulationMock.GetRolePopulation with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetRolePopulationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetRolePopulationCounter) < 1 {
		if m.GetRolePopulationMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OnlinePopulationMock.GetRolePopulation")
		} else {
			m.t.Errorf("Expected call to OnlinePopulationMock.GetRolePopulation with params: %#v", *m.GetRolePopulationMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRolePopulation != nil && mm_atomic.LoadUint64(&m.afterGetRolePopulationCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetRolePopulation")
	}
}

type mOnlinePopulationMockGetSuspendedCount struct {
	mock               *OnlinePopulationMock
	defaultExpectation *OnlinePopulationMockGetSuspendedCountExpectation
	expectations       []*OnlinePopulationMockGetSuspendedCountExpectation
}

// OnlinePopulationMockGetSuspendedCountExpectation specifies expectation struct of the OnlinePopulation.GetSuspendedCount
type OnlinePopulationMockGetSuspendedCountExpectation struct {
	mock *OnlinePopulationMock

	results *OnlinePopulationMockGetSuspendedCountResults
	Counter uint64
}

// OnlinePopulationMockGetSuspendedCountResults contains results of the OnlinePopulation.GetSuspendedCount
type OnlinePopulationMockGetSuspendedCountResults struct {
	i1 int
}

// Expect sets up expected params for OnlinePopulation.GetSuspendedCount
func (mmGetSuspendedCount *mOnlinePopulationMockGetSuspendedCount) Expect() *mOnlinePopulationMockGetSuspendedCount {
	if mmGetSuspendedCount.mock.funcGetSuspendedCount != nil {
		mmGetSuspendedCount.mock.t.Fatalf("OnlinePopulationMock.GetSuspendedCount mock is already set by Set")
	}

	if mmGetSuspendedCount.defaultExpectation == nil {
		mmGetSuspendedCount.defaultExpectation = &OnlinePopulationMockGetSuspendedCountExpectation{}
	}

	return mmGetSuspendedCount
}

// Inspect accepts an inspector function that has same arguments as the OnlinePopulation.GetSuspendedCount
func (mmGetSuspendedCount *mOnlinePopulationMockGetSuspendedCount) Inspect(f func()) *mOnlinePopulationMockGetSuspendedCount {
	if mmGetSuspendedCount.mock.inspectFuncGetSuspendedCount != nil {
		mmGetSuspendedCount.mock.t.Fatalf("Inspect function is already set for OnlinePopulationMock.GetSuspendedCount")
	}

	mmGetSuspendedCount.mock.inspectFuncGetSuspendedCount = f

	return mmGetSuspendedCount
}

// Return sets up results that will be returned by OnlinePopulation.GetSuspendedCount
func (mmGetSuspendedCount *mOnlinePopulationMockGetSuspendedCount) Return(i1 int) *OnlinePopulationMock {
	if mmGetSuspendedCount.mock.funcGetSuspendedCount != nil {
		mmGetSuspendedCount.mock.t.Fatalf("OnlinePopulationMock.GetSuspendedCount mock is already set by Set")
	}

	if mmGetSuspendedCount.defaultExpectation == nil {
		mmGetSuspendedCount.defaultExpectation = &OnlinePopulationMockGetSuspendedCountExpectation{mock: mmGetSuspendedCount.mock}
	}
	mmGetSuspendedCount.defaultExpectation.results = &OnlinePopulationMockGetSuspendedCountResults{i1}
	return mmGetSuspendedCount.mock
}

//Set uses given function f to mock the OnlinePopulation.GetSuspendedCount method
func (mmGetSuspendedCount *mOnlinePopulationMockGetSuspendedCount) Set(f func() (i1 int)) *OnlinePopulationMock {
	if mmGetSuspendedCount.defaultExpectation != nil {
		mmGetSuspendedCount.mock.t.Fatalf("Default expectation is already set for the OnlinePopulation.GetSuspendedCount method")
	}

	if len(mmGetSuspendedCount.expectations) > 0 {
		mmGetSuspendedCount.mock.t.Fatalf("Some expectations are already set for the OnlinePopulation.GetSuspendedCount method")
	}

	mmGetSuspendedCount.mock.funcGetSuspendedCount = f
	return mmGetSuspendedCount.mock
}

// GetSuspendedCount implements OnlinePopulation
func (mmGetSuspendedCount *OnlinePopulationMock) GetSuspendedCount() (i1 int) {
	mm_atomic.AddUint64(&mmGetSuspendedCount.beforeGetSuspendedCountCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSuspendedCount.afterGetSuspendedCountCounter, 1)

	if mmGetSuspendedCount.inspectFuncGetSuspendedCount != nil {
		mmGetSuspendedCount.inspectFuncGetSuspendedCount()
	}

	if mmGetSuspendedCount.GetSuspendedCountMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSuspendedCount.GetSuspendedCountMock.defaultExpectation.Counter, 1)

		mm_results := mmGetSuspendedCount.GetSuspendedCountMock.defaultExpectation.results
		if mm_results == nil {
			mmGetSuspendedCount.t.Fatal("No results are set for the OnlinePopulationMock.GetSuspendedCount")
		}
		return (*mm_results).i1
	}
	if mmGetSuspendedCount.funcGetSuspendedCount != nil {
		return mmGetSuspendedCount.funcGetSuspendedCount()
	}
	mmGetSuspendedCount.t.Fatalf("Unexpected call to OnlinePopulationMock.GetSuspendedCount.")
	return
}

// GetSuspendedCountAfterCounter returns a count of finished OnlinePopulationMock.GetSuspendedCount invocations
func (mmGetSuspendedCount *OnlinePopulationMock) GetSuspendedCountAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSuspendedCount.afterGetSuspendedCountCounter)
}

// GetSuspendedCountBeforeCounter returns a count of OnlinePopulationMock.GetSuspendedCount invocations
func (mmGetSuspendedCount *OnlinePopulationMock) GetSuspendedCountBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSuspendedCount.beforeGetSuspendedCountCounter)
}

// MinimockGetSuspendedCountDone returns true if the count of the GetSuspendedCount invocations corresponds
// the number of defined expectations
func (m *OnlinePopulationMock) MinimockGetSuspendedCountDone() bool {
	for _, e := range m.GetSuspendedCountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSuspendedCountMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSuspendedCountCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSuspendedCount != nil && mm_atomic.LoadUint64(&m.afterGetSuspendedCountCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSuspendedCountInspect logs each unmet expectation
func (m *OnlinePopulationMock) MinimockGetSuspendedCountInspect() {
	for _, e := range m.GetSuspendedCountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OnlinePopulationMock.GetSuspendedCount")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSuspendedCountMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSuspendedCountCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetSuspendedCount")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSuspendedCount != nil && mm_atomic.LoadUint64(&m.afterGetSuspendedCountCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.GetSuspendedCount")
	}
}

type mOnlinePopulationMockIsClean struct {
	mock               *OnlinePopulationMock
	defaultExpectation *OnlinePopulationMockIsCleanExpectation
	expectations       []*OnlinePopulationMockIsCleanExpectation
}

// OnlinePopulationMockIsCleanExpectation specifies expectation struct of the OnlinePopulation.IsClean
type OnlinePopulationMockIsCleanExpectation struct {
	mock *OnlinePopulationMock

	results *OnlinePopulationMockIsCleanResults
	Counter uint64
}

// OnlinePopulationMockIsCleanResults contains results of the OnlinePopulation.IsClean
type OnlinePopulationMockIsCleanResults struct {
	b1 bool
}

// Expect sets up expected params for OnlinePopulation.IsClean
func (mmIsClean *mOnlinePopulationMockIsClean) Expect() *mOnlinePopulationMockIsClean {
	if mmIsClean.mock.funcIsClean != nil {
		mmIsClean.mock.t.Fatalf("OnlinePopulationMock.IsClean mock is already set by Set")
	}

	if mmIsClean.defaultExpectation == nil {
		mmIsClean.defaultExpectation = &OnlinePopulationMockIsCleanExpectation{}
	}

	return mmIsClean
}

// Inspect accepts an inspector function that has same arguments as the OnlinePopulation.IsClean
func (mmIsClean *mOnlinePopulationMockIsClean) Inspect(f func()) *mOnlinePopulationMockIsClean {
	if mmIsClean.mock.inspectFuncIsClean != nil {
		mmIsClean.mock.t.Fatalf("Inspect function is already set for OnlinePopulationMock.IsClean")
	}

	mmIsClean.mock.inspectFuncIsClean = f

	return mmIsClean
}

// Return sets up results that will be returned by OnlinePopulation.IsClean
func (mmIsClean *mOnlinePopulationMockIsClean) Return(b1 bool) *OnlinePopulationMock {
	if mmIsClean.mock.funcIsClean != nil {
		mmIsClean.mock.t.Fatalf("OnlinePopulationMock.IsClean mock is already set by Set")
	}

	if mmIsClean.defaultExpectation == nil {
		mmIsClean.defaultExpectation = &OnlinePopulationMockIsCleanExpectation{mock: mmIsClean.mock}
	}
	mmIsClean.defaultExpectation.results = &OnlinePopulationMockIsCleanResults{b1}
	return mmIsClean.mock
}

//Set uses given function f to mock the OnlinePopulation.IsClean method
func (mmIsClean *mOnlinePopulationMockIsClean) Set(f func() (b1 bool)) *OnlinePopulationMock {
	if mmIsClean.defaultExpectation != nil {
		mmIsClean.mock.t.Fatalf("Default expectation is already set for the OnlinePopulation.IsClean method")
	}

	if len(mmIsClean.expectations) > 0 {
		mmIsClean.mock.t.Fatalf("Some expectations are already set for the OnlinePopulation.IsClean method")
	}

	mmIsClean.mock.funcIsClean = f
	return mmIsClean.mock
}

// IsClean implements OnlinePopulation
func (mmIsClean *OnlinePopulationMock) IsClean() (b1 bool) {
	mm_atomic.AddUint64(&mmIsClean.beforeIsCleanCounter, 1)
	defer mm_atomic.AddUint64(&mmIsClean.afterIsCleanCounter, 1)

	if mmIsClean.inspectFuncIsClean != nil {
		mmIsClean.inspectFuncIsClean()
	}

	if mmIsClean.IsCleanMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIsClean.IsCleanMock.defaultExpectation.Counter, 1)

		mm_results := mmIsClean.IsCleanMock.defaultExpectation.results
		if mm_results == nil {
			mmIsClean.t.Fatal("No results are set for the OnlinePopulationMock.IsClean")
		}
		return (*mm_results).b1
	}
	if mmIsClean.funcIsClean != nil {
		return mmIsClean.funcIsClean()
	}
	mmIsClean.t.Fatalf("Unexpected call to OnlinePopulationMock.IsClean.")
	return
}

// IsCleanAfterCounter returns a count of finished OnlinePopulationMock.IsClean invocations
func (mmIsClean *OnlinePopulationMock) IsCleanAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsClean.afterIsCleanCounter)
}

// IsCleanBeforeCounter returns a count of OnlinePopulationMock.IsClean invocations
func (mmIsClean *OnlinePopulationMock) IsCleanBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsClean.beforeIsCleanCounter)
}

// MinimockIsCleanDone returns true if the count of the IsClean invocations corresponds
// the number of defined expectations
func (m *OnlinePopulationMock) MinimockIsCleanDone() bool {
	for _, e := range m.IsCleanMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsCleanMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsCleanCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsClean != nil && mm_atomic.LoadUint64(&m.afterIsCleanCounter) < 1 {
		return false
	}
	return true
}

// MinimockIsCleanInspect logs each unmet expectation
func (m *OnlinePopulationMock) MinimockIsCleanInspect() {
	for _, e := range m.IsCleanMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OnlinePopulationMock.IsClean")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsCleanMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsCleanCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.IsClean")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsClean != nil && mm_atomic.LoadUint64(&m.afterIsCleanCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.IsClean")
	}
}

type mOnlinePopulationMockIsValid struct {
	mock               *OnlinePopulationMock
	defaultExpectation *OnlinePopulationMockIsValidExpectation
	expectations       []*OnlinePopulationMockIsValidExpectation
}

// OnlinePopulationMockIsValidExpectation specifies expectation struct of the OnlinePopulation.IsValid
type OnlinePopulationMockIsValidExpectation struct {
	mock *OnlinePopulationMock

	results *OnlinePopulationMockIsValidResults
	Counter uint64
}

// OnlinePopulationMockIsValidResults contains results of the OnlinePopulation.IsValid
type OnlinePopulationMockIsValidResults struct {
	b1 bool
}

// Expect sets up expected params for OnlinePopulation.IsValid
func (mmIsValid *mOnlinePopulationMockIsValid) Expect() *mOnlinePopulationMockIsValid {
	if mmIsValid.mock.funcIsValid != nil {
		mmIsValid.mock.t.Fatalf("OnlinePopulationMock.IsValid mock is already set by Set")
	}

	if mmIsValid.defaultExpectation == nil {
		mmIsValid.defaultExpectation = &OnlinePopulationMockIsValidExpectation{}
	}

	return mmIsValid
}

// Inspect accepts an inspector function that has same arguments as the OnlinePopulation.IsValid
func (mmIsValid *mOnlinePopulationMockIsValid) Inspect(f func()) *mOnlinePopulationMockIsValid {
	if mmIsValid.mock.inspectFuncIsValid != nil {
		mmIsValid.mock.t.Fatalf("Inspect function is already set for OnlinePopulationMock.IsValid")
	}

	mmIsValid.mock.inspectFuncIsValid = f

	return mmIsValid
}

// Return sets up results that will be returned by OnlinePopulation.IsValid
func (mmIsValid *mOnlinePopulationMockIsValid) Return(b1 bool) *OnlinePopulationMock {
	if mmIsValid.mock.funcIsValid != nil {
		mmIsValid.mock.t.Fatalf("OnlinePopulationMock.IsValid mock is already set by Set")
	}

	if mmIsValid.defaultExpectation == nil {
		mmIsValid.defaultExpectation = &OnlinePopulationMockIsValidExpectation{mock: mmIsValid.mock}
	}
	mmIsValid.defaultExpectation.results = &OnlinePopulationMockIsValidResults{b1}
	return mmIsValid.mock
}

//Set uses given function f to mock the OnlinePopulation.IsValid method
func (mmIsValid *mOnlinePopulationMockIsValid) Set(f func() (b1 bool)) *OnlinePopulationMock {
	if mmIsValid.defaultExpectation != nil {
		mmIsValid.mock.t.Fatalf("Default expectation is already set for the OnlinePopulation.IsValid method")
	}

	if len(mmIsValid.expectations) > 0 {
		mmIsValid.mock.t.Fatalf("Some expectations are already set for the OnlinePopulation.IsValid method")
	}

	mmIsValid.mock.funcIsValid = f
	return mmIsValid.mock
}

// IsValid implements OnlinePopulation
func (mmIsValid *OnlinePopulationMock) IsValid() (b1 bool) {
	mm_atomic.AddUint64(&mmIsValid.beforeIsValidCounter, 1)
	defer mm_atomic.AddUint64(&mmIsValid.afterIsValidCounter, 1)

	if mmIsValid.inspectFuncIsValid != nil {
		mmIsValid.inspectFuncIsValid()
	}

	if mmIsValid.IsValidMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIsValid.IsValidMock.defaultExpectation.Counter, 1)

		mm_results := mmIsValid.IsValidMock.defaultExpectation.results
		if mm_results == nil {
			mmIsValid.t.Fatal("No results are set for the OnlinePopulationMock.IsValid")
		}
		return (*mm_results).b1
	}
	if mmIsValid.funcIsValid != nil {
		return mmIsValid.funcIsValid()
	}
	mmIsValid.t.Fatalf("Unexpected call to OnlinePopulationMock.IsValid.")
	return
}

// IsValidAfterCounter returns a count of finished OnlinePopulationMock.IsValid invocations
func (mmIsValid *OnlinePopulationMock) IsValidAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsValid.afterIsValidCounter)
}

// IsValidBeforeCounter returns a count of OnlinePopulationMock.IsValid invocations
func (mmIsValid *OnlinePopulationMock) IsValidBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsValid.beforeIsValidCounter)
}

// MinimockIsValidDone returns true if the count of the IsValid invocations corresponds
// the number of defined expectations
func (m *OnlinePopulationMock) MinimockIsValidDone() bool {
	for _, e := range m.IsValidMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsValidMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsValidCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsValid != nil && mm_atomic.LoadUint64(&m.afterIsValidCounter) < 1 {
		return false
	}
	return true
}

// MinimockIsValidInspect logs each unmet expectation
func (m *OnlinePopulationMock) MinimockIsValidInspect() {
	for _, e := range m.IsValidMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OnlinePopulationMock.IsValid")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsValidMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsValidCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.IsValid")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsValid != nil && mm_atomic.LoadUint64(&m.afterIsValidCounter) < 1 {
		m.t.Error("Expected call to OnlinePopulationMock.IsValid")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OnlinePopulationMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockFindProfileInspect()

		m.MinimockGetIdleCountInspect()

		m.MinimockGetIdleProfilesInspect()

		m.MinimockGetIndexedCapacityInspect()

		m.MinimockGetIndexedCountInspect()

		m.MinimockGetLocalProfileInspect()

		m.MinimockGetMistrustedCountInspect()

		m.MinimockGetPoweredProfilesInspect()

		m.MinimockGetPoweredRolesInspect()

		m.MinimockGetProfileInspect()

		m.MinimockGetProfilesInspect()

		m.MinimockGetRolePopulationInspect()

		m.MinimockGetSuspendedCountInspect()

		m.MinimockIsCleanInspect()

		m.MinimockIsValidInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OnlinePopulationMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OnlinePopulationMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockFindProfileDone() &&
		m.MinimockGetIdleCountDone() &&
		m.MinimockGetIdleProfilesDone() &&
		m.MinimockGetIndexedCapacityDone() &&
		m.MinimockGetIndexedCountDone() &&
		m.MinimockGetLocalProfileDone() &&
		m.MinimockGetMistrustedCountDone() &&
		m.MinimockGetPoweredProfilesDone() &&
		m.MinimockGetPoweredRolesDone() &&
		m.MinimockGetProfileDone() &&
		m.MinimockGetProfilesDone() &&
		m.MinimockGetRolePopulationDone() &&
		m.MinimockGetSuspendedCountDone() &&
		m.MinimockIsCleanDone() &&
		m.MinimockIsValidDone()
}
