package beat

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/assured-ledger/ledger-core/network/consensus/gcpv2/api/member"
	"github.com/insolar/assured-ledger/ledger-core/pulse"
	"github.com/insolar/assured-ledger/ledger-core/reference"
)

// NodeKeeperMock implements NodeKeeper
type NodeKeeperMock struct {
	t minimock.Tester

	funcAddCommittedBeat          func(b1 Beat) (err error)
	inspectFuncAddCommittedBeat   func(b1 Beat)
	afterAddCommittedBeatCounter  uint64
	beforeAddCommittedBeatCounter uint64
	AddCommittedBeatMock          mNodeKeeperMockAddCommittedBeat

	funcAddExpectedBeat          func(b1 Beat) (err error)
	inspectFuncAddExpectedBeat   func(b1 Beat)
	afterAddExpectedBeatCounter  uint64
	beforeAddExpectedBeatCounter uint64
	AddExpectedBeatMock          mNodeKeeperMockAddExpectedBeat

	funcFindAnyLatestNodeSnapshot          func() (n1 NodeSnapshot)
	inspectFuncFindAnyLatestNodeSnapshot   func()
	afterFindAnyLatestNodeSnapshotCounter  uint64
	beforeFindAnyLatestNodeSnapshotCounter uint64
	FindAnyLatestNodeSnapshotMock          mNodeKeeperMockFindAnyLatestNodeSnapshot

	funcGetLocalNodeReference          func() (h1 reference.Holder)
	inspectFuncGetLocalNodeReference   func()
	afterGetLocalNodeReferenceCounter  uint64
	beforeGetLocalNodeReferenceCounter uint64
	GetLocalNodeReferenceMock          mNodeKeeperMockGetLocalNodeReference

	funcGetLocalNodeRole          func() (p1 member.PrimaryRole)
	inspectFuncGetLocalNodeRole   func()
	afterGetLocalNodeRoleCounter  uint64
	beforeGetLocalNodeRoleCounter uint64
	GetLocalNodeRoleMock          mNodeKeeperMockGetLocalNodeRole

	funcGetNodeSnapshot          func(n1 pulse.Number) (n2 NodeSnapshot)
	inspectFuncGetNodeSnapshot   func(n1 pulse.Number)
	afterGetNodeSnapshotCounter  uint64
	beforeGetNodeSnapshotCounter uint64
	GetNodeSnapshotMock          mNodeKeeperMockGetNodeSnapshot
}

// NewNodeKeeperMock returns a mock for NodeKeeper
func NewNodeKeeperMock(t minimock.Tester) *NodeKeeperMock {
	m := &NodeKeeperMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddCommittedBeatMock = mNodeKeeperMockAddCommittedBeat{mock: m}
	m.AddCommittedBeatMock.callArgs = []*NodeKeeperMockAddCommittedBeatParams{}

	m.AddExpectedBeatMock = mNodeKeeperMockAddExpectedBeat{mock: m}
	m.AddExpectedBeatMock.callArgs = []*NodeKeeperMockAddExpectedBeatParams{}

	m.FindAnyLatestNodeSnapshotMock = mNodeKeeperMockFindAnyLatestNodeSnapshot{mock: m}

	m.GetLocalNodeReferenceMock = mNodeKeeperMockGetLocalNodeReference{mock: m}

	m.GetLocalNodeRoleMock = mNodeKeeperMockGetLocalNodeRole{mock: m}

	m.GetNodeSnapshotMock = mNodeKeeperMockGetNodeSnapshot{mock: m}
	m.GetNodeSnapshotMock.callArgs = []*NodeKeeperMockGetNodeSnapshotParams{}

	return m
}

type mNodeKeeperMockAddCommittedBeat struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockAddCommittedBeatExpectation
	expectations       []*NodeKeeperMockAddCommittedBeatExpectation

	callArgs []*NodeKeeperMockAddCommittedBeatParams
	mutex    sync.RWMutex
}

// NodeKeeperMockAddCommittedBeatExpectation specifies expectation struct of the NodeKeeper.AddCommittedBeat
type NodeKeeperMockAddCommittedBeatExpectation struct {
	mock    *NodeKeeperMock
	params  *NodeKeeperMockAddCommittedBeatParams
	results *NodeKeeperMockAddCommittedBeatResults
	Counter uint64
}

// NodeKeeperMockAddCommittedBeatParams contains parameters of the NodeKeeper.AddCommittedBeat
type NodeKeeperMockAddCommittedBeatParams struct {
	b1 Beat
}

// NodeKeeperMockAddCommittedBeatResults contains results of the NodeKeeper.AddCommittedBeat
type NodeKeeperMockAddCommittedBeatResults struct {
	err error
}

// Expect sets up expected params for NodeKeeper.AddCommittedBeat
func (mmAddCommittedBeat *mNodeKeeperMockAddCommittedBeat) Expect(b1 Beat) *mNodeKeeperMockAddCommittedBeat {
	if mmAddCommittedBeat.mock.funcAddCommittedBeat != nil {
		mmAddCommittedBeat.mock.t.Fatalf("NodeKeeperMock.AddCommittedBeat mock is already set by Set")
	}

	if mmAddCommittedBeat.defaultExpectation == nil {
		mmAddCommittedBeat.defaultExpectation = &NodeKeeperMockAddCommittedBeatExpectation{}
	}

	mmAddCommittedBeat.defaultExpectation.params = &NodeKeeperMockAddCommittedBeatParams{b1}
	for _, e := range mmAddCommittedBeat.expectations {
		if minimock.Equal(e.params, mmAddCommittedBeat.defaultExpectation.params) {
			mmAddCommittedBeat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddCommittedBeat.defaultExpectation.params)
		}
	}

	return mmAddCommittedBeat
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.AddCommittedBeat
func (mmAddCommittedBeat *mNodeKeeperMockAddCommittedBeat) Inspect(f func(b1 Beat)) *mNodeKeeperMockAddCommittedBeat {
	if mmAddCommittedBeat.mock.inspectFuncAddCommittedBeat != nil {
		mmAddCommittedBeat.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.AddCommittedBeat")
	}

	mmAddCommittedBeat.mock.inspectFuncAddCommittedBeat = f

	return mmAddCommittedBeat
}

// Return sets up results that will be returned by NodeKeeper.AddCommittedBeat
func (mmAddCommittedBeat *mNodeKeeperMockAddCommittedBeat) Return(err error) *NodeKeeperMock {
	if mmAddCommittedBeat.mock.funcAddCommittedBeat != nil {
		mmAddCommittedBeat.mock.t.Fatalf("NodeKeeperMock.AddCommittedBeat mock is already set by Set")
	}

	if mmAddCommittedBeat.defaultExpectation == nil {
		mmAddCommittedBeat.defaultExpectation = &NodeKeeperMockAddCommittedBeatExpectation{mock: mmAddCommittedBeat.mock}
	}
	mmAddCommittedBeat.defaultExpectation.results = &NodeKeeperMockAddCommittedBeatResults{err}
	return mmAddCommittedBeat.mock
}

//Set uses given function f to mock the NodeKeeper.AddCommittedBeat method
func (mmAddCommittedBeat *mNodeKeeperMockAddCommittedBeat) Set(f func(b1 Beat) (err error)) *NodeKeeperMock {
	if mmAddCommittedBeat.defaultExpectation != nil {
		mmAddCommittedBeat.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.AddCommittedBeat method")
	}

	if len(mmAddCommittedBeat.expectations) > 0 {
		mmAddCommittedBeat.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.AddCommittedBeat method")
	}

	mmAddCommittedBeat.mock.funcAddCommittedBeat = f
	return mmAddCommittedBeat.mock
}

// When sets expectation for the NodeKeeper.AddCommittedBeat which will trigger the result defined by the following
// Then helper
func (mmAddCommittedBeat *mNodeKeeperMockAddCommittedBeat) When(b1 Beat) *NodeKeeperMockAddCommittedBeatExpectation {
	if mmAddCommittedBeat.mock.funcAddCommittedBeat != nil {
		mmAddCommittedBeat.mock.t.Fatalf("NodeKeeperMock.AddCommittedBeat mock is already set by Set")
	}

	expectation := &NodeKeeperMockAddCommittedBeatExpectation{
		mock:   mmAddCommittedBeat.mock,
		params: &NodeKeeperMockAddCommittedBeatParams{b1},
	}
	mmAddCommittedBeat.expectations = append(mmAddCommittedBeat.expectations, expectation)
	return expectation
}

// Then sets up NodeKeeper.AddCommittedBeat return parameters for the expectation previously defined by the When method
func (e *NodeKeeperMockAddCommittedBeatExpectation) Then(err error) *NodeKeeperMock {
	e.results = &NodeKeeperMockAddCommittedBeatResults{err}
	return e.mock
}

// AddCommittedBeat implements NodeKeeper
func (mmAddCommittedBeat *NodeKeeperMock) AddCommittedBeat(b1 Beat) (err error) {
	mm_atomic.AddUint64(&mmAddCommittedBeat.beforeAddCommittedBeatCounter, 1)
	defer mm_atomic.AddUint64(&mmAddCommittedBeat.afterAddCommittedBeatCounter, 1)

	if mmAddCommittedBeat.inspectFuncAddCommittedBeat != nil {
		mmAddCommittedBeat.inspectFuncAddCommittedBeat(b1)
	}

	mm_params := &NodeKeeperMockAddCommittedBeatParams{b1}

	// Record call args
	mmAddCommittedBeat.AddCommittedBeatMock.mutex.Lock()
	mmAddCommittedBeat.AddCommittedBeatMock.callArgs = append(mmAddCommittedBeat.AddCommittedBeatMock.callArgs, mm_params)
	mmAddCommittedBeat.AddCommittedBeatMock.mutex.Unlock()

	for _, e := range mmAddCommittedBeat.AddCommittedBeatMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAddCommittedBeat.AddCommittedBeatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddCommittedBeat.AddCommittedBeatMock.defaultExpectation.Counter, 1)
		mm_want := mmAddCommittedBeat.AddCommittedBeatMock.defaultExpectation.params
		mm_got := NodeKeeperMockAddCommittedBeatParams{b1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddCommittedBeat.t.Errorf("NodeKeeperMock.AddCommittedBeat got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddCommittedBeat.AddCommittedBeatMock.defaultExpectation.results
		if mm_results == nil {
			mmAddCommittedBeat.t.Fatal("No results are set for the NodeKeeperMock.AddCommittedBeat")
		}
		return (*mm_results).err
	}
	if mmAddCommittedBeat.funcAddCommittedBeat != nil {
		return mmAddCommittedBeat.funcAddCommittedBeat(b1)
	}
	mmAddCommittedBeat.t.Fatalf("Unexpected call to NodeKeeperMock.AddCommittedBeat. %v", b1)
	return
}

// AddCommittedBeatAfterCounter returns a count of finished NodeKeeperMock.AddCommittedBeat invocations
func (mmAddCommittedBeat *NodeKeeperMock) AddCommittedBeatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddCommittedBeat.afterAddCommittedBeatCounter)
}

// AddCommittedBeatBeforeCounter returns a count of NodeKeeperMock.AddCommittedBeat invocations
func (mmAddCommittedBeat *NodeKeeperMock) AddCommittedBeatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddCommittedBeat.beforeAddCommittedBeatCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.AddCommittedBeat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddCommittedBeat *mNodeKeeperMockAddCommittedBeat) Calls() []*NodeKeeperMockAddCommittedBeatParams {
	mmAddCommittedBeat.mutex.RLock()

	argCopy := make([]*NodeKeeperMockAddCommittedBeatParams, len(mmAddCommittedBeat.callArgs))
	copy(argCopy, mmAddCommittedBeat.callArgs)

	mmAddCommittedBeat.mutex.RUnlock()

	return argCopy
}

// MinimockAddCommittedBeatDone returns true if the count of the AddCommittedBeat invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockAddCommittedBeatDone() bool {
	for _, e := range m.AddCommittedBeatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddCommittedBeatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddCommittedBeatCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddCommittedBeat != nil && mm_atomic.LoadUint64(&m.afterAddCommittedBeatCounter) < 1 {
		return false
	}
	return true
}

// MinimockAddCommittedBeatInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockAddCommittedBeatInspect() {
	for _, e := range m.AddCommittedBeatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.AddCommittedBeat with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddCommittedBeatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddCommittedBeatCounter) < 1 {
		if m.AddCommittedBeatMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.AddCommittedBeat")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.AddCommittedBeat with params: %#v", *m.AddCommittedBeatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddCommittedBeat != nil && mm_atomic.LoadUint64(&m.afterAddCommittedBeatCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.AddCommittedBeat")
	}
}

type mNodeKeeperMockAddExpectedBeat struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockAddExpectedBeatExpectation
	expectations       []*NodeKeeperMockAddExpectedBeatExpectation

	callArgs []*NodeKeeperMockAddExpectedBeatParams
	mutex    sync.RWMutex
}

// NodeKeeperMockAddExpectedBeatExpectation specifies expectation struct of the NodeKeeper.AddExpectedBeat
type NodeKeeperMockAddExpectedBeatExpectation struct {
	mock    *NodeKeeperMock
	params  *NodeKeeperMockAddExpectedBeatParams
	results *NodeKeeperMockAddExpectedBeatResults
	Counter uint64
}

// NodeKeeperMockAddExpectedBeatParams contains parameters of the NodeKeeper.AddExpectedBeat
type NodeKeeperMockAddExpectedBeatParams struct {
	b1 Beat
}

// NodeKeeperMockAddExpectedBeatResults contains results of the NodeKeeper.AddExpectedBeat
type NodeKeeperMockAddExpectedBeatResults struct {
	err error
}

// Expect sets up expected params for NodeKeeper.AddExpectedBeat
func (mmAddExpectedBeat *mNodeKeeperMockAddExpectedBeat) Expect(b1 Beat) *mNodeKeeperMockAddExpectedBeat {
	if mmAddExpectedBeat.mock.funcAddExpectedBeat != nil {
		mmAddExpectedBeat.mock.t.Fatalf("NodeKeeperMock.AddExpectedBeat mock is already set by Set")
	}

	if mmAddExpectedBeat.defaultExpectation == nil {
		mmAddExpectedBeat.defaultExpectation = &NodeKeeperMockAddExpectedBeatExpectation{}
	}

	mmAddExpectedBeat.defaultExpectation.params = &NodeKeeperMockAddExpectedBeatParams{b1}
	for _, e := range mmAddExpectedBeat.expectations {
		if minimock.Equal(e.params, mmAddExpectedBeat.defaultExpectation.params) {
			mmAddExpectedBeat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddExpectedBeat.defaultExpectation.params)
		}
	}

	return mmAddExpectedBeat
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.AddExpectedBeat
func (mmAddExpectedBeat *mNodeKeeperMockAddExpectedBeat) Inspect(f func(b1 Beat)) *mNodeKeeperMockAddExpectedBeat {
	if mmAddExpectedBeat.mock.inspectFuncAddExpectedBeat != nil {
		mmAddExpectedBeat.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.AddExpectedBeat")
	}

	mmAddExpectedBeat.mock.inspectFuncAddExpectedBeat = f

	return mmAddExpectedBeat
}

// Return sets up results that will be returned by NodeKeeper.AddExpectedBeat
func (mmAddExpectedBeat *mNodeKeeperMockAddExpectedBeat) Return(err error) *NodeKeeperMock {
	if mmAddExpectedBeat.mock.funcAddExpectedBeat != nil {
		mmAddExpectedBeat.mock.t.Fatalf("NodeKeeperMock.AddExpectedBeat mock is already set by Set")
	}

	if mmAddExpectedBeat.defaultExpectation == nil {
		mmAddExpectedBeat.defaultExpectation = &NodeKeeperMockAddExpectedBeatExpectation{mock: mmAddExpectedBeat.mock}
	}
	mmAddExpectedBeat.defaultExpectation.results = &NodeKeeperMockAddExpectedBeatResults{err}
	return mmAddExpectedBeat.mock
}

//Set uses given function f to mock the NodeKeeper.AddExpectedBeat method
func (mmAddExpectedBeat *mNodeKeeperMockAddExpectedBeat) Set(f func(b1 Beat) (err error)) *NodeKeeperMock {
	if mmAddExpectedBeat.defaultExpectation != nil {
		mmAddExpectedBeat.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.AddExpectedBeat method")
	}

	if len(mmAddExpectedBeat.expectations) > 0 {
		mmAddExpectedBeat.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.AddExpectedBeat method")
	}

	mmAddExpectedBeat.mock.funcAddExpectedBeat = f
	return mmAddExpectedBeat.mock
}

// When sets expectation for the NodeKeeper.AddExpectedBeat which will trigger the result defined by the following
// Then helper
func (mmAddExpectedBeat *mNodeKeeperMockAddExpectedBeat) When(b1 Beat) *NodeKeeperMockAddExpectedBeatExpectation {
	if mmAddExpectedBeat.mock.funcAddExpectedBeat != nil {
		mmAddExpectedBeat.mock.t.Fatalf("NodeKeeperMock.AddExpectedBeat mock is already set by Set")
	}

	expectation := &NodeKeeperMockAddExpectedBeatExpectation{
		mock:   mmAddExpectedBeat.mock,
		params: &NodeKeeperMockAddExpectedBeatParams{b1},
	}
	mmAddExpectedBeat.expectations = append(mmAddExpectedBeat.expectations, expectation)
	return expectation
}

// Then sets up NodeKeeper.AddExpectedBeat return parameters for the expectation previously defined by the When method
func (e *NodeKeeperMockAddExpectedBeatExpectation) Then(err error) *NodeKeeperMock {
	e.results = &NodeKeeperMockAddExpectedBeatResults{err}
	return e.mock
}

// AddExpectedBeat implements NodeKeeper
func (mmAddExpectedBeat *NodeKeeperMock) AddExpectedBeat(b1 Beat) (err error) {
	mm_atomic.AddUint64(&mmAddExpectedBeat.beforeAddExpectedBeatCounter, 1)
	defer mm_atomic.AddUint64(&mmAddExpectedBeat.afterAddExpectedBeatCounter, 1)

	if mmAddExpectedBeat.inspectFuncAddExpectedBeat != nil {
		mmAddExpectedBeat.inspectFuncAddExpectedBeat(b1)
	}

	mm_params := &NodeKeeperMockAddExpectedBeatParams{b1}

	// Record call args
	mmAddExpectedBeat.AddExpectedBeatMock.mutex.Lock()
	mmAddExpectedBeat.AddExpectedBeatMock.callArgs = append(mmAddExpectedBeat.AddExpectedBeatMock.callArgs, mm_params)
	mmAddExpectedBeat.AddExpectedBeatMock.mutex.Unlock()

	for _, e := range mmAddExpectedBeat.AddExpectedBeatMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAddExpectedBeat.AddExpectedBeatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddExpectedBeat.AddExpectedBeatMock.defaultExpectation.Counter, 1)
		mm_want := mmAddExpectedBeat.AddExpectedBeatMock.defaultExpectation.params
		mm_got := NodeKeeperMockAddExpectedBeatParams{b1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddExpectedBeat.t.Errorf("NodeKeeperMock.AddExpectedBeat got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddExpectedBeat.AddExpectedBeatMock.defaultExpectation.results
		if mm_results == nil {
			mmAddExpectedBeat.t.Fatal("No results are set for the NodeKeeperMock.AddExpectedBeat")
		}
		return (*mm_results).err
	}
	if mmAddExpectedBeat.funcAddExpectedBeat != nil {
		return mmAddExpectedBeat.funcAddExpectedBeat(b1)
	}
	mmAddExpectedBeat.t.Fatalf("Unexpected call to NodeKeeperMock.AddExpectedBeat. %v", b1)
	return
}

// AddExpectedBeatAfterCounter returns a count of finished NodeKeeperMock.AddExpectedBeat invocations
func (mmAddExpectedBeat *NodeKeeperMock) AddExpectedBeatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddExpectedBeat.afterAddExpectedBeatCounter)
}

// AddExpectedBeatBeforeCounter returns a count of NodeKeeperMock.AddExpectedBeat invocations
func (mmAddExpectedBeat *NodeKeeperMock) AddExpectedBeatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddExpectedBeat.beforeAddExpectedBeatCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.AddExpectedBeat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddExpectedBeat *mNodeKeeperMockAddExpectedBeat) Calls() []*NodeKeeperMockAddExpectedBeatParams {
	mmAddExpectedBeat.mutex.RLock()

	argCopy := make([]*NodeKeeperMockAddExpectedBeatParams, len(mmAddExpectedBeat.callArgs))
	copy(argCopy, mmAddExpectedBeat.callArgs)

	mmAddExpectedBeat.mutex.RUnlock()

	return argCopy
}

// MinimockAddExpectedBeatDone returns true if the count of the AddExpectedBeat invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockAddExpectedBeatDone() bool {
	for _, e := range m.AddExpectedBeatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddExpectedBeatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddExpectedBeatCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddExpectedBeat != nil && mm_atomic.LoadUint64(&m.afterAddExpectedBeatCounter) < 1 {
		return false
	}
	return true
}

// MinimockAddExpectedBeatInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockAddExpectedBeatInspect() {
	for _, e := range m.AddExpectedBeatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.AddExpectedBeat with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddExpectedBeatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddExpectedBeatCounter) < 1 {
		if m.AddExpectedBeatMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.AddExpectedBeat")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.AddExpectedBeat with params: %#v", *m.AddExpectedBeatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddExpectedBeat != nil && mm_atomic.LoadUint64(&m.afterAddExpectedBeatCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.AddExpectedBeat")
	}
}

type mNodeKeeperMockFindAnyLatestNodeSnapshot struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockFindAnyLatestNodeSnapshotExpectation
	expectations       []*NodeKeeperMockFindAnyLatestNodeSnapshotExpectation
}

// NodeKeeperMockFindAnyLatestNodeSnapshotExpectation specifies expectation struct of the NodeKeeper.FindAnyLatestNodeSnapshot
type NodeKeeperMockFindAnyLatestNodeSnapshotExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockFindAnyLatestNodeSnapshotResults
	Counter uint64
}

// NodeKeeperMockFindAnyLatestNodeSnapshotResults contains results of the NodeKeeper.FindAnyLatestNodeSnapshot
type NodeKeeperMockFindAnyLatestNodeSnapshotResults struct {
	n1 NodeSnapshot
}

// Expect sets up expected params for NodeKeeper.FindAnyLatestNodeSnapshot
func (mmFindAnyLatestNodeSnapshot *mNodeKeeperMockFindAnyLatestNodeSnapshot) Expect() *mNodeKeeperMockFindAnyLatestNodeSnapshot {
	if mmFindAnyLatestNodeSnapshot.mock.funcFindAnyLatestNodeSnapshot != nil {
		mmFindAnyLatestNodeSnapshot.mock.t.Fatalf("NodeKeeperMock.FindAnyLatestNodeSnapshot mock is already set by Set")
	}

	if mmFindAnyLatestNodeSnapshot.defaultExpectation == nil {
		mmFindAnyLatestNodeSnapshot.defaultExpectation = &NodeKeeperMockFindAnyLatestNodeSnapshotExpectation{}
	}

	return mmFindAnyLatestNodeSnapshot
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.FindAnyLatestNodeSnapshot
func (mmFindAnyLatestNodeSnapshot *mNodeKeeperMockFindAnyLatestNodeSnapshot) Inspect(f func()) *mNodeKeeperMockFindAnyLatestNodeSnapshot {
	if mmFindAnyLatestNodeSnapshot.mock.inspectFuncFindAnyLatestNodeSnapshot != nil {
		mmFindAnyLatestNodeSnapshot.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.FindAnyLatestNodeSnapshot")
	}

	mmFindAnyLatestNodeSnapshot.mock.inspectFuncFindAnyLatestNodeSnapshot = f

	return mmFindAnyLatestNodeSnapshot
}

// Return sets up results that will be returned by NodeKeeper.FindAnyLatestNodeSnapshot
func (mmFindAnyLatestNodeSnapshot *mNodeKeeperMockFindAnyLatestNodeSnapshot) Return(n1 NodeSnapshot) *NodeKeeperMock {
	if mmFindAnyLatestNodeSnapshot.mock.funcFindAnyLatestNodeSnapshot != nil {
		mmFindAnyLatestNodeSnapshot.mock.t.Fatalf("NodeKeeperMock.FindAnyLatestNodeSnapshot mock is already set by Set")
	}

	if mmFindAnyLatestNodeSnapshot.defaultExpectation == nil {
		mmFindAnyLatestNodeSnapshot.defaultExpectation = &NodeKeeperMockFindAnyLatestNodeSnapshotExpectation{mock: mmFindAnyLatestNodeSnapshot.mock}
	}
	mmFindAnyLatestNodeSnapshot.defaultExpectation.results = &NodeKeeperMockFindAnyLatestNodeSnapshotResults{n1}
	return mmFindAnyLatestNodeSnapshot.mock
}

//Set uses given function f to mock the NodeKeeper.FindAnyLatestNodeSnapshot method
func (mmFindAnyLatestNodeSnapshot *mNodeKeeperMockFindAnyLatestNodeSnapshot) Set(f func() (n1 NodeSnapshot)) *NodeKeeperMock {
	if mmFindAnyLatestNodeSnapshot.defaultExpectation != nil {
		mmFindAnyLatestNodeSnapshot.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.FindAnyLatestNodeSnapshot method")
	}

	if len(mmFindAnyLatestNodeSnapshot.expectations) > 0 {
		mmFindAnyLatestNodeSnapshot.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.FindAnyLatestNodeSnapshot method")
	}

	mmFindAnyLatestNodeSnapshot.mock.funcFindAnyLatestNodeSnapshot = f
	return mmFindAnyLatestNodeSnapshot.mock
}

// FindAnyLatestNodeSnapshot implements NodeKeeper
func (mmFindAnyLatestNodeSnapshot *NodeKeeperMock) FindAnyLatestNodeSnapshot() (n1 NodeSnapshot) {
	mm_atomic.AddUint64(&mmFindAnyLatestNodeSnapshot.beforeFindAnyLatestNodeSnapshotCounter, 1)
	defer mm_atomic.AddUint64(&mmFindAnyLatestNodeSnapshot.afterFindAnyLatestNodeSnapshotCounter, 1)

	if mmFindAnyLatestNodeSnapshot.inspectFuncFindAnyLatestNodeSnapshot != nil {
		mmFindAnyLatestNodeSnapshot.inspectFuncFindAnyLatestNodeSnapshot()
	}

	if mmFindAnyLatestNodeSnapshot.FindAnyLatestNodeSnapshotMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFindAnyLatestNodeSnapshot.FindAnyLatestNodeSnapshotMock.defaultExpectation.Counter, 1)

		mm_results := mmFindAnyLatestNodeSnapshot.FindAnyLatestNodeSnapshotMock.defaultExpectation.results
		if mm_results == nil {
			mmFindAnyLatestNodeSnapshot.t.Fatal("No results are set for the NodeKeeperMock.FindAnyLatestNodeSnapshot")
		}
		return (*mm_results).n1
	}
	if mmFindAnyLatestNodeSnapshot.funcFindAnyLatestNodeSnapshot != nil {
		return mmFindAnyLatestNodeSnapshot.funcFindAnyLatestNodeSnapshot()
	}
	mmFindAnyLatestNodeSnapshot.t.Fatalf("Unexpected call to NodeKeeperMock.FindAnyLatestNodeSnapshot.")
	return
}

// FindAnyLatestNodeSnapshotAfterCounter returns a count of finished NodeKeeperMock.FindAnyLatestNodeSnapshot invocations
func (mmFindAnyLatestNodeSnapshot *NodeKeeperMock) FindAnyLatestNodeSnapshotAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindAnyLatestNodeSnapshot.afterFindAnyLatestNodeSnapshotCounter)
}

// FindAnyLatestNodeSnapshotBeforeCounter returns a count of NodeKeeperMock.FindAnyLatestNodeSnapshot invocations
func (mmFindAnyLatestNodeSnapshot *NodeKeeperMock) FindAnyLatestNodeSnapshotBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindAnyLatestNodeSnapshot.beforeFindAnyLatestNodeSnapshotCounter)
}

// MinimockFindAnyLatestNodeSnapshotDone returns true if the count of the FindAnyLatestNodeSnapshot invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockFindAnyLatestNodeSnapshotDone() bool {
	for _, e := range m.FindAnyLatestNodeSnapshotMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindAnyLatestNodeSnapshotMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindAnyLatestNodeSnapshotCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindAnyLatestNodeSnapshot != nil && mm_atomic.LoadUint64(&m.afterFindAnyLatestNodeSnapshotCounter) < 1 {
		return false
	}
	return true
}

// MinimockFindAnyLatestNodeSnapshotInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockFindAnyLatestNodeSnapshotInspect() {
	for _, e := range m.FindAnyLatestNodeSnapshotMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.FindAnyLatestNodeSnapshot")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindAnyLatestNodeSnapshotMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindAnyLatestNodeSnapshotCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.FindAnyLatestNodeSnapshot")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindAnyLatestNodeSnapshot != nil && mm_atomic.LoadUint64(&m.afterFindAnyLatestNodeSnapshotCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.FindAnyLatestNodeSnapshot")
	}
}

type mNodeKeeperMockGetLocalNodeReference struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetLocalNodeReferenceExpectation
	expectations       []*NodeKeeperMockGetLocalNodeReferenceExpectation
}

// NodeKeeperMockGetLocalNodeReferenceExpectation specifies expectation struct of the NodeKeeper.GetLocalNodeReference
type NodeKeeperMockGetLocalNodeReferenceExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetLocalNodeReferenceResults
	Counter uint64
}

// NodeKeeperMockGetLocalNodeReferenceResults contains results of the NodeKeeper.GetLocalNodeReference
type NodeKeeperMockGetLocalNodeReferenceResults struct {
	h1 reference.Holder
}

// Expect sets up expected params for NodeKeeper.GetLocalNodeReference
func (mmGetLocalNodeReference *mNodeKeeperMockGetLocalNodeReference) Expect() *mNodeKeeperMockGetLocalNodeReference {
	if mmGetLocalNodeReference.mock.funcGetLocalNodeReference != nil {
		mmGetLocalNodeReference.mock.t.Fatalf("NodeKeeperMock.GetLocalNodeReference mock is already set by Set")
	}

	if mmGetLocalNodeReference.defaultExpectation == nil {
		mmGetLocalNodeReference.defaultExpectation = &NodeKeeperMockGetLocalNodeReferenceExpectation{}
	}

	return mmGetLocalNodeReference
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetLocalNodeReference
func (mmGetLocalNodeReference *mNodeKeeperMockGetLocalNodeReference) Inspect(f func()) *mNodeKeeperMockGetLocalNodeReference {
	if mmGetLocalNodeReference.mock.inspectFuncGetLocalNodeReference != nil {
		mmGetLocalNodeReference.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetLocalNodeReference")
	}

	mmGetLocalNodeReference.mock.inspectFuncGetLocalNodeReference = f

	return mmGetLocalNodeReference
}

// Return sets up results that will be returned by NodeKeeper.GetLocalNodeReference
func (mmGetLocalNodeReference *mNodeKeeperMockGetLocalNodeReference) Return(h1 reference.Holder) *NodeKeeperMock {
	if mmGetLocalNodeReference.mock.funcGetLocalNodeReference != nil {
		mmGetLocalNodeReference.mock.t.Fatalf("NodeKeeperMock.GetLocalNodeReference mock is already set by Set")
	}

	if mmGetLocalNodeReference.defaultExpectation == nil {
		mmGetLocalNodeReference.defaultExpectation = &NodeKeeperMockGetLocalNodeReferenceExpectation{mock: mmGetLocalNodeReference.mock}
	}
	mmGetLocalNodeReference.defaultExpectation.results = &NodeKeeperMockGetLocalNodeReferenceResults{h1}
	return mmGetLocalNodeReference.mock
}

//Set uses given function f to mock the NodeKeeper.GetLocalNodeReference method
func (mmGetLocalNodeReference *mNodeKeeperMockGetLocalNodeReference) Set(f func() (h1 reference.Holder)) *NodeKeeperMock {
	if mmGetLocalNodeReference.defaultExpectation != nil {
		mmGetLocalNodeReference.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetLocalNodeReference method")
	}

	if len(mmGetLocalNodeReference.expectations) > 0 {
		mmGetLocalNodeReference.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetLocalNodeReference method")
	}

	mmGetLocalNodeReference.mock.funcGetLocalNodeReference = f
	return mmGetLocalNodeReference.mock
}

// GetLocalNodeReference implements NodeKeeper
func (mmGetLocalNodeReference *NodeKeeperMock) GetLocalNodeReference() (h1 reference.Holder) {
	mm_atomic.AddUint64(&mmGetLocalNodeReference.beforeGetLocalNodeReferenceCounter, 1)
	defer mm_atomic.AddUint64(&mmGetLocalNodeReference.afterGetLocalNodeReferenceCounter, 1)

	if mmGetLocalNodeReference.inspectFuncGetLocalNodeReference != nil {
		mmGetLocalNodeReference.inspectFuncGetLocalNodeReference()
	}

	if mmGetLocalNodeReference.GetLocalNodeReferenceMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetLocalNodeReference.GetLocalNodeReferenceMock.defaultExpectation.Counter, 1)

		mm_results := mmGetLocalNodeReference.GetLocalNodeReferenceMock.defaultExpectation.results
		if mm_results == nil {
			mmGetLocalNodeReference.t.Fatal("No results are set for the NodeKeeperMock.GetLocalNodeReference")
		}
		return (*mm_results).h1
	}
	if mmGetLocalNodeReference.funcGetLocalNodeReference != nil {
		return mmGetLocalNodeReference.funcGetLocalNodeReference()
	}
	mmGetLocalNodeReference.t.Fatalf("Unexpected call to NodeKeeperMock.GetLocalNodeReference.")
	return
}

// GetLocalNodeReferenceAfterCounter returns a count of finished NodeKeeperMock.GetLocalNodeReference invocations
func (mmGetLocalNodeReference *NodeKeeperMock) GetLocalNodeReferenceAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLocalNodeReference.afterGetLocalNodeReferenceCounter)
}

// GetLocalNodeReferenceBeforeCounter returns a count of NodeKeeperMock.GetLocalNodeReference invocations
func (mmGetLocalNodeReference *NodeKeeperMock) GetLocalNodeReferenceBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLocalNodeReference.beforeGetLocalNodeReferenceCounter)
}

// MinimockGetLocalNodeReferenceDone returns true if the count of the GetLocalNodeReference invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetLocalNodeReferenceDone() bool {
	for _, e := range m.GetLocalNodeReferenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLocalNodeReferenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeReferenceCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLocalNodeReference != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeReferenceCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetLocalNodeReferenceInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetLocalNodeReferenceInspect() {
	for _, e := range m.GetLocalNodeReferenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetLocalNodeReference")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLocalNodeReferenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeReferenceCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetLocalNodeReference")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLocalNodeReference != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeReferenceCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetLocalNodeReference")
	}
}

type mNodeKeeperMockGetLocalNodeRole struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetLocalNodeRoleExpectation
	expectations       []*NodeKeeperMockGetLocalNodeRoleExpectation
}

// NodeKeeperMockGetLocalNodeRoleExpectation specifies expectation struct of the NodeKeeper.GetLocalNodeRole
type NodeKeeperMockGetLocalNodeRoleExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetLocalNodeRoleResults
	Counter uint64
}

// NodeKeeperMockGetLocalNodeRoleResults contains results of the NodeKeeper.GetLocalNodeRole
type NodeKeeperMockGetLocalNodeRoleResults struct {
	p1 member.PrimaryRole
}

// Expect sets up expected params for NodeKeeper.GetLocalNodeRole
func (mmGetLocalNodeRole *mNodeKeeperMockGetLocalNodeRole) Expect() *mNodeKeeperMockGetLocalNodeRole {
	if mmGetLocalNodeRole.mock.funcGetLocalNodeRole != nil {
		mmGetLocalNodeRole.mock.t.Fatalf("NodeKeeperMock.GetLocalNodeRole mock is already set by Set")
	}

	if mmGetLocalNodeRole.defaultExpectation == nil {
		mmGetLocalNodeRole.defaultExpectation = &NodeKeeperMockGetLocalNodeRoleExpectation{}
	}

	return mmGetLocalNodeRole
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetLocalNodeRole
func (mmGetLocalNodeRole *mNodeKeeperMockGetLocalNodeRole) Inspect(f func()) *mNodeKeeperMockGetLocalNodeRole {
	if mmGetLocalNodeRole.mock.inspectFuncGetLocalNodeRole != nil {
		mmGetLocalNodeRole.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetLocalNodeRole")
	}

	mmGetLocalNodeRole.mock.inspectFuncGetLocalNodeRole = f

	return mmGetLocalNodeRole
}

// Return sets up results that will be returned by NodeKeeper.GetLocalNodeRole
func (mmGetLocalNodeRole *mNodeKeeperMockGetLocalNodeRole) Return(p1 member.PrimaryRole) *NodeKeeperMock {
	if mmGetLocalNodeRole.mock.funcGetLocalNodeRole != nil {
		mmGetLocalNodeRole.mock.t.Fatalf("NodeKeeperMock.GetLocalNodeRole mock is already set by Set")
	}

	if mmGetLocalNodeRole.defaultExpectation == nil {
		mmGetLocalNodeRole.defaultExpectation = &NodeKeeperMockGetLocalNodeRoleExpectation{mock: mmGetLocalNodeRole.mock}
	}
	mmGetLocalNodeRole.defaultExpectation.results = &NodeKeeperMockGetLocalNodeRoleResults{p1}
	return mmGetLocalNodeRole.mock
}

//Set uses given function f to mock the NodeKeeper.GetLocalNodeRole method
func (mmGetLocalNodeRole *mNodeKeeperMockGetLocalNodeRole) Set(f func() (p1 member.PrimaryRole)) *NodeKeeperMock {
	if mmGetLocalNodeRole.defaultExpectation != nil {
		mmGetLocalNodeRole.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetLocalNodeRole method")
	}

	if len(mmGetLocalNodeRole.expectations) > 0 {
		mmGetLocalNodeRole.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetLocalNodeRole method")
	}

	mmGetLocalNodeRole.mock.funcGetLocalNodeRole = f
	return mmGetLocalNodeRole.mock
}

// GetLocalNodeRole implements NodeKeeper
func (mmGetLocalNodeRole *NodeKeeperMock) GetLocalNodeRole() (p1 member.PrimaryRole) {
	mm_atomic.AddUint64(&mmGetLocalNodeRole.beforeGetLocalNodeRoleCounter, 1)
	defer mm_atomic.AddUint64(&mmGetLocalNodeRole.afterGetLocalNodeRoleCounter, 1)

	if mmGetLocalNodeRole.inspectFuncGetLocalNodeRole != nil {
		mmGetLocalNodeRole.inspectFuncGetLocalNodeRole()
	}

	if mmGetLocalNodeRole.GetLocalNodeRoleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetLocalNodeRole.GetLocalNodeRoleMock.defaultExpectation.Counter, 1)

		mm_results := mmGetLocalNodeRole.GetLocalNodeRoleMock.defaultExpectation.results
		if mm_results == nil {
			mmGetLocalNodeRole.t.Fatal("No results are set for the NodeKeeperMock.GetLocalNodeRole")
		}
		return (*mm_results).p1
	}
	if mmGetLocalNodeRole.funcGetLocalNodeRole != nil {
		return mmGetLocalNodeRole.funcGetLocalNodeRole()
	}
	mmGetLocalNodeRole.t.Fatalf("Unexpected call to NodeKeeperMock.GetLocalNodeRole.")
	return
}

// GetLocalNodeRoleAfterCounter returns a count of finished NodeKeeperMock.GetLocalNodeRole invocations
func (mmGetLocalNodeRole *NodeKeeperMock) GetLocalNodeRoleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLocalNodeRole.afterGetLocalNodeRoleCounter)
}

// GetLocalNodeRoleBeforeCounter returns a count of NodeKeeperMock.GetLocalNodeRole invocations
func (mmGetLocalNodeRole *NodeKeeperMock) GetLocalNodeRoleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLocalNodeRole.beforeGetLocalNodeRoleCounter)
}

// MinimockGetLocalNodeRoleDone returns true if the count of the GetLocalNodeRole invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetLocalNodeRoleDone() bool {
	for _, e := range m.GetLocalNodeRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLocalNodeRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeRoleCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLocalNodeRole != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeRoleCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetLocalNodeRoleInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetLocalNodeRoleInspect() {
	for _, e := range m.GetLocalNodeRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetLocalNodeRole")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLocalNodeRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeRoleCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetLocalNodeRole")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLocalNodeRole != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeRoleCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetLocalNodeRole")
	}
}

type mNodeKeeperMockGetNodeSnapshot struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetNodeSnapshotExpectation
	expectations       []*NodeKeeperMockGetNodeSnapshotExpectation

	callArgs []*NodeKeeperMockGetNodeSnapshotParams
	mutex    sync.RWMutex
}

// NodeKeeperMockGetNodeSnapshotExpectation specifies expectation struct of the NodeKeeper.GetNodeSnapshot
type NodeKeeperMockGetNodeSnapshotExpectation struct {
	mock    *NodeKeeperMock
	params  *NodeKeeperMockGetNodeSnapshotParams
	results *NodeKeeperMockGetNodeSnapshotResults
	Counter uint64
}

// NodeKeeperMockGetNodeSnapshotParams contains parameters of the NodeKeeper.GetNodeSnapshot
type NodeKeeperMockGetNodeSnapshotParams struct {
	n1 pulse.Number
}

// NodeKeeperMockGetNodeSnapshotResults contains results of the NodeKeeper.GetNodeSnapshot
type NodeKeeperMockGetNodeSnapshotResults struct {
	n2 NodeSnapshot
}

// Expect sets up expected params for NodeKeeper.GetNodeSnapshot
func (mmGetNodeSnapshot *mNodeKeeperMockGetNodeSnapshot) Expect(n1 pulse.Number) *mNodeKeeperMockGetNodeSnapshot {
	if mmGetNodeSnapshot.mock.funcGetNodeSnapshot != nil {
		mmGetNodeSnapshot.mock.t.Fatalf("NodeKeeperMock.GetNodeSnapshot mock is already set by Set")
	}

	if mmGetNodeSnapshot.defaultExpectation == nil {
		mmGetNodeSnapshot.defaultExpectation = &NodeKeeperMockGetNodeSnapshotExpectation{}
	}

	mmGetNodeSnapshot.defaultExpectation.params = &NodeKeeperMockGetNodeSnapshotParams{n1}
	for _, e := range mmGetNodeSnapshot.expectations {
		if minimock.Equal(e.params, mmGetNodeSnapshot.defaultExpectation.params) {
			mmGetNodeSnapshot.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetNodeSnapshot.defaultExpectation.params)
		}
	}

	return mmGetNodeSnapshot
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetNodeSnapshot
func (mmGetNodeSnapshot *mNodeKeeperMockGetNodeSnapshot) Inspect(f func(n1 pulse.Number)) *mNodeKeeperMockGetNodeSnapshot {
	if mmGetNodeSnapshot.mock.inspectFuncGetNodeSnapshot != nil {
		mmGetNodeSnapshot.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetNodeSnapshot")
	}

	mmGetNodeSnapshot.mock.inspectFuncGetNodeSnapshot = f

	return mmGetNodeSnapshot
}

// Return sets up results that will be returned by NodeKeeper.GetNodeSnapshot
func (mmGetNodeSnapshot *mNodeKeeperMockGetNodeSnapshot) Return(n2 NodeSnapshot) *NodeKeeperMock {
	if mmGetNodeSnapshot.mock.funcGetNodeSnapshot != nil {
		mmGetNodeSnapshot.mock.t.Fatalf("NodeKeeperMock.GetNodeSnapshot mock is already set by Set")
	}

	if mmGetNodeSnapshot.defaultExpectation == nil {
		mmGetNodeSnapshot.defaultExpectation = &NodeKeeperMockGetNodeSnapshotExpectation{mock: mmGetNodeSnapshot.mock}
	}
	mmGetNodeSnapshot.defaultExpectation.results = &NodeKeeperMockGetNodeSnapshotResults{n2}
	return mmGetNodeSnapshot.mock
}

//Set uses given function f to mock the NodeKeeper.GetNodeSnapshot method
func (mmGetNodeSnapshot *mNodeKeeperMockGetNodeSnapshot) Set(f func(n1 pulse.Number) (n2 NodeSnapshot)) *NodeKeeperMock {
	if mmGetNodeSnapshot.defaultExpectation != nil {
		mmGetNodeSnapshot.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetNodeSnapshot method")
	}

	if len(mmGetNodeSnapshot.expectations) > 0 {
		mmGetNodeSnapshot.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetNodeSnapshot method")
	}

	mmGetNodeSnapshot.mock.funcGetNodeSnapshot = f
	return mmGetNodeSnapshot.mock
}

// When sets expectation for the NodeKeeper.GetNodeSnapshot which will trigger the result defined by the following
// Then helper
func (mmGetNodeSnapshot *mNodeKeeperMockGetNodeSnapshot) When(n1 pulse.Number) *NodeKeeperMockGetNodeSnapshotExpectation {
	if mmGetNodeSnapshot.mock.funcGetNodeSnapshot != nil {
		mmGetNodeSnapshot.mock.t.Fatalf("NodeKeeperMock.GetNodeSnapshot mock is already set by Set")
	}

	expectation := &NodeKeeperMockGetNodeSnapshotExpectation{
		mock:   mmGetNodeSnapshot.mock,
		params: &NodeKeeperMockGetNodeSnapshotParams{n1},
	}
	mmGetNodeSnapshot.expectations = append(mmGetNodeSnapshot.expectations, expectation)
	return expectation
}

// Then sets up NodeKeeper.GetNodeSnapshot return parameters for the expectation previously defined by the When method
func (e *NodeKeeperMockGetNodeSnapshotExpectation) Then(n2 NodeSnapshot) *NodeKeeperMock {
	e.results = &NodeKeeperMockGetNodeSnapshotResults{n2}
	return e.mock
}

// GetNodeSnapshot implements NodeKeeper
func (mmGetNodeSnapshot *NodeKeeperMock) GetNodeSnapshot(n1 pulse.Number) (n2 NodeSnapshot) {
	mm_atomic.AddUint64(&mmGetNodeSnapshot.beforeGetNodeSnapshotCounter, 1)
	defer mm_atomic.AddUint64(&mmGetNodeSnapshot.afterGetNodeSnapshotCounter, 1)

	if mmGetNodeSnapshot.inspectFuncGetNodeSnapshot != nil {
		mmGetNodeSnapshot.inspectFuncGetNodeSnapshot(n1)
	}

	mm_params := &NodeKeeperMockGetNodeSnapshotParams{n1}

	// Record call args
	mmGetNodeSnapshot.GetNodeSnapshotMock.mutex.Lock()
	mmGetNodeSnapshot.GetNodeSnapshotMock.callArgs = append(mmGetNodeSnapshot.GetNodeSnapshotMock.callArgs, mm_params)
	mmGetNodeSnapshot.GetNodeSnapshotMock.mutex.Unlock()

	for _, e := range mmGetNodeSnapshot.GetNodeSnapshotMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.n2
		}
	}

	if mmGetNodeSnapshot.GetNodeSnapshotMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetNodeSnapshot.GetNodeSnapshotMock.defaultExpectation.Counter, 1)
		mm_want := mmGetNodeSnapshot.GetNodeSnapshotMock.defaultExpectation.params
		mm_got := NodeKeeperMockGetNodeSnapshotParams{n1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetNodeSnapshot.t.Errorf("NodeKeeperMock.GetNodeSnapshot got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetNodeSnapshot.GetNodeSnapshotMock.defaultExpectation.results
		if mm_results == nil {
			mmGetNodeSnapshot.t.Fatal("No results are set for the NodeKeeperMock.GetNodeSnapshot")
		}
		return (*mm_results).n2
	}
	if mmGetNodeSnapshot.funcGetNodeSnapshot != nil {
		return mmGetNodeSnapshot.funcGetNodeSnapshot(n1)
	}
	mmGetNodeSnapshot.t.Fatalf("Unexpected call to NodeKeeperMock.GetNodeSnapshot. %v", n1)
	return
}

// GetNodeSnapshotAfterCounter returns a count of finished NodeKeeperMock.GetNodeSnapshot invocations
func (mmGetNodeSnapshot *NodeKeeperMock) GetNodeSnapshotAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNodeSnapshot.afterGetNodeSnapshotCounter)
}

// GetNodeSnapshotBeforeCounter returns a count of NodeKeeperMock.GetNodeSnapshot invocations
func (mmGetNodeSnapshot *NodeKeeperMock) GetNodeSnapshotBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNodeSnapshot.beforeGetNodeSnapshotCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.GetNodeSnapshot.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetNodeSnapshot *mNodeKeeperMockGetNodeSnapshot) Calls() []*NodeKeeperMockGetNodeSnapshotParams {
	mmGetNodeSnapshot.mutex.RLock()

	argCopy := make([]*NodeKeeperMockGetNodeSnapshotParams, len(mmGetNodeSnapshot.callArgs))
	copy(argCopy, mmGetNodeSnapshot.callArgs)

	mmGetNodeSnapshot.mutex.RUnlock()

	return argCopy
}

// MinimockGetNodeSnapshotDone returns true if the count of the GetNodeSnapshot invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetNodeSnapshotDone() bool {
	for _, e := range m.GetNodeSnapshotMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNodeSnapshotMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNodeSnapshotCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNodeSnapshot != nil && mm_atomic.LoadUint64(&m.afterGetNodeSnapshotCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetNodeSnapshotInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetNodeSnapshotInspect() {
	for _, e := range m.GetNodeSnapshotMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.GetNodeSnapshot with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNodeSnapshotMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNodeSnapshotCounter) < 1 {
		if m.GetNodeSnapshotMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.GetNodeSnapshot")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.GetNodeSnapshot with params: %#v", *m.GetNodeSnapshotMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNodeSnapshot != nil && mm_atomic.LoadUint64(&m.afterGetNodeSnapshotCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetNodeSnapshot")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *NodeKeeperMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAddCommittedBeatInspect()

		m.MinimockAddExpectedBeatInspect()

		m.MinimockFindAnyLatestNodeSnapshotInspect()

		m.MinimockGetLocalNodeReferenceInspect()

		m.MinimockGetLocalNodeRoleInspect()

		m.MinimockGetNodeSnapshotInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *NodeKeeperMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *NodeKeeperMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddCommittedBeatDone() &&
		m.MinimockAddExpectedBeatDone() &&
		m.MinimockFindAnyLatestNodeSnapshotDone() &&
		m.MinimockGetLocalNodeReferenceDone() &&
		m.MinimockGetLocalNodeRoleDone() &&
		m.MinimockGetNodeSnapshotDone()
}
