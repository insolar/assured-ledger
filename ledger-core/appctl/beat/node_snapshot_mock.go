package beat

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/assured-ledger/ledger-core/network/consensus/gcpv2/api/census"
	"github.com/insolar/assured-ledger/ledger-core/network/consensus/gcpv2/api/profiles"
	"github.com/insolar/assured-ledger/ledger-core/pulse"
	"github.com/insolar/assured-ledger/ledger-core/reference"
)

// NodeSnapshotMock implements NodeSnapshot
type NodeSnapshotMock struct {
	t minimock.Tester

	funcFindNodeByAddr          func(address string) (a1 profiles.ActiveNode)
	inspectFuncFindNodeByAddr   func(address string)
	afterFindNodeByAddrCounter  uint64
	beforeFindNodeByAddrCounter uint64
	FindNodeByAddrMock          mNodeSnapshotMockFindNodeByAddr

	funcFindNodeByRef          func(g1 reference.Global) (a1 profiles.ActiveNode)
	inspectFuncFindNodeByRef   func(g1 reference.Global)
	afterFindNodeByRefCounter  uint64
	beforeFindNodeByRefCounter uint64
	FindNodeByRefMock          mNodeSnapshotMockFindNodeByRef

	funcGetPopulation          func() (o1 census.OnlinePopulation)
	inspectFuncGetPopulation   func()
	afterGetPopulationCounter  uint64
	beforeGetPopulationCounter uint64
	GetPopulationMock          mNodeSnapshotMockGetPopulation

	funcGetPulseNumber          func() (n1 pulse.Number)
	inspectFuncGetPulseNumber   func()
	afterGetPulseNumberCounter  uint64
	beforeGetPulseNumberCounter uint64
	GetPulseNumberMock          mNodeSnapshotMockGetPulseNumber
}

// NewNodeSnapshotMock returns a mock for NodeSnapshot
func NewNodeSnapshotMock(t minimock.Tester) *NodeSnapshotMock {
	m := &NodeSnapshotMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.FindNodeByAddrMock = mNodeSnapshotMockFindNodeByAddr{mock: m}
	m.FindNodeByAddrMock.callArgs = []*NodeSnapshotMockFindNodeByAddrParams{}

	m.FindNodeByRefMock = mNodeSnapshotMockFindNodeByRef{mock: m}
	m.FindNodeByRefMock.callArgs = []*NodeSnapshotMockFindNodeByRefParams{}

	m.GetPopulationMock = mNodeSnapshotMockGetPopulation{mock: m}

	m.GetPulseNumberMock = mNodeSnapshotMockGetPulseNumber{mock: m}

	return m
}

type mNodeSnapshotMockFindNodeByAddr struct {
	mock               *NodeSnapshotMock
	defaultExpectation *NodeSnapshotMockFindNodeByAddrExpectation
	expectations       []*NodeSnapshotMockFindNodeByAddrExpectation

	callArgs []*NodeSnapshotMockFindNodeByAddrParams
	mutex    sync.RWMutex
}

// NodeSnapshotMockFindNodeByAddrExpectation specifies expectation struct of the NodeSnapshot.FindNodeByAddr
type NodeSnapshotMockFindNodeByAddrExpectation struct {
	mock    *NodeSnapshotMock
	params  *NodeSnapshotMockFindNodeByAddrParams
	results *NodeSnapshotMockFindNodeByAddrResults
	Counter uint64
}

// NodeSnapshotMockFindNodeByAddrParams contains parameters of the NodeSnapshot.FindNodeByAddr
type NodeSnapshotMockFindNodeByAddrParams struct {
	address string
}

// NodeSnapshotMockFindNodeByAddrResults contains results of the NodeSnapshot.FindNodeByAddr
type NodeSnapshotMockFindNodeByAddrResults struct {
	a1 profiles.ActiveNode
}

// Expect sets up expected params for NodeSnapshot.FindNodeByAddr
func (mmFindNodeByAddr *mNodeSnapshotMockFindNodeByAddr) Expect(address string) *mNodeSnapshotMockFindNodeByAddr {
	if mmFindNodeByAddr.mock.funcFindNodeByAddr != nil {
		mmFindNodeByAddr.mock.t.Fatalf("NodeSnapshotMock.FindNodeByAddr mock is already set by Set")
	}

	if mmFindNodeByAddr.defaultExpectation == nil {
		mmFindNodeByAddr.defaultExpectation = &NodeSnapshotMockFindNodeByAddrExpectation{}
	}

	mmFindNodeByAddr.defaultExpectation.params = &NodeSnapshotMockFindNodeByAddrParams{address}
	for _, e := range mmFindNodeByAddr.expectations {
		if minimock.Equal(e.params, mmFindNodeByAddr.defaultExpectation.params) {
			mmFindNodeByAddr.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFindNodeByAddr.defaultExpectation.params)
		}
	}

	return mmFindNodeByAddr
}

// Inspect accepts an inspector function that has same arguments as the NodeSnapshot.FindNodeByAddr
func (mmFindNodeByAddr *mNodeSnapshotMockFindNodeByAddr) Inspect(f func(address string)) *mNodeSnapshotMockFindNodeByAddr {
	if mmFindNodeByAddr.mock.inspectFuncFindNodeByAddr != nil {
		mmFindNodeByAddr.mock.t.Fatalf("Inspect function is already set for NodeSnapshotMock.FindNodeByAddr")
	}

	mmFindNodeByAddr.mock.inspectFuncFindNodeByAddr = f

	return mmFindNodeByAddr
}

// Return sets up results that will be returned by NodeSnapshot.FindNodeByAddr
func (mmFindNodeByAddr *mNodeSnapshotMockFindNodeByAddr) Return(a1 profiles.ActiveNode) *NodeSnapshotMock {
	if mmFindNodeByAddr.mock.funcFindNodeByAddr != nil {
		mmFindNodeByAddr.mock.t.Fatalf("NodeSnapshotMock.FindNodeByAddr mock is already set by Set")
	}

	if mmFindNodeByAddr.defaultExpectation == nil {
		mmFindNodeByAddr.defaultExpectation = &NodeSnapshotMockFindNodeByAddrExpectation{mock: mmFindNodeByAddr.mock}
	}
	mmFindNodeByAddr.defaultExpectation.results = &NodeSnapshotMockFindNodeByAddrResults{a1}
	return mmFindNodeByAddr.mock
}

//Set uses given function f to mock the NodeSnapshot.FindNodeByAddr method
func (mmFindNodeByAddr *mNodeSnapshotMockFindNodeByAddr) Set(f func(address string) (a1 profiles.ActiveNode)) *NodeSnapshotMock {
	if mmFindNodeByAddr.defaultExpectation != nil {
		mmFindNodeByAddr.mock.t.Fatalf("Default expectation is already set for the NodeSnapshot.FindNodeByAddr method")
	}

	if len(mmFindNodeByAddr.expectations) > 0 {
		mmFindNodeByAddr.mock.t.Fatalf("Some expectations are already set for the NodeSnapshot.FindNodeByAddr method")
	}

	mmFindNodeByAddr.mock.funcFindNodeByAddr = f
	return mmFindNodeByAddr.mock
}

// When sets expectation for the NodeSnapshot.FindNodeByAddr which will trigger the result defined by the following
// Then helper
func (mmFindNodeByAddr *mNodeSnapshotMockFindNodeByAddr) When(address string) *NodeSnapshotMockFindNodeByAddrExpectation {
	if mmFindNodeByAddr.mock.funcFindNodeByAddr != nil {
		mmFindNodeByAddr.mock.t.Fatalf("NodeSnapshotMock.FindNodeByAddr mock is already set by Set")
	}

	expectation := &NodeSnapshotMockFindNodeByAddrExpectation{
		mock:   mmFindNodeByAddr.mock,
		params: &NodeSnapshotMockFindNodeByAddrParams{address},
	}
	mmFindNodeByAddr.expectations = append(mmFindNodeByAddr.expectations, expectation)
	return expectation
}

// Then sets up NodeSnapshot.FindNodeByAddr return parameters for the expectation previously defined by the When method
func (e *NodeSnapshotMockFindNodeByAddrExpectation) Then(a1 profiles.ActiveNode) *NodeSnapshotMock {
	e.results = &NodeSnapshotMockFindNodeByAddrResults{a1}
	return e.mock
}

// FindNodeByAddr implements NodeSnapshot
func (mmFindNodeByAddr *NodeSnapshotMock) FindNodeByAddr(address string) (a1 profiles.ActiveNode) {
	mm_atomic.AddUint64(&mmFindNodeByAddr.beforeFindNodeByAddrCounter, 1)
	defer mm_atomic.AddUint64(&mmFindNodeByAddr.afterFindNodeByAddrCounter, 1)

	if mmFindNodeByAddr.inspectFuncFindNodeByAddr != nil {
		mmFindNodeByAddr.inspectFuncFindNodeByAddr(address)
	}

	mm_params := &NodeSnapshotMockFindNodeByAddrParams{address}

	// Record call args
	mmFindNodeByAddr.FindNodeByAddrMock.mutex.Lock()
	mmFindNodeByAddr.FindNodeByAddrMock.callArgs = append(mmFindNodeByAddr.FindNodeByAddrMock.callArgs, mm_params)
	mmFindNodeByAddr.FindNodeByAddrMock.mutex.Unlock()

	for _, e := range mmFindNodeByAddr.FindNodeByAddrMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.a1
		}
	}

	if mmFindNodeByAddr.FindNodeByAddrMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFindNodeByAddr.FindNodeByAddrMock.defaultExpectation.Counter, 1)
		mm_want := mmFindNodeByAddr.FindNodeByAddrMock.defaultExpectation.params
		mm_got := NodeSnapshotMockFindNodeByAddrParams{address}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFindNodeByAddr.t.Errorf("NodeSnapshotMock.FindNodeByAddr got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmFindNodeByAddr.FindNodeByAddrMock.defaultExpectation.results
		if mm_results == nil {
			mmFindNodeByAddr.t.Fatal("No results are set for the NodeSnapshotMock.FindNodeByAddr")
		}
		return (*mm_results).a1
	}
	if mmFindNodeByAddr.funcFindNodeByAddr != nil {
		return mmFindNodeByAddr.funcFindNodeByAddr(address)
	}
	mmFindNodeByAddr.t.Fatalf("Unexpected call to NodeSnapshotMock.FindNodeByAddr. %v", address)
	return
}

// FindNodeByAddrAfterCounter returns a count of finished NodeSnapshotMock.FindNodeByAddr invocations
func (mmFindNodeByAddr *NodeSnapshotMock) FindNodeByAddrAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindNodeByAddr.afterFindNodeByAddrCounter)
}

// FindNodeByAddrBeforeCounter returns a count of NodeSnapshotMock.FindNodeByAddr invocations
func (mmFindNodeByAddr *NodeSnapshotMock) FindNodeByAddrBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindNodeByAddr.beforeFindNodeByAddrCounter)
}

// Calls returns a list of arguments used in each call to NodeSnapshotMock.FindNodeByAddr.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFindNodeByAddr *mNodeSnapshotMockFindNodeByAddr) Calls() []*NodeSnapshotMockFindNodeByAddrParams {
	mmFindNodeByAddr.mutex.RLock()

	argCopy := make([]*NodeSnapshotMockFindNodeByAddrParams, len(mmFindNodeByAddr.callArgs))
	copy(argCopy, mmFindNodeByAddr.callArgs)

	mmFindNodeByAddr.mutex.RUnlock()

	return argCopy
}

// MinimockFindNodeByAddrDone returns true if the count of the FindNodeByAddr invocations corresponds
// the number of defined expectations
func (m *NodeSnapshotMock) MinimockFindNodeByAddrDone() bool {
	for _, e := range m.FindNodeByAddrMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindNodeByAddrMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindNodeByAddrCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindNodeByAddr != nil && mm_atomic.LoadUint64(&m.afterFindNodeByAddrCounter) < 1 {
		return false
	}
	return true
}

// MinimockFindNodeByAddrInspect logs each unmet expectation
func (m *NodeSnapshotMock) MinimockFindNodeByAddrInspect() {
	for _, e := range m.FindNodeByAddrMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeSnapshotMock.FindNodeByAddr with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindNodeByAddrMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindNodeByAddrCounter) < 1 {
		if m.FindNodeByAddrMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeSnapshotMock.FindNodeByAddr")
		} else {
			m.t.Errorf("Expected call to NodeSnapshotMock.FindNodeByAddr with params: %#v", *m.FindNodeByAddrMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindNodeByAddr != nil && mm_atomic.LoadUint64(&m.afterFindNodeByAddrCounter) < 1 {
		m.t.Error("Expected call to NodeSnapshotMock.FindNodeByAddr")
	}
}

type mNodeSnapshotMockFindNodeByRef struct {
	mock               *NodeSnapshotMock
	defaultExpectation *NodeSnapshotMockFindNodeByRefExpectation
	expectations       []*NodeSnapshotMockFindNodeByRefExpectation

	callArgs []*NodeSnapshotMockFindNodeByRefParams
	mutex    sync.RWMutex
}

// NodeSnapshotMockFindNodeByRefExpectation specifies expectation struct of the NodeSnapshot.FindNodeByRef
type NodeSnapshotMockFindNodeByRefExpectation struct {
	mock    *NodeSnapshotMock
	params  *NodeSnapshotMockFindNodeByRefParams
	results *NodeSnapshotMockFindNodeByRefResults
	Counter uint64
}

// NodeSnapshotMockFindNodeByRefParams contains parameters of the NodeSnapshot.FindNodeByRef
type NodeSnapshotMockFindNodeByRefParams struct {
	g1 reference.Global
}

// NodeSnapshotMockFindNodeByRefResults contains results of the NodeSnapshot.FindNodeByRef
type NodeSnapshotMockFindNodeByRefResults struct {
	a1 profiles.ActiveNode
}

// Expect sets up expected params for NodeSnapshot.FindNodeByRef
func (mmFindNodeByRef *mNodeSnapshotMockFindNodeByRef) Expect(g1 reference.Global) *mNodeSnapshotMockFindNodeByRef {
	if mmFindNodeByRef.mock.funcFindNodeByRef != nil {
		mmFindNodeByRef.mock.t.Fatalf("NodeSnapshotMock.FindNodeByRef mock is already set by Set")
	}

	if mmFindNodeByRef.defaultExpectation == nil {
		mmFindNodeByRef.defaultExpectation = &NodeSnapshotMockFindNodeByRefExpectation{}
	}

	mmFindNodeByRef.defaultExpectation.params = &NodeSnapshotMockFindNodeByRefParams{g1}
	for _, e := range mmFindNodeByRef.expectations {
		if minimock.Equal(e.params, mmFindNodeByRef.defaultExpectation.params) {
			mmFindNodeByRef.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFindNodeByRef.defaultExpectation.params)
		}
	}

	return mmFindNodeByRef
}

// Inspect accepts an inspector function that has same arguments as the NodeSnapshot.FindNodeByRef
func (mmFindNodeByRef *mNodeSnapshotMockFindNodeByRef) Inspect(f func(g1 reference.Global)) *mNodeSnapshotMockFindNodeByRef {
	if mmFindNodeByRef.mock.inspectFuncFindNodeByRef != nil {
		mmFindNodeByRef.mock.t.Fatalf("Inspect function is already set for NodeSnapshotMock.FindNodeByRef")
	}

	mmFindNodeByRef.mock.inspectFuncFindNodeByRef = f

	return mmFindNodeByRef
}

// Return sets up results that will be returned by NodeSnapshot.FindNodeByRef
func (mmFindNodeByRef *mNodeSnapshotMockFindNodeByRef) Return(a1 profiles.ActiveNode) *NodeSnapshotMock {
	if mmFindNodeByRef.mock.funcFindNodeByRef != nil {
		mmFindNodeByRef.mock.t.Fatalf("NodeSnapshotMock.FindNodeByRef mock is already set by Set")
	}

	if mmFindNodeByRef.defaultExpectation == nil {
		mmFindNodeByRef.defaultExpectation = &NodeSnapshotMockFindNodeByRefExpectation{mock: mmFindNodeByRef.mock}
	}
	mmFindNodeByRef.defaultExpectation.results = &NodeSnapshotMockFindNodeByRefResults{a1}
	return mmFindNodeByRef.mock
}

//Set uses given function f to mock the NodeSnapshot.FindNodeByRef method
func (mmFindNodeByRef *mNodeSnapshotMockFindNodeByRef) Set(f func(g1 reference.Global) (a1 profiles.ActiveNode)) *NodeSnapshotMock {
	if mmFindNodeByRef.defaultExpectation != nil {
		mmFindNodeByRef.mock.t.Fatalf("Default expectation is already set for the NodeSnapshot.FindNodeByRef method")
	}

	if len(mmFindNodeByRef.expectations) > 0 {
		mmFindNodeByRef.mock.t.Fatalf("Some expectations are already set for the NodeSnapshot.FindNodeByRef method")
	}

	mmFindNodeByRef.mock.funcFindNodeByRef = f
	return mmFindNodeByRef.mock
}

// When sets expectation for the NodeSnapshot.FindNodeByRef which will trigger the result defined by the following
// Then helper
func (mmFindNodeByRef *mNodeSnapshotMockFindNodeByRef) When(g1 reference.Global) *NodeSnapshotMockFindNodeByRefExpectation {
	if mmFindNodeByRef.mock.funcFindNodeByRef != nil {
		mmFindNodeByRef.mock.t.Fatalf("NodeSnapshotMock.FindNodeByRef mock is already set by Set")
	}

	expectation := &NodeSnapshotMockFindNodeByRefExpectation{
		mock:   mmFindNodeByRef.mock,
		params: &NodeSnapshotMockFindNodeByRefParams{g1},
	}
	mmFindNodeByRef.expectations = append(mmFindNodeByRef.expectations, expectation)
	return expectation
}

// Then sets up NodeSnapshot.FindNodeByRef return parameters for the expectation previously defined by the When method
func (e *NodeSnapshotMockFindNodeByRefExpectation) Then(a1 profiles.ActiveNode) *NodeSnapshotMock {
	e.results = &NodeSnapshotMockFindNodeByRefResults{a1}
	return e.mock
}

// FindNodeByRef implements NodeSnapshot
func (mmFindNodeByRef *NodeSnapshotMock) FindNodeByRef(g1 reference.Global) (a1 profiles.ActiveNode) {
	mm_atomic.AddUint64(&mmFindNodeByRef.beforeFindNodeByRefCounter, 1)
	defer mm_atomic.AddUint64(&mmFindNodeByRef.afterFindNodeByRefCounter, 1)

	if mmFindNodeByRef.inspectFuncFindNodeByRef != nil {
		mmFindNodeByRef.inspectFuncFindNodeByRef(g1)
	}

	mm_params := &NodeSnapshotMockFindNodeByRefParams{g1}

	// Record call args
	mmFindNodeByRef.FindNodeByRefMock.mutex.Lock()
	mmFindNodeByRef.FindNodeByRefMock.callArgs = append(mmFindNodeByRef.FindNodeByRefMock.callArgs, mm_params)
	mmFindNodeByRef.FindNodeByRefMock.mutex.Unlock()

	for _, e := range mmFindNodeByRef.FindNodeByRefMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.a1
		}
	}

	if mmFindNodeByRef.FindNodeByRefMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFindNodeByRef.FindNodeByRefMock.defaultExpectation.Counter, 1)
		mm_want := mmFindNodeByRef.FindNodeByRefMock.defaultExpectation.params
		mm_got := NodeSnapshotMockFindNodeByRefParams{g1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFindNodeByRef.t.Errorf("NodeSnapshotMock.FindNodeByRef got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmFindNodeByRef.FindNodeByRefMock.defaultExpectation.results
		if mm_results == nil {
			mmFindNodeByRef.t.Fatal("No results are set for the NodeSnapshotMock.FindNodeByRef")
		}
		return (*mm_results).a1
	}
	if mmFindNodeByRef.funcFindNodeByRef != nil {
		return mmFindNodeByRef.funcFindNodeByRef(g1)
	}
	mmFindNodeByRef.t.Fatalf("Unexpected call to NodeSnapshotMock.FindNodeByRef. %v", g1)
	return
}

// FindNodeByRefAfterCounter returns a count of finished NodeSnapshotMock.FindNodeByRef invocations
func (mmFindNodeByRef *NodeSnapshotMock) FindNodeByRefAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindNodeByRef.afterFindNodeByRefCounter)
}

// FindNodeByRefBeforeCounter returns a count of NodeSnapshotMock.FindNodeByRef invocations
func (mmFindNodeByRef *NodeSnapshotMock) FindNodeByRefBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindNodeByRef.beforeFindNodeByRefCounter)
}

// Calls returns a list of arguments used in each call to NodeSnapshotMock.FindNodeByRef.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFindNodeByRef *mNodeSnapshotMockFindNodeByRef) Calls() []*NodeSnapshotMockFindNodeByRefParams {
	mmFindNodeByRef.mutex.RLock()

	argCopy := make([]*NodeSnapshotMockFindNodeByRefParams, len(mmFindNodeByRef.callArgs))
	copy(argCopy, mmFindNodeByRef.callArgs)

	mmFindNodeByRef.mutex.RUnlock()

	return argCopy
}

// MinimockFindNodeByRefDone returns true if the count of the FindNodeByRef invocations corresponds
// the number of defined expectations
func (m *NodeSnapshotMock) MinimockFindNodeByRefDone() bool {
	for _, e := range m.FindNodeByRefMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindNodeByRefMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindNodeByRefCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindNodeByRef != nil && mm_atomic.LoadUint64(&m.afterFindNodeByRefCounter) < 1 {
		return false
	}
	return true
}

// MinimockFindNodeByRefInspect logs each unmet expectation
func (m *NodeSnapshotMock) MinimockFindNodeByRefInspect() {
	for _, e := range m.FindNodeByRefMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeSnapshotMock.FindNodeByRef with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindNodeByRefMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindNodeByRefCounter) < 1 {
		if m.FindNodeByRefMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeSnapshotMock.FindNodeByRef")
		} else {
			m.t.Errorf("Expected call to NodeSnapshotMock.FindNodeByRef with params: %#v", *m.FindNodeByRefMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindNodeByRef != nil && mm_atomic.LoadUint64(&m.afterFindNodeByRefCounter) < 1 {
		m.t.Error("Expected call to NodeSnapshotMock.FindNodeByRef")
	}
}

type mNodeSnapshotMockGetPopulation struct {
	mock               *NodeSnapshotMock
	defaultExpectation *NodeSnapshotMockGetPopulationExpectation
	expectations       []*NodeSnapshotMockGetPopulationExpectation
}

// NodeSnapshotMockGetPopulationExpectation specifies expectation struct of the NodeSnapshot.GetPopulation
type NodeSnapshotMockGetPopulationExpectation struct {
	mock *NodeSnapshotMock

	results *NodeSnapshotMockGetPopulationResults
	Counter uint64
}

// NodeSnapshotMockGetPopulationResults contains results of the NodeSnapshot.GetPopulation
type NodeSnapshotMockGetPopulationResults struct {
	o1 census.OnlinePopulation
}

// Expect sets up expected params for NodeSnapshot.GetPopulation
func (mmGetPopulation *mNodeSnapshotMockGetPopulation) Expect() *mNodeSnapshotMockGetPopulation {
	if mmGetPopulation.mock.funcGetPopulation != nil {
		mmGetPopulation.mock.t.Fatalf("NodeSnapshotMock.GetPopulation mock is already set by Set")
	}

	if mmGetPopulation.defaultExpectation == nil {
		mmGetPopulation.defaultExpectation = &NodeSnapshotMockGetPopulationExpectation{}
	}

	return mmGetPopulation
}

// Inspect accepts an inspector function that has same arguments as the NodeSnapshot.GetPopulation
func (mmGetPopulation *mNodeSnapshotMockGetPopulation) Inspect(f func()) *mNodeSnapshotMockGetPopulation {
	if mmGetPopulation.mock.inspectFuncGetPopulation != nil {
		mmGetPopulation.mock.t.Fatalf("Inspect function is already set for NodeSnapshotMock.GetPopulation")
	}

	mmGetPopulation.mock.inspectFuncGetPopulation = f

	return mmGetPopulation
}

// Return sets up results that will be returned by NodeSnapshot.GetPopulation
func (mmGetPopulation *mNodeSnapshotMockGetPopulation) Return(o1 census.OnlinePopulation) *NodeSnapshotMock {
	if mmGetPopulation.mock.funcGetPopulation != nil {
		mmGetPopulation.mock.t.Fatalf("NodeSnapshotMock.GetPopulation mock is already set by Set")
	}

	if mmGetPopulation.defaultExpectation == nil {
		mmGetPopulation.defaultExpectation = &NodeSnapshotMockGetPopulationExpectation{mock: mmGetPopulation.mock}
	}
	mmGetPopulation.defaultExpectation.results = &NodeSnapshotMockGetPopulationResults{o1}
	return mmGetPopulation.mock
}

//Set uses given function f to mock the NodeSnapshot.GetPopulation method
func (mmGetPopulation *mNodeSnapshotMockGetPopulation) Set(f func() (o1 census.OnlinePopulation)) *NodeSnapshotMock {
	if mmGetPopulation.defaultExpectation != nil {
		mmGetPopulation.mock.t.Fatalf("Default expectation is already set for the NodeSnapshot.GetPopulation method")
	}

	if len(mmGetPopulation.expectations) > 0 {
		mmGetPopulation.mock.t.Fatalf("Some expectations are already set for the NodeSnapshot.GetPopulation method")
	}

	mmGetPopulation.mock.funcGetPopulation = f
	return mmGetPopulation.mock
}

// GetPopulation implements NodeSnapshot
func (mmGetPopulation *NodeSnapshotMock) GetPopulation() (o1 census.OnlinePopulation) {
	mm_atomic.AddUint64(&mmGetPopulation.beforeGetPopulationCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPopulation.afterGetPopulationCounter, 1)

	if mmGetPopulation.inspectFuncGetPopulation != nil {
		mmGetPopulation.inspectFuncGetPopulation()
	}

	if mmGetPopulation.GetPopulationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPopulation.GetPopulationMock.defaultExpectation.Counter, 1)

		mm_results := mmGetPopulation.GetPopulationMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPopulation.t.Fatal("No results are set for the NodeSnapshotMock.GetPopulation")
		}
		return (*mm_results).o1
	}
	if mmGetPopulation.funcGetPopulation != nil {
		return mmGetPopulation.funcGetPopulation()
	}
	mmGetPopulation.t.Fatalf("Unexpected call to NodeSnapshotMock.GetPopulation.")
	return
}

// GetPopulationAfterCounter returns a count of finished NodeSnapshotMock.GetPopulation invocations
func (mmGetPopulation *NodeSnapshotMock) GetPopulationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPopulation.afterGetPopulationCounter)
}

// GetPopulationBeforeCounter returns a count of NodeSnapshotMock.GetPopulation invocations
func (mmGetPopulation *NodeSnapshotMock) GetPopulationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPopulation.beforeGetPopulationCounter)
}

// MinimockGetPopulationDone returns true if the count of the GetPopulation invocations corresponds
// the number of defined expectations
func (m *NodeSnapshotMock) MinimockGetPopulationDone() bool {
	for _, e := range m.GetPopulationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPopulationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPopulationCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPopulation != nil && mm_atomic.LoadUint64(&m.afterGetPopulationCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPopulationInspect logs each unmet expectation
func (m *NodeSnapshotMock) MinimockGetPopulationInspect() {
	for _, e := range m.GetPopulationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeSnapshotMock.GetPopulation")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPopulationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPopulationCounter) < 1 {
		m.t.Error("Expected call to NodeSnapshotMock.GetPopulation")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPopulation != nil && mm_atomic.LoadUint64(&m.afterGetPopulationCounter) < 1 {
		m.t.Error("Expected call to NodeSnapshotMock.GetPopulation")
	}
}

type mNodeSnapshotMockGetPulseNumber struct {
	mock               *NodeSnapshotMock
	defaultExpectation *NodeSnapshotMockGetPulseNumberExpectation
	expectations       []*NodeSnapshotMockGetPulseNumberExpectation
}

// NodeSnapshotMockGetPulseNumberExpectation specifies expectation struct of the NodeSnapshot.GetPulseNumber
type NodeSnapshotMockGetPulseNumberExpectation struct {
	mock *NodeSnapshotMock

	results *NodeSnapshotMockGetPulseNumberResults
	Counter uint64
}

// NodeSnapshotMockGetPulseNumberResults contains results of the NodeSnapshot.GetPulseNumber
type NodeSnapshotMockGetPulseNumberResults struct {
	n1 pulse.Number
}

// Expect sets up expected params for NodeSnapshot.GetPulseNumber
func (mmGetPulseNumber *mNodeSnapshotMockGetPulseNumber) Expect() *mNodeSnapshotMockGetPulseNumber {
	if mmGetPulseNumber.mock.funcGetPulseNumber != nil {
		mmGetPulseNumber.mock.t.Fatalf("NodeSnapshotMock.GetPulseNumber mock is already set by Set")
	}

	if mmGetPulseNumber.defaultExpectation == nil {
		mmGetPulseNumber.defaultExpectation = &NodeSnapshotMockGetPulseNumberExpectation{}
	}

	return mmGetPulseNumber
}

// Inspect accepts an inspector function that has same arguments as the NodeSnapshot.GetPulseNumber
func (mmGetPulseNumber *mNodeSnapshotMockGetPulseNumber) Inspect(f func()) *mNodeSnapshotMockGetPulseNumber {
	if mmGetPulseNumber.mock.inspectFuncGetPulseNumber != nil {
		mmGetPulseNumber.mock.t.Fatalf("Inspect function is already set for NodeSnapshotMock.GetPulseNumber")
	}

	mmGetPulseNumber.mock.inspectFuncGetPulseNumber = f

	return mmGetPulseNumber
}

// Return sets up results that will be returned by NodeSnapshot.GetPulseNumber
func (mmGetPulseNumber *mNodeSnapshotMockGetPulseNumber) Return(n1 pulse.Number) *NodeSnapshotMock {
	if mmGetPulseNumber.mock.funcGetPulseNumber != nil {
		mmGetPulseNumber.mock.t.Fatalf("NodeSnapshotMock.GetPulseNumber mock is already set by Set")
	}

	if mmGetPulseNumber.defaultExpectation == nil {
		mmGetPulseNumber.defaultExpectation = &NodeSnapshotMockGetPulseNumberExpectation{mock: mmGetPulseNumber.mock}
	}
	mmGetPulseNumber.defaultExpectation.results = &NodeSnapshotMockGetPulseNumberResults{n1}
	return mmGetPulseNumber.mock
}

//Set uses given function f to mock the NodeSnapshot.GetPulseNumber method
func (mmGetPulseNumber *mNodeSnapshotMockGetPulseNumber) Set(f func() (n1 pulse.Number)) *NodeSnapshotMock {
	if mmGetPulseNumber.defaultExpectation != nil {
		mmGetPulseNumber.mock.t.Fatalf("Default expectation is already set for the NodeSnapshot.GetPulseNumber method")
	}

	if len(mmGetPulseNumber.expectations) > 0 {
		mmGetPulseNumber.mock.t.Fatalf("Some expectations are already set for the NodeSnapshot.GetPulseNumber method")
	}

	mmGetPulseNumber.mock.funcGetPulseNumber = f
	return mmGetPulseNumber.mock
}

// GetPulseNumber implements NodeSnapshot
func (mmGetPulseNumber *NodeSnapshotMock) GetPulseNumber() (n1 pulse.Number) {
	mm_atomic.AddUint64(&mmGetPulseNumber.beforeGetPulseNumberCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPulseNumber.afterGetPulseNumberCounter, 1)

	if mmGetPulseNumber.inspectFuncGetPulseNumber != nil {
		mmGetPulseNumber.inspectFuncGetPulseNumber()
	}

	if mmGetPulseNumber.GetPulseNumberMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPulseNumber.GetPulseNumberMock.defaultExpectation.Counter, 1)

		mm_results := mmGetPulseNumber.GetPulseNumberMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPulseNumber.t.Fatal("No results are set for the NodeSnapshotMock.GetPulseNumber")
		}
		return (*mm_results).n1
	}
	if mmGetPulseNumber.funcGetPulseNumber != nil {
		return mmGetPulseNumber.funcGetPulseNumber()
	}
	mmGetPulseNumber.t.Fatalf("Unexpected call to NodeSnapshotMock.GetPulseNumber.")
	return
}

// GetPulseNumberAfterCounter returns a count of finished NodeSnapshotMock.GetPulseNumber invocations
func (mmGetPulseNumber *NodeSnapshotMock) GetPulseNumberAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPulseNumber.afterGetPulseNumberCounter)
}

// GetPulseNumberBeforeCounter returns a count of NodeSnapshotMock.GetPulseNumber invocations
func (mmGetPulseNumber *NodeSnapshotMock) GetPulseNumberBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPulseNumber.beforeGetPulseNumberCounter)
}

// MinimockGetPulseNumberDone returns true if the count of the GetPulseNumber invocations corresponds
// the number of defined expectations
func (m *NodeSnapshotMock) MinimockGetPulseNumberDone() bool {
	for _, e := range m.GetPulseNumberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPulseNumberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPulseNumberCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPulseNumber != nil && mm_atomic.LoadUint64(&m.afterGetPulseNumberCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPulseNumberInspect logs each unmet expectation
func (m *NodeSnapshotMock) MinimockGetPulseNumberInspect() {
	for _, e := range m.GetPulseNumberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeSnapshotMock.GetPulseNumber")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPulseNumberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPulseNumberCounter) < 1 {
		m.t.Error("Expected call to NodeSnapshotMock.GetPulseNumber")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPulseNumber != nil && mm_atomic.LoadUint64(&m.afterGetPulseNumberCounter) < 1 {
		m.t.Error("Expected call to NodeSnapshotMock.GetPulseNumber")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *NodeSnapshotMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockFindNodeByAddrInspect()

		m.MinimockFindNodeByRefInspect()

		m.MinimockGetPopulationInspect()

		m.MinimockGetPulseNumberInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *NodeSnapshotMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *NodeSnapshotMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockFindNodeByAddrDone() &&
		m.MinimockFindNodeByRefDone() &&
		m.MinimockGetPopulationDone() &&
		m.MinimockGetPulseNumberDone()
}
