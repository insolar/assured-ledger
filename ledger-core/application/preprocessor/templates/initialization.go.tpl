// Code generated by insgocc. DO NOT EDIT.
// source template in logicrunner/preprocessor/templates

package {{ .Package }}

import (
{{ range $name, $path := .CustomImports }}
    {{ $name }} {{ $path }}
{{- end }}

{{ range $contract := .Contracts }}
    {{ $contract.ImportName }} "{{ $contract.ImportPath }}"
{{- end }}
)

func InitializeContractMethods() map[string]XXX_contract.Wrapper {
    return map[string]XXX_contract.Wrapper{
{{- range $contract := .Contracts }}
        "{{ $contract.Name }}": {{ $contract.ImportName }}.Initialize(),
{{- end }}
    }
}

func shouldLoadRef(strRef string) XXX_reference.Global {
    ref, err := XXX_reference.GlobalFromString(strRef)
    if err != nil {
        panic(throw.W(err, "Unexpected error, bailing out"))
    }
    return ref
}

func InitializeCodeRefs() map[XXX_reference.Global]string {
    rv := make(map[XXX_reference.Global]string, {{ len .Contracts }})

    {{ range $contract := .Contracts -}}
    rv[shouldLoadRef("{{ $contract.CodeReference }}")] = "{{ $contract.Name }}"
    {{ end }}

    return rv
}

func InitializeClassRefs() map[XXX_reference.Global]string {
    rv := make(map[XXX_reference.Global]string, {{ len .Contracts }})

    {{ range $contract := .Contracts -}}
    rv[shouldLoadRef("{{ $contract.ClassReference }}")] = "{{ $contract.Name }}"
    {{ end }}

    return rv
}

func InitializeCodeDescriptors() []XXX_descriptor.Code {
    rv := make([]XXX_descriptor.Code, 0, {{ len .Contracts }})

    {{ range $contract := .Contracts -}}
    // {{ $contract.Name }}
    rv = append(rv, XXX_descriptor.NewCode(
        /* code:        */ nil,
        /* machineType: */ XXX_machinetype.Builtin,
        /* ref:         */ shouldLoadRef("{{ $contract.CodeReference }}"),
    ))
    {{ end }}
    return rv
}

func InitializeClassDescriptors() []XXX_descriptor.Class {
    rv := make([]XXX_descriptor.Class, 0, {{ len .Contracts }})

    {{ range $contract := .Contracts }}
    { // {{ $contract.Name }}
        pRef := shouldLoadRef("{{ $contract.ClassReference }}")
        cRef := shouldLoadRef("{{ $contract.CodeReference }}")
        rv = append(rv, XXX_descriptor.NewClass(
            /* head:         */ pRef,
            /* state:        */ pRef.GetLocal(),
            /* code:         */ cRef,
        ))
    }
    {{ end }}
    return rv
}
