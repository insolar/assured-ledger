TEST_COUNT      ?= 1
FUNCTEST_COUNT  ?= 1
GOTEST          ?= go test
TEST_ARGS       ?= -timeout 1200s
TESTED_PACKAGES ?= $(shell go list ${ALL_PACKAGES} | grep -v "${MOCKS_PACKAGE}" | grep -v /ledger-v2/)
PACKAGES        ?= $(shell go list ./... | grep -v /ledger-v2/)

.PHONY: test_all
test_all: test_unit test_func test_slow ## run all tests (unit, func, slow)

.PHONY: test_unit
test_unit: ## run all unit tests
	$(GOTEST) -count=1 $(TEST_ARGS) $(PACKAGES)

.PHONY: test_with_coverage
test_with_coverage: ## run unit tests with generation of coverage file
	$(GOTEST) -coverprofile=coverage.tmp.out -covermode=count -count=1 $(TEST_ARGS) $(PACKAGES)
	cat coverage.tmp.out | grep -v _mock.go > coverage.out
	go tool cover -html=coverage.out -o coverage.html

.PHONY: test_func
test_func: ## run functest FUNCTEST_COUNT times
	CGO_ENABLED=1 $(GOTEST) -test.v $(TEST_ARGS) -tags "functest bloattest" ./application/functest -count=$(FUNCTEST_COUNT)

.PNONY: test_func_race
test_func_race: ## run functest 10 times with -race flag
	make clean
	GOBUILD='go build -race' make build
	FUNCTEST_COUNT=10 make functest

.PHONY: test_slow
test_slow: ## run tests with slowtest tag
	$(GOTEST) -count=1 $(TEST_ARGS) -tags slowtest $(PACKAGES)


