package cryptkit

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// DigestSignerMock implements DigestSigner
type DigestSignerMock struct {
	t minimock.Tester

	funcGetSigningMethod          func() (s1 SigningMethod)
	inspectFuncGetSigningMethod   func()
	afterGetSigningMethodCounter  uint64
	beforeGetSigningMethodCounter uint64
	GetSigningMethodMock          mDigestSignerMockGetSigningMethod

	funcSignDigest          func(digest Digest) (s1 Signature)
	inspectFuncSignDigest   func(digest Digest)
	afterSignDigestCounter  uint64
	beforeSignDigestCounter uint64
	SignDigestMock          mDigestSignerMockSignDigest
}

// NewDigestSignerMock returns a mock for DigestSigner
func NewDigestSignerMock(t minimock.Tester) *DigestSignerMock {
	m := &DigestSignerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetSigningMethodMock = mDigestSignerMockGetSigningMethod{mock: m}

	m.SignDigestMock = mDigestSignerMockSignDigest{mock: m}
	m.SignDigestMock.callArgs = []*DigestSignerMockSignDigestParams{}

	return m
}

type mDigestSignerMockGetSigningMethod struct {
	mock               *DigestSignerMock
	defaultExpectation *DigestSignerMockGetSigningMethodExpectation
	expectations       []*DigestSignerMockGetSigningMethodExpectation
}

// DigestSignerMockGetSigningMethodExpectation specifies expectation struct of the DigestSigner.GetSigningMethod
type DigestSignerMockGetSigningMethodExpectation struct {
	mock *DigestSignerMock

	results *DigestSignerMockGetSigningMethodResults
	Counter uint64
}

// DigestSignerMockGetSigningMethodResults contains results of the DigestSigner.GetSigningMethod
type DigestSignerMockGetSigningMethodResults struct {
	s1 SigningMethod
}

// Expect sets up expected params for DigestSigner.GetSigningMethod
func (mmGetSigningMethod *mDigestSignerMockGetSigningMethod) Expect() *mDigestSignerMockGetSigningMethod {
	if mmGetSigningMethod.mock.funcGetSigningMethod != nil {
		mmGetSigningMethod.mock.t.Fatalf("DigestSignerMock.GetSigningMethod mock is already set by Set")
	}

	if mmGetSigningMethod.defaultExpectation == nil {
		mmGetSigningMethod.defaultExpectation = &DigestSignerMockGetSigningMethodExpectation{}
	}

	return mmGetSigningMethod
}

// Inspect accepts an inspector function that has same arguments as the DigestSigner.GetSigningMethod
func (mmGetSigningMethod *mDigestSignerMockGetSigningMethod) Inspect(f func()) *mDigestSignerMockGetSigningMethod {
	if mmGetSigningMethod.mock.inspectFuncGetSigningMethod != nil {
		mmGetSigningMethod.mock.t.Fatalf("Inspect function is already set for DigestSignerMock.GetSigningMethod")
	}

	mmGetSigningMethod.mock.inspectFuncGetSigningMethod = f

	return mmGetSigningMethod
}

// Return sets up results that will be returned by DigestSigner.GetSigningMethod
func (mmGetSigningMethod *mDigestSignerMockGetSigningMethod) Return(s1 SigningMethod) *DigestSignerMock {
	if mmGetSigningMethod.mock.funcGetSigningMethod != nil {
		mmGetSigningMethod.mock.t.Fatalf("DigestSignerMock.GetSigningMethod mock is already set by Set")
	}

	if mmGetSigningMethod.defaultExpectation == nil {
		mmGetSigningMethod.defaultExpectation = &DigestSignerMockGetSigningMethodExpectation{mock: mmGetSigningMethod.mock}
	}
	mmGetSigningMethod.defaultExpectation.results = &DigestSignerMockGetSigningMethodResults{s1}
	return mmGetSigningMethod.mock
}

//Set uses given function f to mock the DigestSigner.GetSigningMethod method
func (mmGetSigningMethod *mDigestSignerMockGetSigningMethod) Set(f func() (s1 SigningMethod)) *DigestSignerMock {
	if mmGetSigningMethod.defaultExpectation != nil {
		mmGetSigningMethod.mock.t.Fatalf("Default expectation is already set for the DigestSigner.GetSigningMethod method")
	}

	if len(mmGetSigningMethod.expectations) > 0 {
		mmGetSigningMethod.mock.t.Fatalf("Some expectations are already set for the DigestSigner.GetSigningMethod method")
	}

	mmGetSigningMethod.mock.funcGetSigningMethod = f
	return mmGetSigningMethod.mock
}

// GetSigningMethod implements DigestSigner
func (mmGetSigningMethod *DigestSignerMock) GetSigningMethod() (s1 SigningMethod) {
	mm_atomic.AddUint64(&mmGetSigningMethod.beforeGetSigningMethodCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSigningMethod.afterGetSigningMethodCounter, 1)

	if mmGetSigningMethod.inspectFuncGetSigningMethod != nil {
		mmGetSigningMethod.inspectFuncGetSigningMethod()
	}

	if mmGetSigningMethod.GetSigningMethodMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSigningMethod.GetSigningMethodMock.defaultExpectation.Counter, 1)

		mm_results := mmGetSigningMethod.GetSigningMethodMock.defaultExpectation.results
		if mm_results == nil {
			mmGetSigningMethod.t.Fatal("No results are set for the DigestSignerMock.GetSigningMethod")
		}
		return (*mm_results).s1
	}
	if mmGetSigningMethod.funcGetSigningMethod != nil {
		return mmGetSigningMethod.funcGetSigningMethod()
	}
	mmGetSigningMethod.t.Fatalf("Unexpected call to DigestSignerMock.GetSigningMethod.")
	return
}

// GetSigningMethodAfterCounter returns a count of finished DigestSignerMock.GetSigningMethod invocations
func (mmGetSigningMethod *DigestSignerMock) GetSigningMethodAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSigningMethod.afterGetSigningMethodCounter)
}

// GetSigningMethodBeforeCounter returns a count of DigestSignerMock.GetSigningMethod invocations
func (mmGetSigningMethod *DigestSignerMock) GetSigningMethodBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSigningMethod.beforeGetSigningMethodCounter)
}

// MinimockGetSigningMethodDone returns true if the count of the GetSigningMethod invocations corresponds
// the number of defined expectations
func (m *DigestSignerMock) MinimockGetSigningMethodDone() bool {
	for _, e := range m.GetSigningMethodMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSigningMethodMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSigningMethodCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSigningMethod != nil && mm_atomic.LoadUint64(&m.afterGetSigningMethodCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSigningMethodInspect logs each unmet expectation
func (m *DigestSignerMock) MinimockGetSigningMethodInspect() {
	for _, e := range m.GetSigningMethodMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to DigestSignerMock.GetSigningMethod")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSigningMethodMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSigningMethodCounter) < 1 {
		m.t.Error("Expected call to DigestSignerMock.GetSigningMethod")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSigningMethod != nil && mm_atomic.LoadUint64(&m.afterGetSigningMethodCounter) < 1 {
		m.t.Error("Expected call to DigestSignerMock.GetSigningMethod")
	}
}

type mDigestSignerMockSignDigest struct {
	mock               *DigestSignerMock
	defaultExpectation *DigestSignerMockSignDigestExpectation
	expectations       []*DigestSignerMockSignDigestExpectation

	callArgs []*DigestSignerMockSignDigestParams
	mutex    sync.RWMutex
}

// DigestSignerMockSignDigestExpectation specifies expectation struct of the DigestSigner.SignDigest
type DigestSignerMockSignDigestExpectation struct {
	mock    *DigestSignerMock
	params  *DigestSignerMockSignDigestParams
	results *DigestSignerMockSignDigestResults
	Counter uint64
}

// DigestSignerMockSignDigestParams contains parameters of the DigestSigner.SignDigest
type DigestSignerMockSignDigestParams struct {
	digest Digest
}

// DigestSignerMockSignDigestResults contains results of the DigestSigner.SignDigest
type DigestSignerMockSignDigestResults struct {
	s1 Signature
}

// Expect sets up expected params for DigestSigner.SignDigest
func (mmSignDigest *mDigestSignerMockSignDigest) Expect(digest Digest) *mDigestSignerMockSignDigest {
	if mmSignDigest.mock.funcSignDigest != nil {
		mmSignDigest.mock.t.Fatalf("DigestSignerMock.SignDigest mock is already set by Set")
	}

	if mmSignDigest.defaultExpectation == nil {
		mmSignDigest.defaultExpectation = &DigestSignerMockSignDigestExpectation{}
	}

	mmSignDigest.defaultExpectation.params = &DigestSignerMockSignDigestParams{digest}
	for _, e := range mmSignDigest.expectations {
		if minimock.Equal(e.params, mmSignDigest.defaultExpectation.params) {
			mmSignDigest.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSignDigest.defaultExpectation.params)
		}
	}

	return mmSignDigest
}

// Inspect accepts an inspector function that has same arguments as the DigestSigner.SignDigest
func (mmSignDigest *mDigestSignerMockSignDigest) Inspect(f func(digest Digest)) *mDigestSignerMockSignDigest {
	if mmSignDigest.mock.inspectFuncSignDigest != nil {
		mmSignDigest.mock.t.Fatalf("Inspect function is already set for DigestSignerMock.SignDigest")
	}

	mmSignDigest.mock.inspectFuncSignDigest = f

	return mmSignDigest
}

// Return sets up results that will be returned by DigestSigner.SignDigest
func (mmSignDigest *mDigestSignerMockSignDigest) Return(s1 Signature) *DigestSignerMock {
	if mmSignDigest.mock.funcSignDigest != nil {
		mmSignDigest.mock.t.Fatalf("DigestSignerMock.SignDigest mock is already set by Set")
	}

	if mmSignDigest.defaultExpectation == nil {
		mmSignDigest.defaultExpectation = &DigestSignerMockSignDigestExpectation{mock: mmSignDigest.mock}
	}
	mmSignDigest.defaultExpectation.results = &DigestSignerMockSignDigestResults{s1}
	return mmSignDigest.mock
}

//Set uses given function f to mock the DigestSigner.SignDigest method
func (mmSignDigest *mDigestSignerMockSignDigest) Set(f func(digest Digest) (s1 Signature)) *DigestSignerMock {
	if mmSignDigest.defaultExpectation != nil {
		mmSignDigest.mock.t.Fatalf("Default expectation is already set for the DigestSigner.SignDigest method")
	}

	if len(mmSignDigest.expectations) > 0 {
		mmSignDigest.mock.t.Fatalf("Some expectations are already set for the DigestSigner.SignDigest method")
	}

	mmSignDigest.mock.funcSignDigest = f
	return mmSignDigest.mock
}

// When sets expectation for the DigestSigner.SignDigest which will trigger the result defined by the following
// Then helper
func (mmSignDigest *mDigestSignerMockSignDigest) When(digest Digest) *DigestSignerMockSignDigestExpectation {
	if mmSignDigest.mock.funcSignDigest != nil {
		mmSignDigest.mock.t.Fatalf("DigestSignerMock.SignDigest mock is already set by Set")
	}

	expectation := &DigestSignerMockSignDigestExpectation{
		mock:   mmSignDigest.mock,
		params: &DigestSignerMockSignDigestParams{digest},
	}
	mmSignDigest.expectations = append(mmSignDigest.expectations, expectation)
	return expectation
}

// Then sets up DigestSigner.SignDigest return parameters for the expectation previously defined by the When method
func (e *DigestSignerMockSignDigestExpectation) Then(s1 Signature) *DigestSignerMock {
	e.results = &DigestSignerMockSignDigestResults{s1}
	return e.mock
}

// SignDigest implements DigestSigner
func (mmSignDigest *DigestSignerMock) SignDigest(digest Digest) (s1 Signature) {
	mm_atomic.AddUint64(&mmSignDigest.beforeSignDigestCounter, 1)
	defer mm_atomic.AddUint64(&mmSignDigest.afterSignDigestCounter, 1)

	if mmSignDigest.inspectFuncSignDigest != nil {
		mmSignDigest.inspectFuncSignDigest(digest)
	}

	mm_params := &DigestSignerMockSignDigestParams{digest}

	// Record call args
	mmSignDigest.SignDigestMock.mutex.Lock()
	mmSignDigest.SignDigestMock.callArgs = append(mmSignDigest.SignDigestMock.callArgs, mm_params)
	mmSignDigest.SignDigestMock.mutex.Unlock()

	for _, e := range mmSignDigest.SignDigestMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1
		}
	}

	if mmSignDigest.SignDigestMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSignDigest.SignDigestMock.defaultExpectation.Counter, 1)
		mm_want := mmSignDigest.SignDigestMock.defaultExpectation.params
		mm_got := DigestSignerMockSignDigestParams{digest}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSignDigest.t.Errorf("DigestSignerMock.SignDigest got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSignDigest.SignDigestMock.defaultExpectation.results
		if mm_results == nil {
			mmSignDigest.t.Fatal("No results are set for the DigestSignerMock.SignDigest")
		}
		return (*mm_results).s1
	}
	if mmSignDigest.funcSignDigest != nil {
		return mmSignDigest.funcSignDigest(digest)
	}
	mmSignDigest.t.Fatalf("Unexpected call to DigestSignerMock.SignDigest. %v", digest)
	return
}

// SignDigestAfterCounter returns a count of finished DigestSignerMock.SignDigest invocations
func (mmSignDigest *DigestSignerMock) SignDigestAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSignDigest.afterSignDigestCounter)
}

// SignDigestBeforeCounter returns a count of DigestSignerMock.SignDigest invocations
func (mmSignDigest *DigestSignerMock) SignDigestBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSignDigest.beforeSignDigestCounter)
}

// Calls returns a list of arguments used in each call to DigestSignerMock.SignDigest.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSignDigest *mDigestSignerMockSignDigest) Calls() []*DigestSignerMockSignDigestParams {
	mmSignDigest.mutex.RLock()

	argCopy := make([]*DigestSignerMockSignDigestParams, len(mmSignDigest.callArgs))
	copy(argCopy, mmSignDigest.callArgs)

	mmSignDigest.mutex.RUnlock()

	return argCopy
}

// MinimockSignDigestDone returns true if the count of the SignDigest invocations corresponds
// the number of defined expectations
func (m *DigestSignerMock) MinimockSignDigestDone() bool {
	for _, e := range m.SignDigestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SignDigestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSignDigestCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSignDigest != nil && mm_atomic.LoadUint64(&m.afterSignDigestCounter) < 1 {
		return false
	}
	return true
}

// MinimockSignDigestInspect logs each unmet expectation
func (m *DigestSignerMock) MinimockSignDigestInspect() {
	for _, e := range m.SignDigestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DigestSignerMock.SignDigest with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SignDigestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSignDigestCounter) < 1 {
		if m.SignDigestMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DigestSignerMock.SignDigest")
		} else {
			m.t.Errorf("Expected call to DigestSignerMock.SignDigest with params: %#v", *m.SignDigestMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSignDigest != nil && mm_atomic.LoadUint64(&m.afterSignDigestCounter) < 1 {
		m.t.Error("Expected call to DigestSignerMock.SignDigest")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DigestSignerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetSigningMethodInspect()

		m.MinimockSignDigestInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DigestSignerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DigestSignerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetSigningMethodDone() &&
		m.MinimockSignDigestDone()
}
