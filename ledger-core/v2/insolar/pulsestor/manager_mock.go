package pulsestor

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ManagerMock implements Manager
type ManagerMock struct {
	t minimock.Tester

	funcSet          func(ctx context.Context, pulse Pulse) (err error)
	inspectFuncSet   func(ctx context.Context, pulse Pulse)
	afterSetCounter  uint64
	beforeSetCounter uint64
	SetMock          mManagerMockSet
}

// NewManagerMock returns a mock for Manager
func NewManagerMock(t minimock.Tester) *ManagerMock {
	m := &ManagerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SetMock = mManagerMockSet{mock: m}
	m.SetMock.callArgs = []*ManagerMockSetParams{}

	return m
}

type mManagerMockSet struct {
	mock               *ManagerMock
	defaultExpectation *ManagerMockSetExpectation
	expectations       []*ManagerMockSetExpectation

	callArgs []*ManagerMockSetParams
	mutex    sync.RWMutex
}

// ManagerMockSetExpectation specifies expectation struct of the Manager.Set
type ManagerMockSetExpectation struct {
	mock    *ManagerMock
	params  *ManagerMockSetParams
	results *ManagerMockSetResults
	Counter uint64
}

// ManagerMockSetParams contains parameters of the Manager.Set
type ManagerMockSetParams struct {
	ctx   context.Context
	pulse Pulse
}

// ManagerMockSetResults contains results of the Manager.Set
type ManagerMockSetResults struct {
	err error
}

// Expect sets up expected params for Manager.Set
func (mmSet *mManagerMockSet) Expect(ctx context.Context, pulse Pulse) *mManagerMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("ManagerMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &ManagerMockSetExpectation{}
	}

	mmSet.defaultExpectation.params = &ManagerMockSetParams{ctx, pulse}
	for _, e := range mmSet.expectations {
		if minimock.Equal(e.params, mmSet.defaultExpectation.params) {
			mmSet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSet.defaultExpectation.params)
		}
	}

	return mmSet
}

// Inspect accepts an inspector function that has same arguments as the Manager.Set
func (mmSet *mManagerMockSet) Inspect(f func(ctx context.Context, pulse Pulse)) *mManagerMockSet {
	if mmSet.mock.inspectFuncSet != nil {
		mmSet.mock.t.Fatalf("Inspect function is already set for ManagerMock.Set")
	}

	mmSet.mock.inspectFuncSet = f

	return mmSet
}

// Return sets up results that will be returned by Manager.Set
func (mmSet *mManagerMockSet) Return(err error) *ManagerMock {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("ManagerMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &ManagerMockSetExpectation{mock: mmSet.mock}
	}
	mmSet.defaultExpectation.results = &ManagerMockSetResults{err}
	return mmSet.mock
}

//Set uses given function f to mock the Manager.Set method
func (mmSet *mManagerMockSet) Set(f func(ctx context.Context, pulse Pulse) (err error)) *ManagerMock {
	if mmSet.defaultExpectation != nil {
		mmSet.mock.t.Fatalf("Default expectation is already set for the Manager.Set method")
	}

	if len(mmSet.expectations) > 0 {
		mmSet.mock.t.Fatalf("Some expectations are already set for the Manager.Set method")
	}

	mmSet.mock.funcSet = f
	return mmSet.mock
}

// When sets expectation for the Manager.Set which will trigger the result defined by the following
// Then helper
func (mmSet *mManagerMockSet) When(ctx context.Context, pulse Pulse) *ManagerMockSetExpectation {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("ManagerMock.Set mock is already set by Set")
	}

	expectation := &ManagerMockSetExpectation{
		mock:   mmSet.mock,
		params: &ManagerMockSetParams{ctx, pulse},
	}
	mmSet.expectations = append(mmSet.expectations, expectation)
	return expectation
}

// Then sets up Manager.Set return parameters for the expectation previously defined by the When method
func (e *ManagerMockSetExpectation) Then(err error) *ManagerMock {
	e.results = &ManagerMockSetResults{err}
	return e.mock
}

// Set implements Manager
func (mmSet *ManagerMock) Set(ctx context.Context, pulse Pulse) (err error) {
	mm_atomic.AddUint64(&mmSet.beforeSetCounter, 1)
	defer mm_atomic.AddUint64(&mmSet.afterSetCounter, 1)

	if mmSet.inspectFuncSet != nil {
		mmSet.inspectFuncSet(ctx, pulse)
	}

	mm_params := &ManagerMockSetParams{ctx, pulse}

	// Record call args
	mmSet.SetMock.mutex.Lock()
	mmSet.SetMock.callArgs = append(mmSet.SetMock.callArgs, mm_params)
	mmSet.SetMock.mutex.Unlock()

	for _, e := range mmSet.SetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSet.SetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSet.SetMock.defaultExpectation.Counter, 1)
		mm_want := mmSet.SetMock.defaultExpectation.params
		mm_got := ManagerMockSetParams{ctx, pulse}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSet.t.Errorf("ManagerMock.Set got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSet.SetMock.defaultExpectation.results
		if mm_results == nil {
			mmSet.t.Fatal("No results are set for the ManagerMock.Set")
		}
		return (*mm_results).err
	}
	if mmSet.funcSet != nil {
		return mmSet.funcSet(ctx, pulse)
	}
	mmSet.t.Fatalf("Unexpected call to ManagerMock.Set. %v %v", ctx, pulse)
	return
}

// SetAfterCounter returns a count of finished ManagerMock.Set invocations
func (mmSet *ManagerMock) SetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.afterSetCounter)
}

// SetBeforeCounter returns a count of ManagerMock.Set invocations
func (mmSet *ManagerMock) SetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.beforeSetCounter)
}

// Calls returns a list of arguments used in each call to ManagerMock.Set.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSet *mManagerMockSet) Calls() []*ManagerMockSetParams {
	mmSet.mutex.RLock()

	argCopy := make([]*ManagerMockSetParams, len(mmSet.callArgs))
	copy(argCopy, mmSet.callArgs)

	mmSet.mutex.RUnlock()

	return argCopy
}

// MinimockSetDone returns true if the count of the Set invocations corresponds
// the number of defined expectations
func (m *ManagerMock) MinimockSetDone() bool {
	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSet != nil && mm_atomic.LoadUint64(&m.afterSetCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetInspect logs each unmet expectation
func (m *ManagerMock) MinimockSetInspect() {
	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ManagerMock.Set with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetCounter) < 1 {
		if m.SetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ManagerMock.Set")
		} else {
			m.t.Errorf("Expected call to ManagerMock.Set with params: %#v", *m.SetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSet != nil && mm_atomic.LoadUint64(&m.afterSetCounter) < 1 {
		m.t.Error("Expected call to ManagerMock.Set")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ManagerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockSetInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ManagerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ManagerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSetDone()
}
