// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: insolar/record/r0_record.proto

package record

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_insolar_assured_ledger_ledger_core_v2_insolar "github.com/insolar/assured-ledger/ledger-core/v2/insolar"
	github_com_insolar_assured_ledger_ledger_core_v2_reference "github.com/insolar/assured-ledger/ledger-core/v2/reference"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type VCallRequest struct {
	Polymorph                   int32                                                                `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	CallType                    int32                                                                `protobuf:"varint,20,opt,name=CallType,proto3" json:"CallType,omitempty"`
	CallFlags                   []byte                                                               `protobuf:"bytes,21,opt,name=CallFlags,proto3" json:"CallFlags,omitempty"`
	CallAsOf                    github_com_insolar_assured_ledger_ledger_core_v2_insolar.PulseNumber `protobuf:"bytes,22,opt,name=CallAsOf,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.PulseNumber" json:"CallAsOf"`
	Caller                      github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference   `protobuf:"bytes,23,opt,name=Caller,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"Caller"`
	Callee                      github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference   `protobuf:"bytes,24,opt,name=Callee,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"Callee"`
	CallSiteDeclaration         github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference   `protobuf:"bytes,25,opt,name=CallSiteDeclaration,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"CallSiteDeclaration"`
	CallSiteMethod              string                                                               `protobuf:"bytes,26,opt,name=CallSiteMethod,proto3" json:"CallSiteMethod,omitempty"`
	CallSequence                []byte                                                               `protobuf:"bytes,27,opt,name=CallSequence,proto3" json:"CallSequence,omitempty"`
	CallReason                  github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference   `protobuf:"bytes,28,opt,name=CallReason,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"CallReason"`
	RootTX                      github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference   `protobuf:"bytes,29,opt,name=RootTX,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"RootTX"`
	CallTX                      github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference   `protobuf:"bytes,30,opt,name=CallTX,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"CallTX"`
	ExpenseCenter               github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference   `protobuf:"bytes,31,opt,name=ExpenseCenter,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"ExpenseCenter"`
	ResourceCenter              github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference   `protobuf:"bytes,32,opt,name=ResourceCenter,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"ResourceCenter"`
	PayloadHash                 []byte                                                               `protobuf:"bytes,33,opt,name=PayloadHash,proto3" json:"PayloadHash,omitempty"`
	DelegationSpec              []byte                                                               `protobuf:"bytes,34,opt,name=DelegationSpec,proto3" json:"DelegationSpec,omitempty"`
	DelegatorSignature          []byte                                                               `protobuf:"bytes,35,opt,name=DelegatorSignature,proto3" json:"DelegatorSignature,omitempty"`
	ProducerSignature           []byte                                                               `protobuf:"bytes,36,opt,name=ProducerSignature,proto3" json:"ProducerSignature,omitempty"`
	RegistrarSignature          []byte                                                               `protobuf:"bytes,37,opt,name=RegistrarSignature,proto3" json:"RegistrarSignature,omitempty"`
	RegistrarDelegationSpec     []byte                                                               `protobuf:"bytes,38,opt,name=RegistrarDelegationSpec,proto3" json:"RegistrarDelegationSpec,omitempty"`
	RegistrarDelegatorSignature []byte                                                               `protobuf:"bytes,39,opt,name=RegistrarDelegatorSignature,proto3" json:"RegistrarDelegatorSignature,omitempty"`
	CallRequestFlags            int32                                                                `protobuf:"varint,40,opt,name=CallRequestFlags,proto3" json:"CallRequestFlags,omitempty"`
	KnownCalleeIncoming         github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference   `protobuf:"bytes,41,opt,name=KnownCalleeIncoming,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"KnownCalleeIncoming"`
	EntryHeadHash               []byte                                                               `protobuf:"bytes,42,opt,name=EntryHeadHash,proto3" json:"EntryHeadHash,omitempty"`
	CallOutgoing                github_com_insolar_assured_ledger_ledger_core_v2_reference.Local     `protobuf:"bytes,43,opt,name=CallOutgoing,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/reference.Local" json:"CallOutgoing"`
	TXExpiry                    github_com_insolar_assured_ledger_ledger_core_v2_insolar.PulseNumber `protobuf:"bytes,44,opt,name=TXExpiry,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.PulseNumber" json:"TXExpiry"`
	SecurityContext             []byte                                                               `protobuf:"bytes,45,opt,name=SecurityContext,proto3" json:"SecurityContext,omitempty"`
	TXContext                   []byte                                                               `protobuf:"bytes,46,opt,name=TXContext,proto3" json:"TXContext,omitempty"`
	Arguments                   []byte                                                               `protobuf:"bytes,47,opt,name=Arguments,proto3" json:"Arguments,omitempty"`
	ExtensionHashes             []byte                                                               `protobuf:"bytes,48,opt,name=ExtensionHashes,proto3" json:"ExtensionHashes,omitempty"`
	Extensions                  []byte                                                               `protobuf:"bytes,49,opt,name=Extensions,proto3" json:"Extensions,omitempty"`
}

func (m *VCallRequest) Reset()      { *m = VCallRequest{} }
func (*VCallRequest) ProtoMessage() {}
func (*VCallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16dd9c51fd36529c, []int{0}
}
func (m *VCallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VCallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VCallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VCallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VCallRequest.Merge(m, src)
}
func (m *VCallRequest) XXX_Size() int {
	return m.Size()
}
func (m *VCallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VCallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VCallRequest proto.InternalMessageInfo

type VCallResult struct {
	Polymorph                   int32                                                                `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	CallType                    int32                                                                `protobuf:"varint,20,opt,name=CallType,proto3" json:"CallType,omitempty"`
	CallFlags                   []byte                                                               `protobuf:"bytes,21,opt,name=CallFlags,proto3" json:"CallFlags,omitempty"`
	CallAsOf                    github_com_insolar_assured_ledger_ledger_core_v2_insolar.PulseNumber `protobuf:"bytes,22,opt,name=CallAsOf,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.PulseNumber" json:"CallAsOf"`
	Caller                      github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference   `protobuf:"bytes,23,opt,name=Caller,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"Caller"`
	Callee                      github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference   `protobuf:"bytes,24,opt,name=Callee,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"Callee"`
	ResultFlags                 []byte                                                               `protobuf:"bytes,25,opt,name=ResultFlags,proto3" json:"ResultFlags,omitempty"`
	CallOutgoing                github_com_insolar_assured_ledger_ledger_core_v2_reference.Local     `protobuf:"bytes,26,opt,name=CallOutgoing,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/reference.Local" json:"CallOutgoing"`
	CallIncoming                github_com_insolar_assured_ledger_ledger_core_v2_reference.Local     `protobuf:"bytes,27,opt,name=CallIncoming,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/reference.Local" json:"CallIncoming"`
	PayloadHash                 []byte                                                               `protobuf:"bytes,28,opt,name=PayloadHash,proto3" json:"PayloadHash,omitempty"`
	DelegationSpec              []byte                                                               `protobuf:"bytes,29,opt,name=DelegationSpec,proto3" json:"DelegationSpec,omitempty"`
	DelegatorSignature          []byte                                                               `protobuf:"bytes,30,opt,name=DelegatorSignature,proto3" json:"DelegatorSignature,omitempty"`
	CallIncomingResult          github_com_insolar_assured_ledger_ledger_core_v2_reference.Local     `protobuf:"bytes,31,opt,name=CallIncomingResult,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/reference.Local" json:"CallIncomingResult"`
	ProducerSignature           []byte                                                               `protobuf:"bytes,32,opt,name=ProducerSignature,proto3" json:"ProducerSignature,omitempty"`
	RegistrarSignature          []byte                                                               `protobuf:"bytes,33,opt,name=RegistrarSignature,proto3" json:"RegistrarSignature,omitempty"`
	RegistrarDelegationSpec     []byte                                                               `protobuf:"bytes,34,opt,name=RegistrarDelegationSpec,proto3" json:"RegistrarDelegationSpec,omitempty"`
	RegistrarDelegatorSignature []byte                                                               `protobuf:"bytes,35,opt,name=RegistrarDelegatorSignature,proto3" json:"RegistrarDelegatorSignature,omitempty"`
	EntryHeadHash               []byte                                                               `protobuf:"bytes,36,opt,name=EntryHeadHash,proto3" json:"EntryHeadHash,omitempty"`
	SecurityContext             []byte                                                               `protobuf:"bytes,37,opt,name=SecurityContext,proto3" json:"SecurityContext,omitempty"`
	ReturnArguments             []byte                                                               `protobuf:"bytes,38,opt,name=ReturnArguments,proto3" json:"ReturnArguments,omitempty"`
	ExtensionHashes             []byte                                                               `protobuf:"bytes,39,opt,name=ExtensionHashes,proto3" json:"ExtensionHashes,omitempty"`
	Extensions                  []byte                                                               `protobuf:"bytes,40,opt,name=Extensions,proto3" json:"Extensions,omitempty"`
}

func (m *VCallResult) Reset()      { *m = VCallResult{} }
func (*VCallResult) ProtoMessage() {}
func (*VCallResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_16dd9c51fd36529c, []int{1}
}
func (m *VCallResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VCallResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VCallResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VCallResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VCallResult.Merge(m, src)
}
func (m *VCallResult) XXX_Size() int {
	return m.Size()
}
func (m *VCallResult) XXX_DiscardUnknown() {
	xxx_messageInfo_VCallResult.DiscardUnknown(m)
}

var xxx_messageInfo_VCallResult proto.InternalMessageInfo

type VStateReport struct {
	Polymorph                     int32                                                                `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	AsOf                          github_com_insolar_assured_ledger_ledger_core_v2_insolar.PulseNumber `protobuf:"bytes,20,opt,name=AsOf,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.PulseNumber" json:"AsOf"`
	Callee                        github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference   `protobuf:"bytes,21,opt,name=Callee,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"Callee"`
	ResultFlags                   []byte                                                               `protobuf:"bytes,22,opt,name=ResultFlags,proto3" json:"ResultFlags,omitempty"`
	DelegationSpec                []byte                                                               `protobuf:"bytes,23,opt,name=DelegationSpec,proto3" json:"DelegationSpec,omitempty"`
	DelegatorSignature            []byte                                                               `protobuf:"bytes,24,opt,name=DelegatorSignature,proto3" json:"DelegatorSignature,omitempty"`
	ImmutablePendingCount         int32                                                                `protobuf:"varint,25,opt,name=ImmutablePendingCount,proto3" json:"ImmutablePendingCount,omitempty"`
	ImmutablePendingEarliestPulse github_com_insolar_assured_ledger_ledger_core_v2_insolar.PulseNumber `protobuf:"bytes,26,opt,name=ImmutablePendingEarliestPulse,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.PulseNumber" json:"ImmutablePendingEarliestPulse"`
	MutablePendingCount           int32                                                                `protobuf:"varint,27,opt,name=MutablePendingCount,proto3" json:"MutablePendingCount,omitempty"`
	MutablePendingEarliestPulse   github_com_insolar_assured_ledger_ledger_core_v2_insolar.PulseNumber `protobuf:"bytes,28,opt,name=MutablePendingEarliestPulse,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.PulseNumber" json:"MutablePendingEarliestPulse"`
	PreRegisteredQueueCount       int32                                                                `protobuf:"varint,29,opt,name=PreRegisteredQueueCount,proto3" json:"PreRegisteredQueueCount,omitempty"`
	PreRegisteredEarliestPulse    github_com_insolar_assured_ledger_ledger_core_v2_insolar.PulseNumber `protobuf:"bytes,30,opt,name=PreRegisteredEarliestPulse,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.PulseNumber" json:"PreRegisteredEarliestPulse"`
	PriorityCallQueueCount        int32                                                                `protobuf:"varint,31,opt,name=PriorityCallQueueCount,proto3" json:"PriorityCallQueueCount,omitempty"`
	LatestValidatedState          github_com_insolar_assured_ledger_ledger_core_v2_reference.Local     `protobuf:"bytes,32,opt,name=LatestValidatedState,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/reference.Local" json:"LatestValidatedState"`
	LatestValidatedCode           github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference   `protobuf:"bytes,33,opt,name=LatestValidatedCode,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"LatestValidatedCode"`
	LatestDirtyState              github_com_insolar_assured_ledger_ledger_core_v2_reference.Local     `protobuf:"bytes,34,opt,name=LatestDirtyState,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/reference.Local" json:"LatestDirtyState"`
	LatestDirtyCode               github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference   `protobuf:"bytes,35,opt,name=LatestDirtyCode,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"LatestDirtyCode"`
	ProvidedContent               []byte                                                               `protobuf:"bytes,36,opt,name=ProvidedContent,proto3" json:"ProvidedContent,omitempty"`
}

func (m *VStateReport) Reset()      { *m = VStateReport{} }
func (*VStateReport) ProtoMessage() {}
func (*VStateReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_16dd9c51fd36529c, []int{2}
}
func (m *VStateReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VStateReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VStateReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VStateReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VStateReport.Merge(m, src)
}
func (m *VStateReport) XXX_Size() int {
	return m.Size()
}
func (m *VStateReport) XXX_DiscardUnknown() {
	xxx_messageInfo_VStateReport.DiscardUnknown(m)
}

var xxx_messageInfo_VStateReport proto.InternalMessageInfo

type VStateRequest struct {
	Polymorph             int32                                                                `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	AsOf                  github_com_insolar_assured_ledger_ledger_core_v2_insolar.PulseNumber `protobuf:"bytes,20,opt,name=AsOf,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.PulseNumber" json:"AsOf"`
	Callee                github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference   `protobuf:"bytes,21,opt,name=Callee,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"Callee"`
	RequestedContent      int32                                                                `protobuf:"varint,22,opt,name=RequestedContent,proto3" json:"RequestedContent,omitempty"`
	RequestedContentLimit []byte                                                               `protobuf:"bytes,23,opt,name=RequestedContentLimit,proto3" json:"RequestedContentLimit,omitempty"`
	SupportedExtensions   []byte                                                               `protobuf:"bytes,24,opt,name=SupportedExtensions,proto3" json:"SupportedExtensions,omitempty"`
	DelegationSpec        []byte                                                               `protobuf:"bytes,25,opt,name=DelegationSpec,proto3" json:"DelegationSpec,omitempty"`
	DelegatorSignature    []byte                                                               `protobuf:"bytes,26,opt,name=DelegatorSignature,proto3" json:"DelegatorSignature,omitempty"`
	ProducerSignature     []byte                                                               `protobuf:"bytes,27,opt,name=ProducerSignature,proto3" json:"ProducerSignature,omitempty"`
	CallRequestFlags      int32                                                                `protobuf:"varint,28,opt,name=CallRequestFlags,proto3" json:"CallRequestFlags,omitempty"`
}

func (m *VStateRequest) Reset()      { *m = VStateRequest{} }
func (*VStateRequest) ProtoMessage() {}
func (*VStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16dd9c51fd36529c, []int{3}
}
func (m *VStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VStateRequest.Merge(m, src)
}
func (m *VStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *VStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VStateRequest proto.InternalMessageInfo

type VPendingDelegationRequest struct {
	Polymorph          int32                                                              `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	Object             github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference `protobuf:"bytes,20,opt,name=Object,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"Object"`
	Request            github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference `protobuf:"bytes,21,opt,name=Request,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"Request"`
	DelegationSpec     []byte                                                             `protobuf:"bytes,22,opt,name=DelegationSpec,proto3" json:"DelegationSpec,omitempty"`
	DelegatorSignature []byte                                                             `protobuf:"bytes,23,opt,name=DelegatorSignature,proto3" json:"DelegatorSignature,omitempty"`
}

func (m *VPendingDelegationRequest) Reset()      { *m = VPendingDelegationRequest{} }
func (*VPendingDelegationRequest) ProtoMessage() {}
func (*VPendingDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16dd9c51fd36529c, []int{4}
}
func (m *VPendingDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPendingDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VPendingDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VPendingDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPendingDelegationRequest.Merge(m, src)
}
func (m *VPendingDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *VPendingDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VPendingDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VPendingDelegationRequest proto.InternalMessageInfo

type VDelegatedRequestFinished struct {
	Polymorph          int32                                                              `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	CallType           int32                                                              `protobuf:"varint,20,opt,name=CallType,proto3" json:"CallType,omitempty"`
	CallFlags          []byte                                                             `protobuf:"bytes,21,opt,name=CallFlags,proto3" json:"CallFlags,omitempty"`
	Callee             github_com_insolar_assured_ledger_ledger_core_v2_insolar.Reference `protobuf:"bytes,22,opt,name=Callee,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar.Reference" json:"Callee"`
	ResultFlags        []byte                                                             `protobuf:"bytes,23,opt,name=ResultFlags,proto3" json:"ResultFlags,omitempty"`
	CallOutgoing       github_com_insolar_assured_ledger_ledger_core_v2_reference.Local   `protobuf:"bytes,24,opt,name=CallOutgoing,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/reference.Local" json:"CallOutgoing"`
	CallIncoming       github_com_insolar_assured_ledger_ledger_core_v2_reference.Local   `protobuf:"bytes,25,opt,name=CallIncoming,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/reference.Local" json:"CallIncoming"`
	DelegationSpec     []byte                                                             `protobuf:"bytes,26,opt,name=DelegationSpec,proto3" json:"DelegationSpec,omitempty"`
	DelegatorSignature []byte                                                             `protobuf:"bytes,27,opt,name=DelegatorSignature,proto3" json:"DelegatorSignature,omitempty"`
	EntryHeadHash      []byte                                                             `protobuf:"bytes,28,opt,name=EntryHeadHash,proto3" json:"EntryHeadHash,omitempty"`
	ObjectBody         []byte                                                             `protobuf:"bytes,29,opt,name=ObjectBody,proto3" json:"ObjectBody,omitempty"`
}

func (m *VDelegatedRequestFinished) Reset()      { *m = VDelegatedRequestFinished{} }
func (*VDelegatedRequestFinished) ProtoMessage() {}
func (*VDelegatedRequestFinished) Descriptor() ([]byte, []int) {
	return fileDescriptor_16dd9c51fd36529c, []int{5}
}
func (m *VDelegatedRequestFinished) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VDelegatedRequestFinished) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VDelegatedRequestFinished.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VDelegatedRequestFinished) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VDelegatedRequestFinished.Merge(m, src)
}
func (m *VDelegatedRequestFinished) XXX_Size() int {
	return m.Size()
}
func (m *VDelegatedRequestFinished) XXX_DiscardUnknown() {
	xxx_messageInfo_VDelegatedRequestFinished.DiscardUnknown(m)
}

var xxx_messageInfo_VDelegatedRequestFinished proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VCallRequest)(nil), "record.VCallRequest")
	proto.RegisterType((*VCallResult)(nil), "record.VCallResult")
	proto.RegisterType((*VStateReport)(nil), "record.VStateReport")
	proto.RegisterType((*VStateRequest)(nil), "record.VStateRequest")
	proto.RegisterType((*VPendingDelegationRequest)(nil), "record.VPendingDelegationRequest")
	proto.RegisterType((*VDelegatedRequestFinished)(nil), "record.VDelegatedRequestFinished")
}

func init() { proto.RegisterFile("insolar/record/r0_record.proto", fileDescriptor_16dd9c51fd36529c) }

var fileDescriptor_16dd9c51fd36529c = []byte{
	// 1338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xb6, 0x86, 0x34, 0x5b, 0xd9, 0xb4, 0xcd, 0xd8, 0x36, 0x61, 0xec, 0x44, 0x71, 0xdd, 0x3f,
	0xaf, 0x6b, 0xe2, 0xee, 0x07, 0x43, 0x2f, 0xdb, 0xfc, 0x0c, 0xed, 0x96, 0xae, 0x9e, 0x12, 0x04,
	0xb9, 0xdb, 0x64, 0xe9, 0x54, 0x51, 0x21, 0x93, 0x1e, 0x45, 0x75, 0x31, 0xd0, 0x8b, 0x3d, 0xc0,
	0x36, 0x0c, 0x7b, 0x89, 0xf5, 0x15, 0xf6, 0x06, 0xbd, 0xec, 0x65, 0xb1, 0x01, 0xc5, 0xe2, 0xde,
	0xec, 0xb2, 0xc0, 0x5e, 0x60, 0x20, 0x29, 0x3b, 0xb2, 0x2c, 0xa7, 0x71, 0x27, 0x17, 0xc3, 0xb0,
	0xab, 0x48, 0xdf, 0xa1, 0xf8, 0xf1, 0xf0, 0x90, 0xdf, 0x47, 0x3a, 0xc8, 0xf4, 0x69, 0xc8, 0x02,
	0x9b, 0xd7, 0x38, 0x38, 0x8c, 0xbb, 0x35, 0x7e, 0xfd, 0x2b, 0xfd, 0xb4, 0xdc, 0xe2, 0x4c, 0x30,
	0x3c, 0xa9, 0xdf, 0x8a, 0x4b, 0x9e, 0x2f, 0x76, 0xa3, 0xc6, 0xb2, 0xc3, 0x9a, 0x35, 0x8f, 0x79,
	0xac, 0xa6, 0xc2, 0x8d, 0xe8, 0xbe, 0x7a, 0x53, 0x2f, 0xea, 0x49, 0x7f, 0x56, 0x79, 0x3c, 0x8d,
	0xa6, 0xb6, 0x57, 0xed, 0x20, 0xb0, 0xe0, 0x9b, 0x08, 0x42, 0x81, 0xe7, 0xd1, 0xf1, 0x16, 0x0b,
	0xda, 0x4d, 0xc6, 0x5b, 0xbb, 0x64, 0xba, 0x6c, 0x54, 0x8f, 0x59, 0x07, 0x00, 0x2e, 0xa2, 0x77,
	0x64, 0xe3, 0xad, 0x76, 0x0b, 0xc8, 0x59, 0x15, 0xec, 0xbd, 0xcb, 0x2f, 0xe5, 0xf3, 0xa7, 0x81,
	0xed, 0x85, 0xe4, 0x5c, 0xd9, 0xa8, 0x4e, 0x59, 0x07, 0x00, 0xde, 0xd5, 0x5f, 0xde, 0x0a, 0xef,
	0xdd, 0x27, 0x33, 0x32, 0xb8, 0xb2, 0xf1, 0xe4, 0xf9, 0x62, 0xe1, 0xb7, 0xe7, 0x8b, 0x6b, 0x89,
	0x11, 0x77, 0x93, 0xb4, 0xc3, 0x30, 0xe2, 0xe0, 0x2e, 0x05, 0xe0, 0x7a, 0xc0, 0x6b, 0xfa, 0xcf,
	0x92, 0xc3, 0x38, 0xd4, 0x1e, 0x7e, 0xd8, 0x6d, 0xb5, 0x5c, 0x8f, 0x82, 0x10, 0xbe, 0x88, 0x9a,
	0x0d, 0xe0, 0x56, 0xaf, 0x77, 0xdc, 0x40, 0x93, 0xf2, 0x19, 0x38, 0x99, 0x55, 0x3c, 0x9f, 0xc5,
	0x3c, 0x2b, 0xaf, 0xcd, 0x63, 0xc1, 0x7d, 0xe0, 0x40, 0x1d, 0xb0, 0xe2, 0x9e, 0x7b, 0x1c, 0x40,
	0xc8, 0x98, 0x38, 0x00, 0x3f, 0x42, 0x67, 0xe4, 0xd3, 0xa6, 0x2f, 0x60, 0x0d, 0x9c, 0xc0, 0xe6,
	0xb6, 0xf0, 0x19, 0x25, 0x73, 0xb9, 0x13, 0x66, 0xd1, 0xe0, 0xcb, 0xe8, 0x54, 0x17, 0xbe, 0x0b,
	0x62, 0x97, 0xb9, 0xa4, 0x58, 0x36, 0xaa, 0xc7, 0xad, 0x14, 0x8a, 0x2b, 0x68, 0x4a, 0x21, 0x72,
	0xf9, 0x50, 0x07, 0x48, 0x49, 0x15, 0xbe, 0x0f, 0xc3, 0x0f, 0x10, 0xd2, 0x4b, 0xcc, 0x0e, 0x19,
	0x25, 0xf3, 0xb9, 0x27, 0x90, 0xe8, 0x5d, 0x56, 0xc6, 0x62, 0x4c, 0x6c, 0xed, 0x90, 0x85, 0xfc,
	0x2b, 0xa3, 0x7b, 0xee, 0x56, 0x7f, 0x6b, 0x87, 0x98, 0xe3, 0xa9, 0xfe, 0xd6, 0x0e, 0x6e, 0xa1,
	0x93, 0xeb, 0x7b, 0x2d, 0xa0, 0x21, 0xac, 0x02, 0x15, 0xc0, 0xc9, 0x62, 0xee, 0x54, 0xfd, 0x04,
	0x98, 0xa3, 0x53, 0x16, 0x84, 0x2c, 0xe2, 0x4e, 0x97, 0xb2, 0x9c, 0x3b, 0x65, 0x8a, 0x01, 0x97,
	0xd1, 0x89, 0xba, 0xdd, 0x0e, 0x98, 0xed, 0xde, 0xb6, 0xc3, 0x5d, 0x72, 0x5e, 0x2d, 0x9e, 0x24,
	0x24, 0xd7, 0xe1, 0x1a, 0x04, 0xe0, 0xa9, 0x55, 0xb9, 0xd9, 0x02, 0x87, 0x54, 0x54, 0xa3, 0x14,
	0x8a, 0x97, 0x11, 0x8e, 0x11, 0xc6, 0x37, 0x7d, 0x8f, 0xda, 0x22, 0xe2, 0x40, 0x2e, 0xa8, 0xb6,
	0x19, 0x11, 0x7c, 0x0d, 0xbd, 0x5b, 0xe7, 0xcc, 0x8d, 0x1c, 0x48, 0x34, 0xbf, 0xa8, 0x9a, 0x0f,
	0x06, 0x64, 0xef, 0x16, 0x78, 0x7e, 0x28, 0xb8, 0x9d, 0x68, 0x7e, 0x49, 0xf7, 0x3e, 0x18, 0xc1,
	0x37, 0xd0, 0x6c, 0x0f, 0x4d, 0x0d, 0xff, 0xb2, 0xfa, 0x68, 0x58, 0x18, 0xdf, 0x44, 0xa5, 0x74,
	0x28, 0x99, 0xd0, 0x15, 0xf5, 0xf5, 0x61, 0x4d, 0xf0, 0x55, 0x34, 0x9d, 0x10, 0x74, 0x2d, 0xc7,
	0x55, 0xa5, 0xd5, 0x03, 0xb8, 0xd4, 0x98, 0xcf, 0x29, 0xfb, 0x96, 0x6a, 0xc9, 0xb9, 0x43, 0x1d,
	0xd6, 0xf4, 0xa9, 0x47, 0xde, 0xcb, 0x5f, 0x63, 0x32, 0x68, 0xf0, 0x45, 0x74, 0x72, 0x9d, 0x0a,
	0xde, 0xbe, 0x0d, 0x71, 0xfd, 0xaf, 0xaa, 0xec, 0xfa, 0x41, 0x1c, 0x68, 0x85, 0xb9, 0x17, 0x09,
	0x8f, 0xc9, 0xc1, 0xbd, 0xaf, 0x06, 0x77, 0x3b, 0x1e, 0xdc, 0xcd, 0x91, 0x07, 0xc7, 0xbb, 0x83,
	0x5a, 0xde, 0x60, 0x8e, 0x1d, 0x58, 0x7d, 0xbd, 0x4b, 0x9f, 0xda, 0xda, 0x59, 0xdf, 0x6b, 0xf9,
	0xbc, 0x4d, 0xae, 0x8d, 0xc3, 0xa7, 0xba, 0xbd, 0xe3, 0x2a, 0x3a, 0xbd, 0x09, 0x4e, 0xc4, 0x7d,
	0xd1, 0x5e, 0x65, 0x54, 0xc0, 0x9e, 0x20, 0x4b, 0x2a, 0xff, 0x34, 0x2c, 0x9d, 0x75, 0x6b, 0xa7,
	0xdb, 0x66, 0x59, 0x3b, 0x6b, 0x0f, 0x90, 0xd1, 0x5b, 0xdc, 0x8b, 0x9a, 0x40, 0x45, 0x48, 0x6a,
	0x3a, 0xda, 0x03, 0x24, 0xcb, 0xfa, 0x9e, 0x00, 0x1a, 0xfa, 0x8c, 0xca, 0xe9, 0x84, 0x90, 0x5c,
	0xd7, 0x2c, 0x29, 0x18, 0x9b, 0x08, 0xf5, 0xa0, 0x90, 0x7c, 0xa0, 0x1a, 0x25, 0x90, 0xca, 0x2f,
	0x08, 0x9d, 0x88, 0x8f, 0x0a, 0x61, 0x14, 0xfc, 0x7f, 0x52, 0xf8, 0xf7, 0x9c, 0x14, 0xca, 0xe8,
	0x84, 0xae, 0x89, 0x9e, 0xd1, 0x39, 0xad, 0xa2, 0x09, 0x68, 0x60, 0x0f, 0x15, 0xc7, 0xba, 0x87,
	0x62, 0xb6, 0x9e, 0x9c, 0x94, 0xc6, 0xc1, 0xd6, 0x53, 0x91, 0x94, 0x87, 0xcc, 0x1f, 0xc5, 0x43,
	0x16, 0x46, 0xf0, 0x10, 0x73, 0xa8, 0x87, 0xec, 0x21, 0x9c, 0x1c, 0x89, 0x9e, 0xf0, 0xd8, 0xa8,
	0xf3, 0xcb, 0x36, 0x83, 0x23, 0xdb, 0xbd, 0xca, 0xa3, 0xb9, 0xd7, 0xf9, 0xd7, 0x71, 0xaf, 0xca,
	0x3f, 0x72, 0xaf, 0x0b, 0xaf, 0x76, 0xaf, 0x01, 0x4f, 0xb8, 0x98, 0xe5, 0x09, 0x19, 0xda, 0x79,
	0x29, 0x5b, 0x3b, 0xab, 0xe8, 0xb4, 0x05, 0x22, 0xe2, 0xf4, 0x40, 0x23, 0xb5, 0x03, 0xa7, 0xe1,
	0x2c, 0xa5, 0xbc, 0x72, 0x14, 0xa5, 0xac, 0x0e, 0x28, 0xe5, 0x0f, 0x53, 0x68, 0x6a, 0x7b, 0x53,
	0xd8, 0x02, 0x2c, 0x68, 0x31, 0xfe, 0x2a, 0xa9, 0xfc, 0x1a, 0x4d, 0x28, 0xb1, 0x3b, 0x3b, 0x06,
	0xb1, 0x9b, 0xe8, 0x13, 0x3a, 0xd0, 0x6a, 0xfb, 0x26, 0x44, 0x68, 0x66, 0x50, 0x84, 0x06, 0xb7,
	0xe1, 0xec, 0x08, 0xdb, 0x90, 0x0c, 0xdd, 0x86, 0x1f, 0xa3, 0x73, 0x77, 0x9a, 0xcd, 0x48, 0xd8,
	0x8d, 0x00, 0xea, 0x40, 0x5d, 0x9f, 0x7a, 0xab, 0x2c, 0xa2, 0x42, 0x09, 0xe1, 0x31, 0x2b, 0x3b,
	0x88, 0x7f, 0x36, 0xd0, 0x42, 0x3a, 0xb2, 0x6e, 0xf3, 0xc0, 0x87, 0x50, 0xa8, 0x19, 0x8c, 0x45,
	0x32, 0xdf, 0x7a, 0x1c, 0x4e, 0x89, 0xaf, 0xa3, 0x33, 0x77, 0x33, 0x12, 0x29, 0xa9, 0x44, 0xb2,
	0x42, 0xf8, 0x47, 0x03, 0x95, 0xee, 0x1e, 0x92, 0xc4, 0xfc, 0x18, 0x92, 0x38, 0x8c, 0x50, 0x8a,
	0x47, 0x9d, 0x83, 0xde, 0xe2, 0xc0, 0xc1, 0xfd, 0x32, 0x82, 0x08, 0x74, 0x1a, 0x0b, 0x2a, 0x8d,
	0x61, 0x61, 0xfc, 0xbd, 0x81, 0x8a, 0x7d, 0xb1, 0xfe, 0x4c, 0xcc, 0x31, 0x64, 0x72, 0x08, 0x1f,
	0xfe, 0x04, 0xcd, 0xd4, 0xb9, 0xcf, 0x94, 0x98, 0xd8, 0x41, 0x90, 0xc8, 0x63, 0x51, 0xe5, 0x31,
	0x24, 0x8a, 0x1f, 0xa1, 0xb3, 0x1b, 0xb6, 0x80, 0x50, 0x6c, 0xdb, 0x81, 0xef, 0xda, 0x02, 0x5c,
	0x25, 0x05, 0xf1, 0x6d, 0x2a, 0x3f, 0x5f, 0xc8, 0x64, 0x91, 0x27, 0xfa, 0x14, 0xbe, 0xca, 0xdc,
	0x58, 0xec, 0xf3, 0x3d, 0xd1, 0x67, 0xd0, 0x60, 0x81, 0xa6, 0x35, 0xbc, 0xe6, 0x73, 0xd1, 0xd6,
	0x79, 0x57, 0x72, 0xce, 0x7b, 0x80, 0x01, 0x0b, 0x74, 0x3a, 0x81, 0xa9, 0x7c, 0x2f, 0xe4, 0x9e,
	0x6f, 0x9a, 0x42, 0xfa, 0x45, 0x9d, 0xb3, 0x87, 0xbe, 0x2b, 0x73, 0xa7, 0x02, 0xa8, 0x88, 0xbd,
	0x2a, 0x0d, 0x57, 0x7e, 0x9d, 0x40, 0x27, 0xbb, 0x7e, 0x70, 0x94, 0x5f, 0xd9, 0xfe, 0x1b, 0x86,
	0x70, 0x15, 0x4d, 0xc7, 0xe9, 0x1e, 0x4c, 0xd0, 0x8c, 0xbe, 0x87, 0xa6, 0x71, 0x29, 0xe1, 0x69,
	0x6c, 0xc3, 0x6f, 0xfa, 0x22, 0x76, 0x88, 0xec, 0xa0, 0x54, 0xcb, 0xcd, 0xa8, 0x25, 0x1d, 0x16,
	0xdc, 0x84, 0x21, 0x6b, 0xa7, 0xc8, 0x0a, 0x65, 0x58, 0xd0, 0xdc, 0x08, 0x16, 0x54, 0x1c, 0xed,
	0xd7, 0x84, 0xd2, 0xb0, 0xf3, 0x58, 0xd6, 0x0d, 0x7d, 0x3e, 0xfb, 0x86, 0x5e, 0xf9, 0xfd, 0x2d,
	0x34, 0xb7, 0x1d, 0x0b, 0xed, 0xc1, 0x20, 0x8f, 0xb6, 0x8e, 0x1a, 0x68, 0xf2, 0x5e, 0xe3, 0x01,
	0x38, 0x22, 0x5e, 0x49, 0xb9, 0x56, 0x59, 0xf7, 0x8c, 0x5d, 0xf4, 0x76, 0x3c, 0x98, 0x31, 0x2c,
	0xa5, 0x6e, 0xd7, 0x19, 0x75, 0x9b, 0x19, 0xa1, 0x6e, 0xb3, 0xc3, 0xea, 0x56, 0xf9, 0x6b, 0x02,
	0xcd, 0x6d, 0xc7, 0x38, 0xb8, 0xdd, 0x89, 0xf7, 0xa9, 0x1f, 0xee, 0x82, 0x3b, 0xb6, 0x1b, 0xee,
	0xc1, 0xee, 0x9b, 0x79, 0x53, 0xc7, 0xb1, 0xd9, 0x57, 0xdf, 0x09, 0xc9, 0x1b, 0xbd, 0x13, 0xce,
	0x8d, 0xf5, 0x4e, 0x38, 0xb8, 0x5e, 0x8a, 0x23, 0xac, 0x97, 0xd2, 0xd0, 0x7d, 0x3e, 0x70, 0x3b,
	0x99, 0xcf, 0xba, 0x9d, 0x98, 0x08, 0xe9, 0xdd, 0xb1, 0xc2, 0xdc, 0x76, 0x7c, 0xd7, 0x4c, 0x20,
	0x2b, 0x37, 0x9e, 0xec, 0x9b, 0x85, 0xa7, 0xfb, 0x66, 0xe1, 0xd9, 0xbe, 0x59, 0x78, 0xb9, 0x6f,
	0x1a, 0xdf, 0x75, 0x4c, 0xe3, 0x71, 0xc7, 0x34, 0x9e, 0x74, 0x4c, 0xe3, 0x69, 0xc7, 0x34, 0xfe,
	0xe8, 0x98, 0xc6, 0x9f, 0x1d, 0xb3, 0xf0, 0xb2, 0x63, 0x1a, 0x3f, 0xbd, 0x30, 0x0b, 0x4f, 0x5f,
	0x98, 0x85, 0x67, 0x2f, 0xcc, 0x42, 0x63, 0x52, 0xfd, 0xd7, 0xe6, 0xa3, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x94, 0x68, 0x01, 0x96, 0x0e, 0x1a, 0x00, 0x00,
}

func (this *VCallRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VCallRequest)
	if !ok {
		that2, ok := that.(VCallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if this.CallType != that1.CallType {
		return false
	}
	if !bytes.Equal(this.CallFlags, that1.CallFlags) {
		return false
	}
	if !this.CallAsOf.Equal(that1.CallAsOf) {
		return false
	}
	if !this.Caller.Equal(that1.Caller) {
		return false
	}
	if !this.Callee.Equal(that1.Callee) {
		return false
	}
	if !this.CallSiteDeclaration.Equal(that1.CallSiteDeclaration) {
		return false
	}
	if this.CallSiteMethod != that1.CallSiteMethod {
		return false
	}
	if !bytes.Equal(this.CallSequence, that1.CallSequence) {
		return false
	}
	if !this.CallReason.Equal(that1.CallReason) {
		return false
	}
	if !this.RootTX.Equal(that1.RootTX) {
		return false
	}
	if !this.CallTX.Equal(that1.CallTX) {
		return false
	}
	if !this.ExpenseCenter.Equal(that1.ExpenseCenter) {
		return false
	}
	if !this.ResourceCenter.Equal(that1.ResourceCenter) {
		return false
	}
	if !bytes.Equal(this.PayloadHash, that1.PayloadHash) {
		return false
	}
	if !bytes.Equal(this.DelegationSpec, that1.DelegationSpec) {
		return false
	}
	if !bytes.Equal(this.DelegatorSignature, that1.DelegatorSignature) {
		return false
	}
	if !bytes.Equal(this.ProducerSignature, that1.ProducerSignature) {
		return false
	}
	if !bytes.Equal(this.RegistrarSignature, that1.RegistrarSignature) {
		return false
	}
	if !bytes.Equal(this.RegistrarDelegationSpec, that1.RegistrarDelegationSpec) {
		return false
	}
	if !bytes.Equal(this.RegistrarDelegatorSignature, that1.RegistrarDelegatorSignature) {
		return false
	}
	if this.CallRequestFlags != that1.CallRequestFlags {
		return false
	}
	if !this.KnownCalleeIncoming.Equal(that1.KnownCalleeIncoming) {
		return false
	}
	if !bytes.Equal(this.EntryHeadHash, that1.EntryHeadHash) {
		return false
	}
	if !this.CallOutgoing.Equal(that1.CallOutgoing) {
		return false
	}
	if !this.TXExpiry.Equal(that1.TXExpiry) {
		return false
	}
	if !bytes.Equal(this.SecurityContext, that1.SecurityContext) {
		return false
	}
	if !bytes.Equal(this.TXContext, that1.TXContext) {
		return false
	}
	if !bytes.Equal(this.Arguments, that1.Arguments) {
		return false
	}
	if !bytes.Equal(this.ExtensionHashes, that1.ExtensionHashes) {
		return false
	}
	if !bytes.Equal(this.Extensions, that1.Extensions) {
		return false
	}
	return true
}
func (this *VCallResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VCallResult)
	if !ok {
		that2, ok := that.(VCallResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if this.CallType != that1.CallType {
		return false
	}
	if !bytes.Equal(this.CallFlags, that1.CallFlags) {
		return false
	}
	if !this.CallAsOf.Equal(that1.CallAsOf) {
		return false
	}
	if !this.Caller.Equal(that1.Caller) {
		return false
	}
	if !this.Callee.Equal(that1.Callee) {
		return false
	}
	if !bytes.Equal(this.ResultFlags, that1.ResultFlags) {
		return false
	}
	if !this.CallOutgoing.Equal(that1.CallOutgoing) {
		return false
	}
	if !this.CallIncoming.Equal(that1.CallIncoming) {
		return false
	}
	if !bytes.Equal(this.PayloadHash, that1.PayloadHash) {
		return false
	}
	if !bytes.Equal(this.DelegationSpec, that1.DelegationSpec) {
		return false
	}
	if !bytes.Equal(this.DelegatorSignature, that1.DelegatorSignature) {
		return false
	}
	if !this.CallIncomingResult.Equal(that1.CallIncomingResult) {
		return false
	}
	if !bytes.Equal(this.ProducerSignature, that1.ProducerSignature) {
		return false
	}
	if !bytes.Equal(this.RegistrarSignature, that1.RegistrarSignature) {
		return false
	}
	if !bytes.Equal(this.RegistrarDelegationSpec, that1.RegistrarDelegationSpec) {
		return false
	}
	if !bytes.Equal(this.RegistrarDelegatorSignature, that1.RegistrarDelegatorSignature) {
		return false
	}
	if !bytes.Equal(this.EntryHeadHash, that1.EntryHeadHash) {
		return false
	}
	if !bytes.Equal(this.SecurityContext, that1.SecurityContext) {
		return false
	}
	if !bytes.Equal(this.ReturnArguments, that1.ReturnArguments) {
		return false
	}
	if !bytes.Equal(this.ExtensionHashes, that1.ExtensionHashes) {
		return false
	}
	if !bytes.Equal(this.Extensions, that1.Extensions) {
		return false
	}
	return true
}
func (this *VStateReport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VStateReport)
	if !ok {
		that2, ok := that.(VStateReport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.AsOf.Equal(that1.AsOf) {
		return false
	}
	if !this.Callee.Equal(that1.Callee) {
		return false
	}
	if !bytes.Equal(this.ResultFlags, that1.ResultFlags) {
		return false
	}
	if !bytes.Equal(this.DelegationSpec, that1.DelegationSpec) {
		return false
	}
	if !bytes.Equal(this.DelegatorSignature, that1.DelegatorSignature) {
		return false
	}
	if this.ImmutablePendingCount != that1.ImmutablePendingCount {
		return false
	}
	if !this.ImmutablePendingEarliestPulse.Equal(that1.ImmutablePendingEarliestPulse) {
		return false
	}
	if this.MutablePendingCount != that1.MutablePendingCount {
		return false
	}
	if !this.MutablePendingEarliestPulse.Equal(that1.MutablePendingEarliestPulse) {
		return false
	}
	if this.PreRegisteredQueueCount != that1.PreRegisteredQueueCount {
		return false
	}
	if !this.PreRegisteredEarliestPulse.Equal(that1.PreRegisteredEarliestPulse) {
		return false
	}
	if this.PriorityCallQueueCount != that1.PriorityCallQueueCount {
		return false
	}
	if !this.LatestValidatedState.Equal(that1.LatestValidatedState) {
		return false
	}
	if !this.LatestValidatedCode.Equal(that1.LatestValidatedCode) {
		return false
	}
	if !this.LatestDirtyState.Equal(that1.LatestDirtyState) {
		return false
	}
	if !this.LatestDirtyCode.Equal(that1.LatestDirtyCode) {
		return false
	}
	if !bytes.Equal(this.ProvidedContent, that1.ProvidedContent) {
		return false
	}
	return true
}
func (this *VStateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VStateRequest)
	if !ok {
		that2, ok := that.(VStateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.AsOf.Equal(that1.AsOf) {
		return false
	}
	if !this.Callee.Equal(that1.Callee) {
		return false
	}
	if this.RequestedContent != that1.RequestedContent {
		return false
	}
	if !bytes.Equal(this.RequestedContentLimit, that1.RequestedContentLimit) {
		return false
	}
	if !bytes.Equal(this.SupportedExtensions, that1.SupportedExtensions) {
		return false
	}
	if !bytes.Equal(this.DelegationSpec, that1.DelegationSpec) {
		return false
	}
	if !bytes.Equal(this.DelegatorSignature, that1.DelegatorSignature) {
		return false
	}
	if !bytes.Equal(this.ProducerSignature, that1.ProducerSignature) {
		return false
	}
	if this.CallRequestFlags != that1.CallRequestFlags {
		return false
	}
	return true
}
func (this *VPendingDelegationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VPendingDelegationRequest)
	if !ok {
		that2, ok := that.(VPendingDelegationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.Object.Equal(that1.Object) {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !bytes.Equal(this.DelegationSpec, that1.DelegationSpec) {
		return false
	}
	if !bytes.Equal(this.DelegatorSignature, that1.DelegatorSignature) {
		return false
	}
	return true
}
func (this *VDelegatedRequestFinished) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VDelegatedRequestFinished)
	if !ok {
		that2, ok := that.(VDelegatedRequestFinished)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if this.CallType != that1.CallType {
		return false
	}
	if !bytes.Equal(this.CallFlags, that1.CallFlags) {
		return false
	}
	if !this.Callee.Equal(that1.Callee) {
		return false
	}
	if !bytes.Equal(this.ResultFlags, that1.ResultFlags) {
		return false
	}
	if !this.CallOutgoing.Equal(that1.CallOutgoing) {
		return false
	}
	if !this.CallIncoming.Equal(that1.CallIncoming) {
		return false
	}
	if !bytes.Equal(this.DelegationSpec, that1.DelegationSpec) {
		return false
	}
	if !bytes.Equal(this.DelegatorSignature, that1.DelegatorSignature) {
		return false
	}
	if !bytes.Equal(this.EntryHeadHash, that1.EntryHeadHash) {
		return false
	}
	if !bytes.Equal(this.ObjectBody, that1.ObjectBody) {
		return false
	}
	return true
}
func (this *VCallRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 35)
	s = append(s, "&record.VCallRequest{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "CallType: "+fmt.Sprintf("%#v", this.CallType)+",\n")
	s = append(s, "CallFlags: "+fmt.Sprintf("%#v", this.CallFlags)+",\n")
	s = append(s, "CallAsOf: "+fmt.Sprintf("%#v", this.CallAsOf)+",\n")
	s = append(s, "Caller: "+fmt.Sprintf("%#v", this.Caller)+",\n")
	s = append(s, "Callee: "+fmt.Sprintf("%#v", this.Callee)+",\n")
	s = append(s, "CallSiteDeclaration: "+fmt.Sprintf("%#v", this.CallSiteDeclaration)+",\n")
	s = append(s, "CallSiteMethod: "+fmt.Sprintf("%#v", this.CallSiteMethod)+",\n")
	s = append(s, "CallSequence: "+fmt.Sprintf("%#v", this.CallSequence)+",\n")
	s = append(s, "CallReason: "+fmt.Sprintf("%#v", this.CallReason)+",\n")
	s = append(s, "RootTX: "+fmt.Sprintf("%#v", this.RootTX)+",\n")
	s = append(s, "CallTX: "+fmt.Sprintf("%#v", this.CallTX)+",\n")
	s = append(s, "ExpenseCenter: "+fmt.Sprintf("%#v", this.ExpenseCenter)+",\n")
	s = append(s, "ResourceCenter: "+fmt.Sprintf("%#v", this.ResourceCenter)+",\n")
	s = append(s, "PayloadHash: "+fmt.Sprintf("%#v", this.PayloadHash)+",\n")
	s = append(s, "DelegationSpec: "+fmt.Sprintf("%#v", this.DelegationSpec)+",\n")
	s = append(s, "DelegatorSignature: "+fmt.Sprintf("%#v", this.DelegatorSignature)+",\n")
	s = append(s, "ProducerSignature: "+fmt.Sprintf("%#v", this.ProducerSignature)+",\n")
	s = append(s, "RegistrarSignature: "+fmt.Sprintf("%#v", this.RegistrarSignature)+",\n")
	s = append(s, "RegistrarDelegationSpec: "+fmt.Sprintf("%#v", this.RegistrarDelegationSpec)+",\n")
	s = append(s, "RegistrarDelegatorSignature: "+fmt.Sprintf("%#v", this.RegistrarDelegatorSignature)+",\n")
	s = append(s, "CallRequestFlags: "+fmt.Sprintf("%#v", this.CallRequestFlags)+",\n")
	s = append(s, "KnownCalleeIncoming: "+fmt.Sprintf("%#v", this.KnownCalleeIncoming)+",\n")
	s = append(s, "EntryHeadHash: "+fmt.Sprintf("%#v", this.EntryHeadHash)+",\n")
	s = append(s, "CallOutgoing: "+fmt.Sprintf("%#v", this.CallOutgoing)+",\n")
	s = append(s, "TXExpiry: "+fmt.Sprintf("%#v", this.TXExpiry)+",\n")
	s = append(s, "SecurityContext: "+fmt.Sprintf("%#v", this.SecurityContext)+",\n")
	s = append(s, "TXContext: "+fmt.Sprintf("%#v", this.TXContext)+",\n")
	s = append(s, "Arguments: "+fmt.Sprintf("%#v", this.Arguments)+",\n")
	s = append(s, "ExtensionHashes: "+fmt.Sprintf("%#v", this.ExtensionHashes)+",\n")
	s = append(s, "Extensions: "+fmt.Sprintf("%#v", this.Extensions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VCallResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&record.VCallResult{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "CallType: "+fmt.Sprintf("%#v", this.CallType)+",\n")
	s = append(s, "CallFlags: "+fmt.Sprintf("%#v", this.CallFlags)+",\n")
	s = append(s, "CallAsOf: "+fmt.Sprintf("%#v", this.CallAsOf)+",\n")
	s = append(s, "Caller: "+fmt.Sprintf("%#v", this.Caller)+",\n")
	s = append(s, "Callee: "+fmt.Sprintf("%#v", this.Callee)+",\n")
	s = append(s, "ResultFlags: "+fmt.Sprintf("%#v", this.ResultFlags)+",\n")
	s = append(s, "CallOutgoing: "+fmt.Sprintf("%#v", this.CallOutgoing)+",\n")
	s = append(s, "CallIncoming: "+fmt.Sprintf("%#v", this.CallIncoming)+",\n")
	s = append(s, "PayloadHash: "+fmt.Sprintf("%#v", this.PayloadHash)+",\n")
	s = append(s, "DelegationSpec: "+fmt.Sprintf("%#v", this.DelegationSpec)+",\n")
	s = append(s, "DelegatorSignature: "+fmt.Sprintf("%#v", this.DelegatorSignature)+",\n")
	s = append(s, "CallIncomingResult: "+fmt.Sprintf("%#v", this.CallIncomingResult)+",\n")
	s = append(s, "ProducerSignature: "+fmt.Sprintf("%#v", this.ProducerSignature)+",\n")
	s = append(s, "RegistrarSignature: "+fmt.Sprintf("%#v", this.RegistrarSignature)+",\n")
	s = append(s, "RegistrarDelegationSpec: "+fmt.Sprintf("%#v", this.RegistrarDelegationSpec)+",\n")
	s = append(s, "RegistrarDelegatorSignature: "+fmt.Sprintf("%#v", this.RegistrarDelegatorSignature)+",\n")
	s = append(s, "EntryHeadHash: "+fmt.Sprintf("%#v", this.EntryHeadHash)+",\n")
	s = append(s, "SecurityContext: "+fmt.Sprintf("%#v", this.SecurityContext)+",\n")
	s = append(s, "ReturnArguments: "+fmt.Sprintf("%#v", this.ReturnArguments)+",\n")
	s = append(s, "ExtensionHashes: "+fmt.Sprintf("%#v", this.ExtensionHashes)+",\n")
	s = append(s, "Extensions: "+fmt.Sprintf("%#v", this.Extensions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VStateReport) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 22)
	s = append(s, "&record.VStateReport{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "AsOf: "+fmt.Sprintf("%#v", this.AsOf)+",\n")
	s = append(s, "Callee: "+fmt.Sprintf("%#v", this.Callee)+",\n")
	s = append(s, "ResultFlags: "+fmt.Sprintf("%#v", this.ResultFlags)+",\n")
	s = append(s, "DelegationSpec: "+fmt.Sprintf("%#v", this.DelegationSpec)+",\n")
	s = append(s, "DelegatorSignature: "+fmt.Sprintf("%#v", this.DelegatorSignature)+",\n")
	s = append(s, "ImmutablePendingCount: "+fmt.Sprintf("%#v", this.ImmutablePendingCount)+",\n")
	s = append(s, "ImmutablePendingEarliestPulse: "+fmt.Sprintf("%#v", this.ImmutablePendingEarliestPulse)+",\n")
	s = append(s, "MutablePendingCount: "+fmt.Sprintf("%#v", this.MutablePendingCount)+",\n")
	s = append(s, "MutablePendingEarliestPulse: "+fmt.Sprintf("%#v", this.MutablePendingEarliestPulse)+",\n")
	s = append(s, "PreRegisteredQueueCount: "+fmt.Sprintf("%#v", this.PreRegisteredQueueCount)+",\n")
	s = append(s, "PreRegisteredEarliestPulse: "+fmt.Sprintf("%#v", this.PreRegisteredEarliestPulse)+",\n")
	s = append(s, "PriorityCallQueueCount: "+fmt.Sprintf("%#v", this.PriorityCallQueueCount)+",\n")
	s = append(s, "LatestValidatedState: "+fmt.Sprintf("%#v", this.LatestValidatedState)+",\n")
	s = append(s, "LatestValidatedCode: "+fmt.Sprintf("%#v", this.LatestValidatedCode)+",\n")
	s = append(s, "LatestDirtyState: "+fmt.Sprintf("%#v", this.LatestDirtyState)+",\n")
	s = append(s, "LatestDirtyCode: "+fmt.Sprintf("%#v", this.LatestDirtyCode)+",\n")
	s = append(s, "ProvidedContent: "+fmt.Sprintf("%#v", this.ProvidedContent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VStateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&record.VStateRequest{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "AsOf: "+fmt.Sprintf("%#v", this.AsOf)+",\n")
	s = append(s, "Callee: "+fmt.Sprintf("%#v", this.Callee)+",\n")
	s = append(s, "RequestedContent: "+fmt.Sprintf("%#v", this.RequestedContent)+",\n")
	s = append(s, "RequestedContentLimit: "+fmt.Sprintf("%#v", this.RequestedContentLimit)+",\n")
	s = append(s, "SupportedExtensions: "+fmt.Sprintf("%#v", this.SupportedExtensions)+",\n")
	s = append(s, "DelegationSpec: "+fmt.Sprintf("%#v", this.DelegationSpec)+",\n")
	s = append(s, "DelegatorSignature: "+fmt.Sprintf("%#v", this.DelegatorSignature)+",\n")
	s = append(s, "ProducerSignature: "+fmt.Sprintf("%#v", this.ProducerSignature)+",\n")
	s = append(s, "CallRequestFlags: "+fmt.Sprintf("%#v", this.CallRequestFlags)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VPendingDelegationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&record.VPendingDelegationRequest{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "Object: "+fmt.Sprintf("%#v", this.Object)+",\n")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "DelegationSpec: "+fmt.Sprintf("%#v", this.DelegationSpec)+",\n")
	s = append(s, "DelegatorSignature: "+fmt.Sprintf("%#v", this.DelegatorSignature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VDelegatedRequestFinished) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&record.VDelegatedRequestFinished{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "CallType: "+fmt.Sprintf("%#v", this.CallType)+",\n")
	s = append(s, "CallFlags: "+fmt.Sprintf("%#v", this.CallFlags)+",\n")
	s = append(s, "Callee: "+fmt.Sprintf("%#v", this.Callee)+",\n")
	s = append(s, "ResultFlags: "+fmt.Sprintf("%#v", this.ResultFlags)+",\n")
	s = append(s, "CallOutgoing: "+fmt.Sprintf("%#v", this.CallOutgoing)+",\n")
	s = append(s, "CallIncoming: "+fmt.Sprintf("%#v", this.CallIncoming)+",\n")
	s = append(s, "DelegationSpec: "+fmt.Sprintf("%#v", this.DelegationSpec)+",\n")
	s = append(s, "DelegatorSignature: "+fmt.Sprintf("%#v", this.DelegatorSignature)+",\n")
	s = append(s, "EntryHeadHash: "+fmt.Sprintf("%#v", this.EntryHeadHash)+",\n")
	s = append(s, "ObjectBody: "+fmt.Sprintf("%#v", this.ObjectBody)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringR0Record(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *VCallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VCallRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(m.Polymorph))
	}
	if m.CallType != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(m.CallType))
	}
	if len(m.CallFlags) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.CallFlags)))
		i += copy(dAtA[i:], m.CallFlags)
	}
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.CallAsOf.Size()))
	n1, err := m.CallAsOf.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0xba
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.Caller.Size()))
	n2, err := m.Caller.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0xc2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.Callee.Size()))
	n3, err := m.Callee.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0xca
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.CallSiteDeclaration.Size()))
	n4, err := m.CallSiteDeclaration.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.CallSiteMethod) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.CallSiteMethod)))
		i += copy(dAtA[i:], m.CallSiteMethod)
	}
	if len(m.CallSequence) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.CallSequence)))
		i += copy(dAtA[i:], m.CallSequence)
	}
	dAtA[i] = 0xe2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.CallReason.Size()))
	n5, err := m.CallReason.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.RootTX.Size()))
	n6, err := m.RootTX.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0xf2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.CallTX.Size()))
	n7, err := m.CallTX.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0xfa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.ExpenseCenter.Size()))
	n8, err := m.ExpenseCenter.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.ResourceCenter.Size()))
	n9, err := m.ResourceCenter.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if len(m.PayloadHash) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.PayloadHash)))
		i += copy(dAtA[i:], m.PayloadHash)
	}
	if len(m.DelegationSpec) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.DelegationSpec)))
		i += copy(dAtA[i:], m.DelegationSpec)
	}
	if len(m.DelegatorSignature) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.DelegatorSignature)))
		i += copy(dAtA[i:], m.DelegatorSignature)
	}
	if len(m.ProducerSignature) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.ProducerSignature)))
		i += copy(dAtA[i:], m.ProducerSignature)
	}
	if len(m.RegistrarSignature) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.RegistrarSignature)))
		i += copy(dAtA[i:], m.RegistrarSignature)
	}
	if len(m.RegistrarDelegationSpec) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.RegistrarDelegationSpec)))
		i += copy(dAtA[i:], m.RegistrarDelegationSpec)
	}
	if len(m.RegistrarDelegatorSignature) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.RegistrarDelegatorSignature)))
		i += copy(dAtA[i:], m.RegistrarDelegatorSignature)
	}
	if m.CallRequestFlags != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(m.CallRequestFlags))
	}
	dAtA[i] = 0xca
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.KnownCalleeIncoming.Size()))
	n10, err := m.KnownCalleeIncoming.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if len(m.EntryHeadHash) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.EntryHeadHash)))
		i += copy(dAtA[i:], m.EntryHeadHash)
	}
	dAtA[i] = 0xda
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.CallOutgoing.Size()))
	n11, err := m.CallOutgoing.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0xe2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.TXExpiry.Size()))
	n12, err := m.TXExpiry.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	if len(m.SecurityContext) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.SecurityContext)))
		i += copy(dAtA[i:], m.SecurityContext)
	}
	if len(m.TXContext) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.TXContext)))
		i += copy(dAtA[i:], m.TXContext)
	}
	if len(m.Arguments) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.Arguments)))
		i += copy(dAtA[i:], m.Arguments)
	}
	if len(m.ExtensionHashes) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.ExtensionHashes)))
		i += copy(dAtA[i:], m.ExtensionHashes)
	}
	if len(m.Extensions) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.Extensions)))
		i += copy(dAtA[i:], m.Extensions)
	}
	return i, nil
}

func (m *VCallResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VCallResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(m.Polymorph))
	}
	if m.CallType != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(m.CallType))
	}
	if len(m.CallFlags) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.CallFlags)))
		i += copy(dAtA[i:], m.CallFlags)
	}
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.CallAsOf.Size()))
	n13, err := m.CallAsOf.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0xba
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.Caller.Size()))
	n14, err := m.Caller.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0xc2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.Callee.Size()))
	n15, err := m.Callee.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if len(m.ResultFlags) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.ResultFlags)))
		i += copy(dAtA[i:], m.ResultFlags)
	}
	dAtA[i] = 0xd2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.CallOutgoing.Size()))
	n16, err := m.CallOutgoing.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	dAtA[i] = 0xda
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.CallIncoming.Size()))
	n17, err := m.CallIncoming.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	if len(m.PayloadHash) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.PayloadHash)))
		i += copy(dAtA[i:], m.PayloadHash)
	}
	if len(m.DelegationSpec) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.DelegationSpec)))
		i += copy(dAtA[i:], m.DelegationSpec)
	}
	if len(m.DelegatorSignature) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.DelegatorSignature)))
		i += copy(dAtA[i:], m.DelegatorSignature)
	}
	dAtA[i] = 0xfa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.CallIncomingResult.Size()))
	n18, err := m.CallIncomingResult.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	if len(m.ProducerSignature) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.ProducerSignature)))
		i += copy(dAtA[i:], m.ProducerSignature)
	}
	if len(m.RegistrarSignature) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.RegistrarSignature)))
		i += copy(dAtA[i:], m.RegistrarSignature)
	}
	if len(m.RegistrarDelegationSpec) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.RegistrarDelegationSpec)))
		i += copy(dAtA[i:], m.RegistrarDelegationSpec)
	}
	if len(m.RegistrarDelegatorSignature) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.RegistrarDelegatorSignature)))
		i += copy(dAtA[i:], m.RegistrarDelegatorSignature)
	}
	if len(m.EntryHeadHash) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.EntryHeadHash)))
		i += copy(dAtA[i:], m.EntryHeadHash)
	}
	if len(m.SecurityContext) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.SecurityContext)))
		i += copy(dAtA[i:], m.SecurityContext)
	}
	if len(m.ReturnArguments) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.ReturnArguments)))
		i += copy(dAtA[i:], m.ReturnArguments)
	}
	if len(m.ExtensionHashes) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.ExtensionHashes)))
		i += copy(dAtA[i:], m.ExtensionHashes)
	}
	if len(m.Extensions) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.Extensions)))
		i += copy(dAtA[i:], m.Extensions)
	}
	return i, nil
}

func (m *VStateReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VStateReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(m.Polymorph))
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.AsOf.Size()))
	n19, err := m.AsOf.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.Callee.Size()))
	n20, err := m.Callee.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	if len(m.ResultFlags) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.ResultFlags)))
		i += copy(dAtA[i:], m.ResultFlags)
	}
	if len(m.DelegationSpec) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.DelegationSpec)))
		i += copy(dAtA[i:], m.DelegationSpec)
	}
	if len(m.DelegatorSignature) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.DelegatorSignature)))
		i += copy(dAtA[i:], m.DelegatorSignature)
	}
	if m.ImmutablePendingCount != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(m.ImmutablePendingCount))
	}
	dAtA[i] = 0xd2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.ImmutablePendingEarliestPulse.Size()))
	n21, err := m.ImmutablePendingEarliestPulse.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	if m.MutablePendingCount != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(m.MutablePendingCount))
	}
	dAtA[i] = 0xe2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.MutablePendingEarliestPulse.Size()))
	n22, err := m.MutablePendingEarliestPulse.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	if m.PreRegisteredQueueCount != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(m.PreRegisteredQueueCount))
	}
	dAtA[i] = 0xf2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.PreRegisteredEarliestPulse.Size()))
	n23, err := m.PreRegisteredEarliestPulse.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	if m.PriorityCallQueueCount != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(m.PriorityCallQueueCount))
	}
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.LatestValidatedState.Size()))
	n24, err := m.LatestValidatedState.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.LatestValidatedCode.Size()))
	n25, err := m.LatestValidatedCode.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.LatestDirtyState.Size()))
	n26, err := m.LatestDirtyState.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	dAtA[i] = 0x9a
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.LatestDirtyCode.Size()))
	n27, err := m.LatestDirtyCode.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	if len(m.ProvidedContent) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.ProvidedContent)))
		i += copy(dAtA[i:], m.ProvidedContent)
	}
	return i, nil
}

func (m *VStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VStateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(m.Polymorph))
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.AsOf.Size()))
	n28, err := m.AsOf.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.Callee.Size()))
	n29, err := m.Callee.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	if m.RequestedContent != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(m.RequestedContent))
	}
	if len(m.RequestedContentLimit) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.RequestedContentLimit)))
		i += copy(dAtA[i:], m.RequestedContentLimit)
	}
	if len(m.SupportedExtensions) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.SupportedExtensions)))
		i += copy(dAtA[i:], m.SupportedExtensions)
	}
	if len(m.DelegationSpec) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.DelegationSpec)))
		i += copy(dAtA[i:], m.DelegationSpec)
	}
	if len(m.DelegatorSignature) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.DelegatorSignature)))
		i += copy(dAtA[i:], m.DelegatorSignature)
	}
	if len(m.ProducerSignature) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.ProducerSignature)))
		i += copy(dAtA[i:], m.ProducerSignature)
	}
	if m.CallRequestFlags != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(m.CallRequestFlags))
	}
	return i, nil
}

func (m *VPendingDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPendingDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(m.Polymorph))
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.Object.Size()))
	n30, err := m.Object.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.Request.Size()))
	n31, err := m.Request.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n31
	if len(m.DelegationSpec) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.DelegationSpec)))
		i += copy(dAtA[i:], m.DelegationSpec)
	}
	if len(m.DelegatorSignature) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.DelegatorSignature)))
		i += copy(dAtA[i:], m.DelegatorSignature)
	}
	return i, nil
}

func (m *VDelegatedRequestFinished) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VDelegatedRequestFinished) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(m.Polymorph))
	}
	if m.CallType != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(m.CallType))
	}
	if len(m.CallFlags) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.CallFlags)))
		i += copy(dAtA[i:], m.CallFlags)
	}
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.Callee.Size()))
	n32, err := m.Callee.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n32
	if len(m.ResultFlags) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.ResultFlags)))
		i += copy(dAtA[i:], m.ResultFlags)
	}
	dAtA[i] = 0xc2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.CallOutgoing.Size()))
	n33, err := m.CallOutgoing.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n33
	dAtA[i] = 0xca
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintR0Record(dAtA, i, uint64(m.CallIncoming.Size()))
	n34, err := m.CallIncoming.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n34
	if len(m.DelegationSpec) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.DelegationSpec)))
		i += copy(dAtA[i:], m.DelegationSpec)
	}
	if len(m.DelegatorSignature) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.DelegatorSignature)))
		i += copy(dAtA[i:], m.DelegatorSignature)
	}
	if len(m.EntryHeadHash) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.EntryHeadHash)))
		i += copy(dAtA[i:], m.EntryHeadHash)
	}
	if len(m.ObjectBody) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintR0Record(dAtA, i, uint64(len(m.ObjectBody)))
		i += copy(dAtA[i:], m.ObjectBody)
	}
	return i, nil
}

func encodeVarintR0Record(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VCallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovR0Record(uint64(m.Polymorph))
	}
	if m.CallType != 0 {
		n += 2 + sovR0Record(uint64(m.CallType))
	}
	l = len(m.CallFlags)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = m.CallAsOf.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.Caller.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.Callee.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.CallSiteDeclaration.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = len(m.CallSiteMethod)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.CallSequence)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = m.CallReason.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.RootTX.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.CallTX.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.ExpenseCenter.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.ResourceCenter.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = len(m.PayloadHash)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.DelegationSpec)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.DelegatorSignature)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.ProducerSignature)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.RegistrarSignature)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.RegistrarDelegationSpec)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.RegistrarDelegatorSignature)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	if m.CallRequestFlags != 0 {
		n += 2 + sovR0Record(uint64(m.CallRequestFlags))
	}
	l = m.KnownCalleeIncoming.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = len(m.EntryHeadHash)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = m.CallOutgoing.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.TXExpiry.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = len(m.SecurityContext)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.TXContext)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.Arguments)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.ExtensionHashes)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.Extensions)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	return n
}

func (m *VCallResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovR0Record(uint64(m.Polymorph))
	}
	if m.CallType != 0 {
		n += 2 + sovR0Record(uint64(m.CallType))
	}
	l = len(m.CallFlags)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = m.CallAsOf.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.Caller.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.Callee.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = len(m.ResultFlags)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = m.CallOutgoing.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.CallIncoming.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = len(m.PayloadHash)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.DelegationSpec)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.DelegatorSignature)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = m.CallIncomingResult.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = len(m.ProducerSignature)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.RegistrarSignature)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.RegistrarDelegationSpec)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.RegistrarDelegatorSignature)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.EntryHeadHash)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.SecurityContext)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.ReturnArguments)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.ExtensionHashes)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.Extensions)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	return n
}

func (m *VStateReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovR0Record(uint64(m.Polymorph))
	}
	l = m.AsOf.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.Callee.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = len(m.ResultFlags)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.DelegationSpec)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.DelegatorSignature)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	if m.ImmutablePendingCount != 0 {
		n += 2 + sovR0Record(uint64(m.ImmutablePendingCount))
	}
	l = m.ImmutablePendingEarliestPulse.Size()
	n += 2 + l + sovR0Record(uint64(l))
	if m.MutablePendingCount != 0 {
		n += 2 + sovR0Record(uint64(m.MutablePendingCount))
	}
	l = m.MutablePendingEarliestPulse.Size()
	n += 2 + l + sovR0Record(uint64(l))
	if m.PreRegisteredQueueCount != 0 {
		n += 2 + sovR0Record(uint64(m.PreRegisteredQueueCount))
	}
	l = m.PreRegisteredEarliestPulse.Size()
	n += 2 + l + sovR0Record(uint64(l))
	if m.PriorityCallQueueCount != 0 {
		n += 2 + sovR0Record(uint64(m.PriorityCallQueueCount))
	}
	l = m.LatestValidatedState.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.LatestValidatedCode.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.LatestDirtyState.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.LatestDirtyCode.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = len(m.ProvidedContent)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	return n
}

func (m *VStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovR0Record(uint64(m.Polymorph))
	}
	l = m.AsOf.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.Callee.Size()
	n += 2 + l + sovR0Record(uint64(l))
	if m.RequestedContent != 0 {
		n += 2 + sovR0Record(uint64(m.RequestedContent))
	}
	l = len(m.RequestedContentLimit)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.SupportedExtensions)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.DelegationSpec)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.DelegatorSignature)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.ProducerSignature)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	if m.CallRequestFlags != 0 {
		n += 2 + sovR0Record(uint64(m.CallRequestFlags))
	}
	return n
}

func (m *VPendingDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovR0Record(uint64(m.Polymorph))
	}
	l = m.Object.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.Request.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = len(m.DelegationSpec)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.DelegatorSignature)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	return n
}

func (m *VDelegatedRequestFinished) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovR0Record(uint64(m.Polymorph))
	}
	if m.CallType != 0 {
		n += 2 + sovR0Record(uint64(m.CallType))
	}
	l = len(m.CallFlags)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = m.Callee.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = len(m.ResultFlags)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = m.CallOutgoing.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = m.CallIncoming.Size()
	n += 2 + l + sovR0Record(uint64(l))
	l = len(m.DelegationSpec)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.DelegatorSignature)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.EntryHeadHash)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	l = len(m.ObjectBody)
	if l > 0 {
		n += 2 + l + sovR0Record(uint64(l))
	}
	return n
}

func sovR0Record(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozR0Record(x uint64) (n int) {
	return sovR0Record(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VCallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VCallRequest{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`CallType:` + fmt.Sprintf("%v", this.CallType) + `,`,
		`CallFlags:` + fmt.Sprintf("%v", this.CallFlags) + `,`,
		`CallAsOf:` + fmt.Sprintf("%v", this.CallAsOf) + `,`,
		`Caller:` + fmt.Sprintf("%v", this.Caller) + `,`,
		`Callee:` + fmt.Sprintf("%v", this.Callee) + `,`,
		`CallSiteDeclaration:` + fmt.Sprintf("%v", this.CallSiteDeclaration) + `,`,
		`CallSiteMethod:` + fmt.Sprintf("%v", this.CallSiteMethod) + `,`,
		`CallSequence:` + fmt.Sprintf("%v", this.CallSequence) + `,`,
		`CallReason:` + fmt.Sprintf("%v", this.CallReason) + `,`,
		`RootTX:` + fmt.Sprintf("%v", this.RootTX) + `,`,
		`CallTX:` + fmt.Sprintf("%v", this.CallTX) + `,`,
		`ExpenseCenter:` + fmt.Sprintf("%v", this.ExpenseCenter) + `,`,
		`ResourceCenter:` + fmt.Sprintf("%v", this.ResourceCenter) + `,`,
		`PayloadHash:` + fmt.Sprintf("%v", this.PayloadHash) + `,`,
		`DelegationSpec:` + fmt.Sprintf("%v", this.DelegationSpec) + `,`,
		`DelegatorSignature:` + fmt.Sprintf("%v", this.DelegatorSignature) + `,`,
		`ProducerSignature:` + fmt.Sprintf("%v", this.ProducerSignature) + `,`,
		`RegistrarSignature:` + fmt.Sprintf("%v", this.RegistrarSignature) + `,`,
		`RegistrarDelegationSpec:` + fmt.Sprintf("%v", this.RegistrarDelegationSpec) + `,`,
		`RegistrarDelegatorSignature:` + fmt.Sprintf("%v", this.RegistrarDelegatorSignature) + `,`,
		`CallRequestFlags:` + fmt.Sprintf("%v", this.CallRequestFlags) + `,`,
		`KnownCalleeIncoming:` + fmt.Sprintf("%v", this.KnownCalleeIncoming) + `,`,
		`EntryHeadHash:` + fmt.Sprintf("%v", this.EntryHeadHash) + `,`,
		`CallOutgoing:` + fmt.Sprintf("%v", this.CallOutgoing) + `,`,
		`TXExpiry:` + fmt.Sprintf("%v", this.TXExpiry) + `,`,
		`SecurityContext:` + fmt.Sprintf("%v", this.SecurityContext) + `,`,
		`TXContext:` + fmt.Sprintf("%v", this.TXContext) + `,`,
		`Arguments:` + fmt.Sprintf("%v", this.Arguments) + `,`,
		`ExtensionHashes:` + fmt.Sprintf("%v", this.ExtensionHashes) + `,`,
		`Extensions:` + fmt.Sprintf("%v", this.Extensions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VCallResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VCallResult{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`CallType:` + fmt.Sprintf("%v", this.CallType) + `,`,
		`CallFlags:` + fmt.Sprintf("%v", this.CallFlags) + `,`,
		`CallAsOf:` + fmt.Sprintf("%v", this.CallAsOf) + `,`,
		`Caller:` + fmt.Sprintf("%v", this.Caller) + `,`,
		`Callee:` + fmt.Sprintf("%v", this.Callee) + `,`,
		`ResultFlags:` + fmt.Sprintf("%v", this.ResultFlags) + `,`,
		`CallOutgoing:` + fmt.Sprintf("%v", this.CallOutgoing) + `,`,
		`CallIncoming:` + fmt.Sprintf("%v", this.CallIncoming) + `,`,
		`PayloadHash:` + fmt.Sprintf("%v", this.PayloadHash) + `,`,
		`DelegationSpec:` + fmt.Sprintf("%v", this.DelegationSpec) + `,`,
		`DelegatorSignature:` + fmt.Sprintf("%v", this.DelegatorSignature) + `,`,
		`CallIncomingResult:` + fmt.Sprintf("%v", this.CallIncomingResult) + `,`,
		`ProducerSignature:` + fmt.Sprintf("%v", this.ProducerSignature) + `,`,
		`RegistrarSignature:` + fmt.Sprintf("%v", this.RegistrarSignature) + `,`,
		`RegistrarDelegationSpec:` + fmt.Sprintf("%v", this.RegistrarDelegationSpec) + `,`,
		`RegistrarDelegatorSignature:` + fmt.Sprintf("%v", this.RegistrarDelegatorSignature) + `,`,
		`EntryHeadHash:` + fmt.Sprintf("%v", this.EntryHeadHash) + `,`,
		`SecurityContext:` + fmt.Sprintf("%v", this.SecurityContext) + `,`,
		`ReturnArguments:` + fmt.Sprintf("%v", this.ReturnArguments) + `,`,
		`ExtensionHashes:` + fmt.Sprintf("%v", this.ExtensionHashes) + `,`,
		`Extensions:` + fmt.Sprintf("%v", this.Extensions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VStateReport) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VStateReport{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`AsOf:` + fmt.Sprintf("%v", this.AsOf) + `,`,
		`Callee:` + fmt.Sprintf("%v", this.Callee) + `,`,
		`ResultFlags:` + fmt.Sprintf("%v", this.ResultFlags) + `,`,
		`DelegationSpec:` + fmt.Sprintf("%v", this.DelegationSpec) + `,`,
		`DelegatorSignature:` + fmt.Sprintf("%v", this.DelegatorSignature) + `,`,
		`ImmutablePendingCount:` + fmt.Sprintf("%v", this.ImmutablePendingCount) + `,`,
		`ImmutablePendingEarliestPulse:` + fmt.Sprintf("%v", this.ImmutablePendingEarliestPulse) + `,`,
		`MutablePendingCount:` + fmt.Sprintf("%v", this.MutablePendingCount) + `,`,
		`MutablePendingEarliestPulse:` + fmt.Sprintf("%v", this.MutablePendingEarliestPulse) + `,`,
		`PreRegisteredQueueCount:` + fmt.Sprintf("%v", this.PreRegisteredQueueCount) + `,`,
		`PreRegisteredEarliestPulse:` + fmt.Sprintf("%v", this.PreRegisteredEarliestPulse) + `,`,
		`PriorityCallQueueCount:` + fmt.Sprintf("%v", this.PriorityCallQueueCount) + `,`,
		`LatestValidatedState:` + fmt.Sprintf("%v", this.LatestValidatedState) + `,`,
		`LatestValidatedCode:` + fmt.Sprintf("%v", this.LatestValidatedCode) + `,`,
		`LatestDirtyState:` + fmt.Sprintf("%v", this.LatestDirtyState) + `,`,
		`LatestDirtyCode:` + fmt.Sprintf("%v", this.LatestDirtyCode) + `,`,
		`ProvidedContent:` + fmt.Sprintf("%v", this.ProvidedContent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VStateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VStateRequest{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`AsOf:` + fmt.Sprintf("%v", this.AsOf) + `,`,
		`Callee:` + fmt.Sprintf("%v", this.Callee) + `,`,
		`RequestedContent:` + fmt.Sprintf("%v", this.RequestedContent) + `,`,
		`RequestedContentLimit:` + fmt.Sprintf("%v", this.RequestedContentLimit) + `,`,
		`SupportedExtensions:` + fmt.Sprintf("%v", this.SupportedExtensions) + `,`,
		`DelegationSpec:` + fmt.Sprintf("%v", this.DelegationSpec) + `,`,
		`DelegatorSignature:` + fmt.Sprintf("%v", this.DelegatorSignature) + `,`,
		`ProducerSignature:` + fmt.Sprintf("%v", this.ProducerSignature) + `,`,
		`CallRequestFlags:` + fmt.Sprintf("%v", this.CallRequestFlags) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VPendingDelegationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VPendingDelegationRequest{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`Object:` + fmt.Sprintf("%v", this.Object) + `,`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`DelegationSpec:` + fmt.Sprintf("%v", this.DelegationSpec) + `,`,
		`DelegatorSignature:` + fmt.Sprintf("%v", this.DelegatorSignature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VDelegatedRequestFinished) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VDelegatedRequestFinished{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`CallType:` + fmt.Sprintf("%v", this.CallType) + `,`,
		`CallFlags:` + fmt.Sprintf("%v", this.CallFlags) + `,`,
		`Callee:` + fmt.Sprintf("%v", this.Callee) + `,`,
		`ResultFlags:` + fmt.Sprintf("%v", this.ResultFlags) + `,`,
		`CallOutgoing:` + fmt.Sprintf("%v", this.CallOutgoing) + `,`,
		`CallIncoming:` + fmt.Sprintf("%v", this.CallIncoming) + `,`,
		`DelegationSpec:` + fmt.Sprintf("%v", this.DelegationSpec) + `,`,
		`DelegatorSignature:` + fmt.Sprintf("%v", this.DelegatorSignature) + `,`,
		`EntryHeadHash:` + fmt.Sprintf("%v", this.EntryHeadHash) + `,`,
		`ObjectBody:` + fmt.Sprintf("%v", this.ObjectBody) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringR0Record(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VCallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowR0Record
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VCallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VCallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallType", wireType)
			}
			m.CallType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallFlags", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallFlags = append(m.CallFlags[:0], dAtA[iNdEx:postIndex]...)
			if m.CallFlags == nil {
				m.CallFlags = []byte{}
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallAsOf", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallAsOf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Caller.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Callee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallSiteDeclaration", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallSiteDeclaration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallSiteMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallSiteMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallSequence", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallSequence = append(m.CallSequence[:0], dAtA[iNdEx:postIndex]...)
			if m.CallSequence == nil {
				m.CallSequence = []byte{}
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallReason", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallReason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootTX", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RootTX.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallTX", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallTX.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpenseCenter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpenseCenter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceCenter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResourceCenter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayloadHash = append(m.PayloadHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PayloadHash == nil {
				m.PayloadHash = []byte{}
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationSpec", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationSpec = append(m.DelegationSpec[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegationSpec == nil {
				m.DelegationSpec = []byte{}
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorSignature = append(m.DelegatorSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegatorSignature == nil {
				m.DelegatorSignature = []byte{}
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProducerSignature = append(m.ProducerSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.ProducerSignature == nil {
				m.ProducerSignature = []byte{}
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrarSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistrarSignature = append(m.RegistrarSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.RegistrarSignature == nil {
				m.RegistrarSignature = []byte{}
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrarDelegationSpec", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistrarDelegationSpec = append(m.RegistrarDelegationSpec[:0], dAtA[iNdEx:postIndex]...)
			if m.RegistrarDelegationSpec == nil {
				m.RegistrarDelegationSpec = []byte{}
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrarDelegatorSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistrarDelegatorSignature = append(m.RegistrarDelegatorSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.RegistrarDelegatorSignature == nil {
				m.RegistrarDelegatorSignature = []byte{}
			}
			iNdEx = postIndex
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallRequestFlags", wireType)
			}
			m.CallRequestFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallRequestFlags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KnownCalleeIncoming", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KnownCalleeIncoming.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryHeadHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryHeadHash = append(m.EntryHeadHash[:0], dAtA[iNdEx:postIndex]...)
			if m.EntryHeadHash == nil {
				m.EntryHeadHash = []byte{}
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallOutgoing", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallOutgoing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TXExpiry", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TXExpiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContext", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityContext = append(m.SecurityContext[:0], dAtA[iNdEx:postIndex]...)
			if m.SecurityContext == nil {
				m.SecurityContext = []byte{}
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TXContext", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TXContext = append(m.TXContext[:0], dAtA[iNdEx:postIndex]...)
			if m.TXContext == nil {
				m.TXContext = []byte{}
			}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments[:0], dAtA[iNdEx:postIndex]...)
			if m.Arguments == nil {
				m.Arguments = []byte{}
			}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtensionHashes = append(m.ExtensionHashes[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtensionHashes == nil {
				m.ExtensionHashes = []byte{}
			}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = append(m.Extensions[:0], dAtA[iNdEx:postIndex]...)
			if m.Extensions == nil {
				m.Extensions = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipR0Record(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthR0Record
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthR0Record
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VCallResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowR0Record
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VCallResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VCallResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallType", wireType)
			}
			m.CallType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallFlags", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallFlags = append(m.CallFlags[:0], dAtA[iNdEx:postIndex]...)
			if m.CallFlags == nil {
				m.CallFlags = []byte{}
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallAsOf", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallAsOf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Caller.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Callee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultFlags", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultFlags = append(m.ResultFlags[:0], dAtA[iNdEx:postIndex]...)
			if m.ResultFlags == nil {
				m.ResultFlags = []byte{}
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallOutgoing", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallOutgoing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallIncoming", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallIncoming.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayloadHash = append(m.PayloadHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PayloadHash == nil {
				m.PayloadHash = []byte{}
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationSpec", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationSpec = append(m.DelegationSpec[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegationSpec == nil {
				m.DelegationSpec = []byte{}
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorSignature = append(m.DelegatorSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegatorSignature == nil {
				m.DelegatorSignature = []byte{}
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallIncomingResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallIncomingResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProducerSignature = append(m.ProducerSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.ProducerSignature == nil {
				m.ProducerSignature = []byte{}
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrarSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistrarSignature = append(m.RegistrarSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.RegistrarSignature == nil {
				m.RegistrarSignature = []byte{}
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrarDelegationSpec", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistrarDelegationSpec = append(m.RegistrarDelegationSpec[:0], dAtA[iNdEx:postIndex]...)
			if m.RegistrarDelegationSpec == nil {
				m.RegistrarDelegationSpec = []byte{}
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrarDelegatorSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistrarDelegatorSignature = append(m.RegistrarDelegatorSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.RegistrarDelegatorSignature == nil {
				m.RegistrarDelegatorSignature = []byte{}
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryHeadHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryHeadHash = append(m.EntryHeadHash[:0], dAtA[iNdEx:postIndex]...)
			if m.EntryHeadHash == nil {
				m.EntryHeadHash = []byte{}
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContext", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityContext = append(m.SecurityContext[:0], dAtA[iNdEx:postIndex]...)
			if m.SecurityContext == nil {
				m.SecurityContext = []byte{}
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnArguments", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnArguments = append(m.ReturnArguments[:0], dAtA[iNdEx:postIndex]...)
			if m.ReturnArguments == nil {
				m.ReturnArguments = []byte{}
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtensionHashes = append(m.ExtensionHashes[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtensionHashes == nil {
				m.ExtensionHashes = []byte{}
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = append(m.Extensions[:0], dAtA[iNdEx:postIndex]...)
			if m.Extensions == nil {
				m.Extensions = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipR0Record(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthR0Record
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthR0Record
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VStateReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowR0Record
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VStateReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VStateReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsOf", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AsOf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Callee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultFlags", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultFlags = append(m.ResultFlags[:0], dAtA[iNdEx:postIndex]...)
			if m.ResultFlags == nil {
				m.ResultFlags = []byte{}
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationSpec", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationSpec = append(m.DelegationSpec[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegationSpec == nil {
				m.DelegationSpec = []byte{}
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorSignature = append(m.DelegatorSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegatorSignature == nil {
				m.DelegatorSignature = []byte{}
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmutablePendingCount", wireType)
			}
			m.ImmutablePendingCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImmutablePendingCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmutablePendingEarliestPulse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ImmutablePendingEarliestPulse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutablePendingCount", wireType)
			}
			m.MutablePendingCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MutablePendingCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutablePendingEarliestPulse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MutablePendingEarliestPulse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreRegisteredQueueCount", wireType)
			}
			m.PreRegisteredQueueCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreRegisteredQueueCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreRegisteredEarliestPulse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreRegisteredEarliestPulse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityCallQueueCount", wireType)
			}
			m.PriorityCallQueueCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriorityCallQueueCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestValidatedState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestValidatedState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestValidatedCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestValidatedCode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestDirtyState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestDirtyState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestDirtyCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestDirtyCode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvidedContent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvidedContent = append(m.ProvidedContent[:0], dAtA[iNdEx:postIndex]...)
			if m.ProvidedContent == nil {
				m.ProvidedContent = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipR0Record(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthR0Record
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthR0Record
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowR0Record
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsOf", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AsOf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Callee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedContent", wireType)
			}
			m.RequestedContent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestedContent |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedContentLimit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestedContentLimit = append(m.RequestedContentLimit[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestedContentLimit == nil {
				m.RequestedContentLimit = []byte{}
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedExtensions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedExtensions = append(m.SupportedExtensions[:0], dAtA[iNdEx:postIndex]...)
			if m.SupportedExtensions == nil {
				m.SupportedExtensions = []byte{}
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationSpec", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationSpec = append(m.DelegationSpec[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegationSpec == nil {
				m.DelegationSpec = []byte{}
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorSignature = append(m.DelegatorSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegatorSignature == nil {
				m.DelegatorSignature = []byte{}
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProducerSignature = append(m.ProducerSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.ProducerSignature == nil {
				m.ProducerSignature = []byte{}
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallRequestFlags", wireType)
			}
			m.CallRequestFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallRequestFlags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipR0Record(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthR0Record
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthR0Record
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPendingDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowR0Record
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPendingDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPendingDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationSpec", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationSpec = append(m.DelegationSpec[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegationSpec == nil {
				m.DelegationSpec = []byte{}
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorSignature = append(m.DelegatorSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegatorSignature == nil {
				m.DelegatorSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipR0Record(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthR0Record
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthR0Record
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VDelegatedRequestFinished) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowR0Record
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VDelegatedRequestFinished: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VDelegatedRequestFinished: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallType", wireType)
			}
			m.CallType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallFlags", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallFlags = append(m.CallFlags[:0], dAtA[iNdEx:postIndex]...)
			if m.CallFlags == nil {
				m.CallFlags = []byte{}
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Callee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultFlags", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultFlags = append(m.ResultFlags[:0], dAtA[iNdEx:postIndex]...)
			if m.ResultFlags == nil {
				m.ResultFlags = []byte{}
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallOutgoing", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallOutgoing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallIncoming", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallIncoming.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationSpec", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationSpec = append(m.DelegationSpec[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegationSpec == nil {
				m.DelegationSpec = []byte{}
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorSignature = append(m.DelegatorSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegatorSignature == nil {
				m.DelegatorSignature = []byte{}
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryHeadHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryHeadHash = append(m.EntryHeadHash[:0], dAtA[iNdEx:postIndex]...)
			if m.EntryHeadHash == nil {
				m.EntryHeadHash = []byte{}
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectBody", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthR0Record
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthR0Record
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectBody = append(m.ObjectBody[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjectBody == nil {
				m.ObjectBody = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipR0Record(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthR0Record
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthR0Record
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipR0Record(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowR0Record
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowR0Record
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthR0Record
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthR0Record
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowR0Record
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipR0Record(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthR0Record
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthR0Record = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowR0Record   = fmt.Errorf("proto: integer overflow")
)
