package smachine

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// BargeInHolderMock implements BargeInHolder
type BargeInHolderMock struct {
	t minimock.Tester

	funcCallWithParam          func(p1 interface{}) (b1 bool)
	inspectFuncCallWithParam   func(p1 interface{})
	afterCallWithParamCounter  uint64
	beforeCallWithParamCounter uint64
	CallWithParamMock          mBargeInHolderMockCallWithParam

	funcIsValid          func() (b1 bool)
	inspectFuncIsValid   func()
	afterIsValidCounter  uint64
	beforeIsValidCounter uint64
	IsValidMock          mBargeInHolderMockIsValid

	funcStepLink          func() (s1 StepLink)
	inspectFuncStepLink   func()
	afterStepLinkCounter  uint64
	beforeStepLinkCounter uint64
	StepLinkMock          mBargeInHolderMockStepLink
}

// NewBargeInHolderMock returns a mock for BargeInHolder
func NewBargeInHolderMock(t minimock.Tester) *BargeInHolderMock {
	m := &BargeInHolderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CallWithParamMock = mBargeInHolderMockCallWithParam{mock: m}
	m.CallWithParamMock.callArgs = []*BargeInHolderMockCallWithParamParams{}

	m.IsValidMock = mBargeInHolderMockIsValid{mock: m}

	m.StepLinkMock = mBargeInHolderMockStepLink{mock: m}

	return m
}

type mBargeInHolderMockCallWithParam struct {
	mock               *BargeInHolderMock
	defaultExpectation *BargeInHolderMockCallWithParamExpectation
	expectations       []*BargeInHolderMockCallWithParamExpectation

	callArgs []*BargeInHolderMockCallWithParamParams
	mutex    sync.RWMutex
}

// BargeInHolderMockCallWithParamExpectation specifies expectation struct of the BargeInHolder.CallWithParam
type BargeInHolderMockCallWithParamExpectation struct {
	mock    *BargeInHolderMock
	params  *BargeInHolderMockCallWithParamParams
	results *BargeInHolderMockCallWithParamResults
	Counter uint64
}

// BargeInHolderMockCallWithParamParams contains parameters of the BargeInHolder.CallWithParam
type BargeInHolderMockCallWithParamParams struct {
	p1 interface{}
}

// BargeInHolderMockCallWithParamResults contains results of the BargeInHolder.CallWithParam
type BargeInHolderMockCallWithParamResults struct {
	b1 bool
}

// Expect sets up expected params for BargeInHolder.CallWithParam
func (mmCallWithParam *mBargeInHolderMockCallWithParam) Expect(p1 interface{}) *mBargeInHolderMockCallWithParam {
	if mmCallWithParam.mock.funcCallWithParam != nil {
		mmCallWithParam.mock.t.Fatalf("BargeInHolderMock.CallWithParam mock is already set by Set")
	}

	if mmCallWithParam.defaultExpectation == nil {
		mmCallWithParam.defaultExpectation = &BargeInHolderMockCallWithParamExpectation{}
	}

	mmCallWithParam.defaultExpectation.params = &BargeInHolderMockCallWithParamParams{p1}
	for _, e := range mmCallWithParam.expectations {
		if minimock.Equal(e.params, mmCallWithParam.defaultExpectation.params) {
			mmCallWithParam.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCallWithParam.defaultExpectation.params)
		}
	}

	return mmCallWithParam
}

// Inspect accepts an inspector function that has same arguments as the BargeInHolder.CallWithParam
func (mmCallWithParam *mBargeInHolderMockCallWithParam) Inspect(f func(p1 interface{})) *mBargeInHolderMockCallWithParam {
	if mmCallWithParam.mock.inspectFuncCallWithParam != nil {
		mmCallWithParam.mock.t.Fatalf("Inspect function is already set for BargeInHolderMock.CallWithParam")
	}

	mmCallWithParam.mock.inspectFuncCallWithParam = f

	return mmCallWithParam
}

// Return sets up results that will be returned by BargeInHolder.CallWithParam
func (mmCallWithParam *mBargeInHolderMockCallWithParam) Return(b1 bool) *BargeInHolderMock {
	if mmCallWithParam.mock.funcCallWithParam != nil {
		mmCallWithParam.mock.t.Fatalf("BargeInHolderMock.CallWithParam mock is already set by Set")
	}

	if mmCallWithParam.defaultExpectation == nil {
		mmCallWithParam.defaultExpectation = &BargeInHolderMockCallWithParamExpectation{mock: mmCallWithParam.mock}
	}
	mmCallWithParam.defaultExpectation.results = &BargeInHolderMockCallWithParamResults{b1}
	return mmCallWithParam.mock
}

//Set uses given function f to mock the BargeInHolder.CallWithParam method
func (mmCallWithParam *mBargeInHolderMockCallWithParam) Set(f func(p1 interface{}) (b1 bool)) *BargeInHolderMock {
	if mmCallWithParam.defaultExpectation != nil {
		mmCallWithParam.mock.t.Fatalf("Default expectation is already set for the BargeInHolder.CallWithParam method")
	}

	if len(mmCallWithParam.expectations) > 0 {
		mmCallWithParam.mock.t.Fatalf("Some expectations are already set for the BargeInHolder.CallWithParam method")
	}

	mmCallWithParam.mock.funcCallWithParam = f
	return mmCallWithParam.mock
}

// When sets expectation for the BargeInHolder.CallWithParam which will trigger the result defined by the following
// Then helper
func (mmCallWithParam *mBargeInHolderMockCallWithParam) When(p1 interface{}) *BargeInHolderMockCallWithParamExpectation {
	if mmCallWithParam.mock.funcCallWithParam != nil {
		mmCallWithParam.mock.t.Fatalf("BargeInHolderMock.CallWithParam mock is already set by Set")
	}

	expectation := &BargeInHolderMockCallWithParamExpectation{
		mock:   mmCallWithParam.mock,
		params: &BargeInHolderMockCallWithParamParams{p1},
	}
	mmCallWithParam.expectations = append(mmCallWithParam.expectations, expectation)
	return expectation
}

// Then sets up BargeInHolder.CallWithParam return parameters for the expectation previously defined by the When method
func (e *BargeInHolderMockCallWithParamExpectation) Then(b1 bool) *BargeInHolderMock {
	e.results = &BargeInHolderMockCallWithParamResults{b1}
	return e.mock
}

// CallWithParam implements BargeInHolder
func (mmCallWithParam *BargeInHolderMock) CallWithParam(p1 interface{}) (b1 bool) {
	mm_atomic.AddUint64(&mmCallWithParam.beforeCallWithParamCounter, 1)
	defer mm_atomic.AddUint64(&mmCallWithParam.afterCallWithParamCounter, 1)

	if mmCallWithParam.inspectFuncCallWithParam != nil {
		mmCallWithParam.inspectFuncCallWithParam(p1)
	}

	mm_params := &BargeInHolderMockCallWithParamParams{p1}

	// Record call args
	mmCallWithParam.CallWithParamMock.mutex.Lock()
	mmCallWithParam.CallWithParamMock.callArgs = append(mmCallWithParam.CallWithParamMock.callArgs, mm_params)
	mmCallWithParam.CallWithParamMock.mutex.Unlock()

	for _, e := range mmCallWithParam.CallWithParamMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1
		}
	}

	if mmCallWithParam.CallWithParamMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCallWithParam.CallWithParamMock.defaultExpectation.Counter, 1)
		mm_want := mmCallWithParam.CallWithParamMock.defaultExpectation.params
		mm_got := BargeInHolderMockCallWithParamParams{p1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCallWithParam.t.Errorf("BargeInHolderMock.CallWithParam got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCallWithParam.CallWithParamMock.defaultExpectation.results
		if mm_results == nil {
			mmCallWithParam.t.Fatal("No results are set for the BargeInHolderMock.CallWithParam")
		}
		return (*mm_results).b1
	}
	if mmCallWithParam.funcCallWithParam != nil {
		return mmCallWithParam.funcCallWithParam(p1)
	}
	mmCallWithParam.t.Fatalf("Unexpected call to BargeInHolderMock.CallWithParam. %v", p1)
	return
}

// CallWithParamAfterCounter returns a count of finished BargeInHolderMock.CallWithParam invocations
func (mmCallWithParam *BargeInHolderMock) CallWithParamAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCallWithParam.afterCallWithParamCounter)
}

// CallWithParamBeforeCounter returns a count of BargeInHolderMock.CallWithParam invocations
func (mmCallWithParam *BargeInHolderMock) CallWithParamBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCallWithParam.beforeCallWithParamCounter)
}

// Calls returns a list of arguments used in each call to BargeInHolderMock.CallWithParam.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCallWithParam *mBargeInHolderMockCallWithParam) Calls() []*BargeInHolderMockCallWithParamParams {
	mmCallWithParam.mutex.RLock()

	argCopy := make([]*BargeInHolderMockCallWithParamParams, len(mmCallWithParam.callArgs))
	copy(argCopy, mmCallWithParam.callArgs)

	mmCallWithParam.mutex.RUnlock()

	return argCopy
}

// MinimockCallWithParamDone returns true if the count of the CallWithParam invocations corresponds
// the number of defined expectations
func (m *BargeInHolderMock) MinimockCallWithParamDone() bool {
	for _, e := range m.CallWithParamMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CallWithParamMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCallWithParamCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCallWithParam != nil && mm_atomic.LoadUint64(&m.afterCallWithParamCounter) < 1 {
		return false
	}
	return true
}

// MinimockCallWithParamInspect logs each unmet expectation
func (m *BargeInHolderMock) MinimockCallWithParamInspect() {
	for _, e := range m.CallWithParamMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to BargeInHolderMock.CallWithParam with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CallWithParamMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCallWithParamCounter) < 1 {
		if m.CallWithParamMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to BargeInHolderMock.CallWithParam")
		} else {
			m.t.Errorf("Expected call to BargeInHolderMock.CallWithParam with params: %#v", *m.CallWithParamMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCallWithParam != nil && mm_atomic.LoadUint64(&m.afterCallWithParamCounter) < 1 {
		m.t.Error("Expected call to BargeInHolderMock.CallWithParam")
	}
}

type mBargeInHolderMockIsValid struct {
	mock               *BargeInHolderMock
	defaultExpectation *BargeInHolderMockIsValidExpectation
	expectations       []*BargeInHolderMockIsValidExpectation
}

// BargeInHolderMockIsValidExpectation specifies expectation struct of the BargeInHolder.IsValid
type BargeInHolderMockIsValidExpectation struct {
	mock *BargeInHolderMock

	results *BargeInHolderMockIsValidResults
	Counter uint64
}

// BargeInHolderMockIsValidResults contains results of the BargeInHolder.IsValid
type BargeInHolderMockIsValidResults struct {
	b1 bool
}

// Expect sets up expected params for BargeInHolder.IsValid
func (mmIsValid *mBargeInHolderMockIsValid) Expect() *mBargeInHolderMockIsValid {
	if mmIsValid.mock.funcIsValid != nil {
		mmIsValid.mock.t.Fatalf("BargeInHolderMock.IsValid mock is already set by Set")
	}

	if mmIsValid.defaultExpectation == nil {
		mmIsValid.defaultExpectation = &BargeInHolderMockIsValidExpectation{}
	}

	return mmIsValid
}

// Inspect accepts an inspector function that has same arguments as the BargeInHolder.IsValid
func (mmIsValid *mBargeInHolderMockIsValid) Inspect(f func()) *mBargeInHolderMockIsValid {
	if mmIsValid.mock.inspectFuncIsValid != nil {
		mmIsValid.mock.t.Fatalf("Inspect function is already set for BargeInHolderMock.IsValid")
	}

	mmIsValid.mock.inspectFuncIsValid = f

	return mmIsValid
}

// Return sets up results that will be returned by BargeInHolder.IsValid
func (mmIsValid *mBargeInHolderMockIsValid) Return(b1 bool) *BargeInHolderMock {
	if mmIsValid.mock.funcIsValid != nil {
		mmIsValid.mock.t.Fatalf("BargeInHolderMock.IsValid mock is already set by Set")
	}

	if mmIsValid.defaultExpectation == nil {
		mmIsValid.defaultExpectation = &BargeInHolderMockIsValidExpectation{mock: mmIsValid.mock}
	}
	mmIsValid.defaultExpectation.results = &BargeInHolderMockIsValidResults{b1}
	return mmIsValid.mock
}

//Set uses given function f to mock the BargeInHolder.IsValid method
func (mmIsValid *mBargeInHolderMockIsValid) Set(f func() (b1 bool)) *BargeInHolderMock {
	if mmIsValid.defaultExpectation != nil {
		mmIsValid.mock.t.Fatalf("Default expectation is already set for the BargeInHolder.IsValid method")
	}

	if len(mmIsValid.expectations) > 0 {
		mmIsValid.mock.t.Fatalf("Some expectations are already set for the BargeInHolder.IsValid method")
	}

	mmIsValid.mock.funcIsValid = f
	return mmIsValid.mock
}

// IsValid implements BargeInHolder
func (mmIsValid *BargeInHolderMock) IsValid() (b1 bool) {
	mm_atomic.AddUint64(&mmIsValid.beforeIsValidCounter, 1)
	defer mm_atomic.AddUint64(&mmIsValid.afterIsValidCounter, 1)

	if mmIsValid.inspectFuncIsValid != nil {
		mmIsValid.inspectFuncIsValid()
	}

	if mmIsValid.IsValidMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIsValid.IsValidMock.defaultExpectation.Counter, 1)

		mm_results := mmIsValid.IsValidMock.defaultExpectation.results
		if mm_results == nil {
			mmIsValid.t.Fatal("No results are set for the BargeInHolderMock.IsValid")
		}
		return (*mm_results).b1
	}
	if mmIsValid.funcIsValid != nil {
		return mmIsValid.funcIsValid()
	}
	mmIsValid.t.Fatalf("Unexpected call to BargeInHolderMock.IsValid.")
	return
}

// IsValidAfterCounter returns a count of finished BargeInHolderMock.IsValid invocations
func (mmIsValid *BargeInHolderMock) IsValidAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsValid.afterIsValidCounter)
}

// IsValidBeforeCounter returns a count of BargeInHolderMock.IsValid invocations
func (mmIsValid *BargeInHolderMock) IsValidBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsValid.beforeIsValidCounter)
}

// MinimockIsValidDone returns true if the count of the IsValid invocations corresponds
// the number of defined expectations
func (m *BargeInHolderMock) MinimockIsValidDone() bool {
	for _, e := range m.IsValidMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsValidMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsValidCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsValid != nil && mm_atomic.LoadUint64(&m.afterIsValidCounter) < 1 {
		return false
	}
	return true
}

// MinimockIsValidInspect logs each unmet expectation
func (m *BargeInHolderMock) MinimockIsValidInspect() {
	for _, e := range m.IsValidMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to BargeInHolderMock.IsValid")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsValidMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsValidCounter) < 1 {
		m.t.Error("Expected call to BargeInHolderMock.IsValid")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsValid != nil && mm_atomic.LoadUint64(&m.afterIsValidCounter) < 1 {
		m.t.Error("Expected call to BargeInHolderMock.IsValid")
	}
}

type mBargeInHolderMockStepLink struct {
	mock               *BargeInHolderMock
	defaultExpectation *BargeInHolderMockStepLinkExpectation
	expectations       []*BargeInHolderMockStepLinkExpectation
}

// BargeInHolderMockStepLinkExpectation specifies expectation struct of the BargeInHolder.StepLink
type BargeInHolderMockStepLinkExpectation struct {
	mock *BargeInHolderMock

	results *BargeInHolderMockStepLinkResults
	Counter uint64
}

// BargeInHolderMockStepLinkResults contains results of the BargeInHolder.StepLink
type BargeInHolderMockStepLinkResults struct {
	s1 StepLink
}

// Expect sets up expected params for BargeInHolder.StepLink
func (mmStepLink *mBargeInHolderMockStepLink) Expect() *mBargeInHolderMockStepLink {
	if mmStepLink.mock.funcStepLink != nil {
		mmStepLink.mock.t.Fatalf("BargeInHolderMock.StepLink mock is already set by Set")
	}

	if mmStepLink.defaultExpectation == nil {
		mmStepLink.defaultExpectation = &BargeInHolderMockStepLinkExpectation{}
	}

	return mmStepLink
}

// Inspect accepts an inspector function that has same arguments as the BargeInHolder.StepLink
func (mmStepLink *mBargeInHolderMockStepLink) Inspect(f func()) *mBargeInHolderMockStepLink {
	if mmStepLink.mock.inspectFuncStepLink != nil {
		mmStepLink.mock.t.Fatalf("Inspect function is already set for BargeInHolderMock.StepLink")
	}

	mmStepLink.mock.inspectFuncStepLink = f

	return mmStepLink
}

// Return sets up results that will be returned by BargeInHolder.StepLink
func (mmStepLink *mBargeInHolderMockStepLink) Return(s1 StepLink) *BargeInHolderMock {
	if mmStepLink.mock.funcStepLink != nil {
		mmStepLink.mock.t.Fatalf("BargeInHolderMock.StepLink mock is already set by Set")
	}

	if mmStepLink.defaultExpectation == nil {
		mmStepLink.defaultExpectation = &BargeInHolderMockStepLinkExpectation{mock: mmStepLink.mock}
	}
	mmStepLink.defaultExpectation.results = &BargeInHolderMockStepLinkResults{s1}
	return mmStepLink.mock
}

//Set uses given function f to mock the BargeInHolder.StepLink method
func (mmStepLink *mBargeInHolderMockStepLink) Set(f func() (s1 StepLink)) *BargeInHolderMock {
	if mmStepLink.defaultExpectation != nil {
		mmStepLink.mock.t.Fatalf("Default expectation is already set for the BargeInHolder.StepLink method")
	}

	if len(mmStepLink.expectations) > 0 {
		mmStepLink.mock.t.Fatalf("Some expectations are already set for the BargeInHolder.StepLink method")
	}

	mmStepLink.mock.funcStepLink = f
	return mmStepLink.mock
}

// StepLink implements BargeInHolder
func (mmStepLink *BargeInHolderMock) StepLink() (s1 StepLink) {
	mm_atomic.AddUint64(&mmStepLink.beforeStepLinkCounter, 1)
	defer mm_atomic.AddUint64(&mmStepLink.afterStepLinkCounter, 1)

	if mmStepLink.inspectFuncStepLink != nil {
		mmStepLink.inspectFuncStepLink()
	}

	if mmStepLink.StepLinkMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStepLink.StepLinkMock.defaultExpectation.Counter, 1)

		mm_results := mmStepLink.StepLinkMock.defaultExpectation.results
		if mm_results == nil {
			mmStepLink.t.Fatal("No results are set for the BargeInHolderMock.StepLink")
		}
		return (*mm_results).s1
	}
	if mmStepLink.funcStepLink != nil {
		return mmStepLink.funcStepLink()
	}
	mmStepLink.t.Fatalf("Unexpected call to BargeInHolderMock.StepLink.")
	return
}

// StepLinkAfterCounter returns a count of finished BargeInHolderMock.StepLink invocations
func (mmStepLink *BargeInHolderMock) StepLinkAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStepLink.afterStepLinkCounter)
}

// StepLinkBeforeCounter returns a count of BargeInHolderMock.StepLink invocations
func (mmStepLink *BargeInHolderMock) StepLinkBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStepLink.beforeStepLinkCounter)
}

// MinimockStepLinkDone returns true if the count of the StepLink invocations corresponds
// the number of defined expectations
func (m *BargeInHolderMock) MinimockStepLinkDone() bool {
	for _, e := range m.StepLinkMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StepLinkMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStepLinkCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStepLink != nil && mm_atomic.LoadUint64(&m.afterStepLinkCounter) < 1 {
		return false
	}
	return true
}

// MinimockStepLinkInspect logs each unmet expectation
func (m *BargeInHolderMock) MinimockStepLinkInspect() {
	for _, e := range m.StepLinkMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to BargeInHolderMock.StepLink")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StepLinkMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStepLinkCounter) < 1 {
		m.t.Error("Expected call to BargeInHolderMock.StepLink")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStepLink != nil && mm_atomic.LoadUint64(&m.afterStepLinkCounter) < 1 {
		m.t.Error("Expected call to BargeInHolderMock.StepLink")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *BargeInHolderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCallWithParamInspect()

		m.MinimockIsValidInspect()

		m.MinimockStepLinkInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *BargeInHolderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *BargeInHolderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCallWithParamDone() &&
		m.MinimockIsValidDone() &&
		m.MinimockStepLinkDone()
}
