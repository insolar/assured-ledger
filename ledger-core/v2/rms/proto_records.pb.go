// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto_records.proto

package rms

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	insproto "github.com/insolar/assured-ledger/ledger-core/v2/insproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RecordExample struct {
	Polymorph     uint32            `protobuf:"varint,16,opt,name=Polymorph,proto3" json:"Polymorph"`
	BodyHash      RecordBody        `protobuf:"bytes,1790,opt,name=BodyHash,proto3" json:"BodyHash"`
	ExtensionHash []RecordExtension `protobuf:"bytes,1791,rep,name=ExtensionHash,proto3" json:"ExtensionHash"`
	// Add custom fields here
	Str      ByteString        `protobuf:"bytes,21,opt,name=Str,proto3,customtype=ByteString" json:"Str"`
	Ref1     Reference         `protobuf:"bytes,22,opt,name=Ref1,proto3" json:"Ref1"`
	FieldMap insproto.FieldMap `protobuf:"bytes,19999,opt,name=FieldMap,proto3" json:"FieldMap"`
}

func (m *RecordExample) Reset()         { *m = RecordExample{} }
func (m *RecordExample) String() string { return proto.CompactTextString(m) }
func (*RecordExample) ProtoMessage()    {}
func (*RecordExample) Descriptor() ([]byte, []int) {
	return fileDescriptor_f41a5838de60d5c2, []int{0}
}
func (m *RecordExample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordExample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RecordExample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordExample.Merge(m, src)
}
func (m *RecordExample) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RecordExample) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordExample.DiscardUnknown(m)
}

var xxx_messageInfo_RecordExample proto.InternalMessageInfo

func (m *RecordExample) GetPolymorph() uint32 {
	if m != nil {
		return m.Polymorph
	}
	return 0
}

func (m *RecordExample) GetBodyHash() RecordBody {
	if m != nil {
		return m.BodyHash
	}
	return RecordBody{}
}

func (m *RecordExample) GetExtensionHash() []RecordExtension {
	if m != nil {
		return m.ExtensionHash
	}
	return nil
}

func (m *RecordExample) GetRef1() Reference {
	if m != nil {
		return m.Ref1
	}
	return Reference{}
}

func (m *RecordExample) GetFieldMap() insproto.FieldMap {
	if m != nil {
		return m.FieldMap
	}
	return insproto.FieldMap{}
}

func init() {
	proto.RegisterType((*RecordExample)(nil), "rms.RecordExample")
}

func init() { proto.RegisterFile("proto_records.proto", fileDescriptor_f41a5838de60d5c2) }

var fileDescriptor_f41a5838de60d5c2 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x7d, 0x4d, 0xa8, 0x9c, 0xab, 0x5c, 0xcc, 0x51, 0x2a, 0x2b, 0xc3, 0xd9, 0xea, 0xe4,
	0x81, 0xd8, 0x22, 0x6c, 0x6c, 0xb8, 0x2a, 0x42, 0x91, 0x90, 0x90, 0xcb, 0x8a, 0x90, 0x13, 0xbf,
	0x71, 0x2c, 0xd9, 0x3e, 0xeb, 0x7c, 0x41, 0xc9, 0xe6, 0x8f, 0xc0, 0x86, 0x1a, 0x21, 0xd1, 0x99,
	0x91, 0x4f, 0xc0, 0x46, 0xc4, 0xd4, 0x31, 0x62, 0xa8, 0x20, 0x5e, 0xf8, 0x0c, 0x0c, 0x80, 0x7c,
	0x76, 0x4b, 0x3b, 0xdd, 0xfb, 0xe7, 0xf7, 0x3c, 0xef, 0x7b, 0x77, 0xf8, 0x7e, 0xce, 0x99, 0x60,
	0x6f, 0x38, 0x4c, 0x18, 0x0f, 0x0b, 0x47, 0x66, 0xa4, 0xc3, 0xd3, 0xa2, 0x3f, 0x88, 0x62, 0x31,
	0x9b, 0x8f, 0x9d, 0x09, 0x4b, 0xdd, 0x88, 0x45, 0xcc, 0x95, 0xbd, 0xf1, 0x7c, 0x2a, 0x33, 0x99,
	0xc8, 0xa8, 0xd1, 0xf4, 0x8f, 0x6f, 0xe0, 0x71, 0x56, 0xb0, 0x24, 0xe0, 0x6e, 0x50, 0x14, 0x73,
	0x0e, 0xe1, 0x20, 0x81, 0x30, 0x02, 0xee, 0x36, 0xc7, 0x60, 0xc2, 0x38, 0xb8, 0x6f, 0x87, 0x35,
	0xd5, 0xb8, 0xc4, 0x59, 0x3b, 0xb8, 0xdf, 0xe3, 0x69, 0x1b, 0x1e, 0x7d, 0xdb, 0xc1, 0x9a, 0x2f,
	0xb7, 0x3a, 0x59, 0x04, 0x69, 0x9e, 0x00, 0x39, 0xc2, 0xbd, 0x97, 0x2c, 0x59, 0xa6, 0x8c, 0xe7,
	0x33, 0x43, 0xb7, 0x90, 0xad, 0x79, 0xdd, 0xf5, 0xa5, 0xa9, 0xf8, 0xff, 0xcb, 0x64, 0x88, 0x55,
	0x8f, 0x85, 0xcb, 0xe7, 0x41, 0x31, 0x33, 0xfe, 0x68, 0x16, 0xb2, 0xf7, 0x86, 0x77, 0x9d, 0xda,
	0xb4, 0xb1, 0xaa, 0x7b, 0xad, 0xe8, 0x9a, 0x23, 0x4f, 0xb1, 0x76, 0xb2, 0x10, 0x90, 0x15, 0x31,
	0xcb, 0xa4, 0xf0, 0xaf, 0x66, 0x75, 0xec, 0xbd, 0xe1, 0xc1, 0x0d, 0xe1, 0x35, 0xd0, 0xaa, 0x6f,
	0x2b, 0x88, 0x8d, 0x3b, 0xa7, 0x82, 0x1b, 0x0f, 0x2c, 0x64, 0xf7, 0xbc, 0xc3, 0x9a, 0xf8, 0x7e,
	0x69, 0x62, 0x6f, 0x29, 0xe0, 0x54, 0xf0, 0x38, 0x8b, 0xca, 0xf7, 0x16, 0xf2, 0x6b, 0x84, 0xd8,
	0xb8, 0xeb, 0xc3, 0xf4, 0x91, 0x71, 0x28, 0x77, 0xdb, 0x6f, 0x47, 0x4c, 0x81, 0x43, 0x36, 0x81,
	0xd6, 0x5c, 0x12, 0xe4, 0x21, 0x56, 0x9f, 0xc5, 0x90, 0x84, 0x2f, 0x82, 0xdc, 0xf8, 0xf8, 0x01,
	0x49, 0x9e, 0x38, 0x57, 0x8f, 0xe6, 0x5c, 0xf5, 0x1a, 0xcd, 0x93, 0x3b, 0x5f, 0x36, 0xe6, 0x57,
	0x34, 0xea, 0xaa, 0x48, 0xd7, 0x47, 0x5d, 0xf5, 0x9e, 0x7e, 0x30, 0xea, 0xa9, 0xe5, 0xbe, 0x5e,
	0x96, 0x65, 0xb9, 0xe3, 0xbd, 0x5e, 0xff, 0xa4, 0x68, 0xbd, 0xa5, 0xe8, 0x62, 0x4b, 0xd1, 0x66,
	0x4b, 0xd1, 0x8f, 0x2d, 0x55, 0xde, 0x55, 0x54, 0x39, 0xaf, 0x28, 0xba, 0xa8, 0xa8, 0xb2, 0xa9,
	0xa8, 0xf2, 0xeb, 0xcc, 0x44, 0xbf, 0xcf, 0xcc, 0xdd, 0xe6, 0xc6, 0xe7, 0x2b, 0x13, 0x7d, 0x5a,
	0x99, 0xc4, 0x87, 0x28, 0x2e, 0x04, 0xf0, 0xa6, 0xfa, 0x6a, 0x99, 0xc3, 0xe7, 0x95, 0xd9, 0xfe,
	0xcc, 0x31, 0xcb, 0x04, 0x2c, 0xc4, 0x78, 0x57, 0xae, 0xf4, 0xf8, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x63, 0x13, 0x5a, 0x67, 0x4d, 0x02, 0x00, 0x00,
}

func (m *RecordExample) SetupContext(ctx RecordContext) error {
	return ctx.Record(m)
}

func (*RecordExample) GetDefaultPolymorphID() uint64 {
	return 199
}

func (m *RecordExample) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordExample) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordExample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if len(m.ExtensionHash) > 0 {
		for iNdEx := len(m.ExtensionHash) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtensionHash[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtoRecords(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6f
			i--
			dAtA[i] = 0xfa
		}
	}
	{
		size, err := m.BodyHash.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoRecords(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x6f
			i--
			dAtA[i] = 0xf2
		}
	}
	{
		size, err := m.Ref1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoRecords(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.Str) > 0 {
		i -= len(m.Str)
		copy(dAtA[i:], m.Str)
		i = encodeVarintProtoRecords(dAtA, i, uint64(len(m.Str)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	{
		id := uint64(m.Polymorph)
		if id == 0 {
			id = 199
		}
		i = encodeVarintProtoRecords(dAtA, i, uint64(id))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	m.FieldMap.PutMessage(dAtA[i:])
	return len(dAtA) - i, nil
}

func encodeVarintProtoRecords(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtoRecords(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func init() {
	RegisterRecordType((*RecordExample)(nil))
}

func (m *RecordExample) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		id := uint64(m.Polymorph)
		if id == 0 {
			id = 199
		}
		n += 2 + sovProtoRecords(id)
	}
	l = len(m.Str)
	if l > 0 {
		n += 2 + l + sovProtoRecords(uint64(l))
	}
	if l = m.Ref1.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoRecords(uint64(l))
	}
	if l = m.BodyHash.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoRecords(uint64(l))
	}
	if len(m.ExtensionHash) > 0 {
		for _, e := range m.ExtensionHash {
			l = e.ProtoSize()
			n += 2 + l + sovProtoRecords(uint64(l))
		}
	}
	return n
}

func sovProtoRecords(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtoRecords(x uint64) (n int) {
	return sovProtoRecords(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RecordExample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoRecords
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordExample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordExample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = ByteString(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoRecords
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ref1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1790:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoRecords
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BodyHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1791:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoRecords
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtensionHash = append(m.ExtensionHash, RecordExtension{})
			if err := m.ExtensionHash[len(m.ExtensionHash)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19999:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoRecords
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtoRecords(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtoRecords
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoRecords
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtoRecords(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtoRecords
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoRecords
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoRecords
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtoRecords
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtoRecords
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtoRecords
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtoRecords        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtoRecords          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtoRecords = fmt.Errorf("proto: unexpected end of group")
)
