// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto_records.proto

package rms

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_insolar_assured_ledger_ledger_core_v2_insproto "github.com/insolar/assured-ledger/ledger-core/v2/insproto"
	insproto "github.com/insolar/assured-ledger/ledger-core/v2/insproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RecordExample struct {
	Polymorph  uint32 `protobuf:"varint,16,opt,name=Polymorph,proto3" json:"Polymorph"`
	RecordBody `protobuf:"bytes,17,opt,name=RecordBody,proto3,embedded=RecordBody" json:"RecordBody"`
	// Add custom fields here
	Str      Binary             `protobuf:"bytes,21,opt,name=Str,proto3" json:"Str"`
	Ref1     Reference          `protobuf:"bytes,22,opt,name=Ref1,proto3" json:"Ref1"`
	FieldMap *insproto.FieldMap `protobuf:"bytes,19999,opt,name=FieldMap,proto3" json:"FieldMap,omitempty"`
}

func (m *RecordExample) Reset()         { *m = RecordExample{} }
func (m *RecordExample) String() string { return proto.CompactTextString(m) }
func (*RecordExample) ProtoMessage()    {}
func (*RecordExample) Descriptor() ([]byte, []int) {
	return fileDescriptor_f41a5838de60d5c2, []int{0}
}
func (m *RecordExample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordExample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RecordExample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordExample.Merge(m, src)
}
func (m *RecordExample) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RecordExample) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordExample.DiscardUnknown(m)
}

var xxx_messageInfo_RecordExample proto.InternalMessageInfo

func (m *RecordExample) GetPolymorph() uint32 {
	if m != nil {
		return m.Polymorph
	}
	return 0
}

func (m *RecordExample) GetStr() Binary {
	if m != nil {
		return m.Str
	}
	return Binary{}
}

func (m *RecordExample) GetRef1() Reference {
	if m != nil {
		return m.Ref1
	}
	return Reference{}
}

func (m *RecordExample) GetFieldMap() *insproto.FieldMap {
	if m != nil {
		return m.FieldMap
	}
	return nil
}

func init() {
	proto.RegisterType((*RecordExample)(nil), "rms.RecordExample")
}

func init() { proto.RegisterFile("proto_records.proto", fileDescriptor_f41a5838de60d5c2) }

var fileDescriptor_f41a5838de60d5c2 = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0x8d, 0x55, 0x39, 0x57, 0x5a, 0xcc, 0x51, 0x90, 0x95, 0xe1, 0x2e, 0x2a, 0x4b,
	0x07, 0x62, 0x8b, 0xb2, 0x00, 0xa3, 0x2b, 0x18, 0x22, 0x21, 0x21, 0xc3, 0x8e, 0x1c, 0xfb, 0xc5,
	0xb5, 0x64, 0xfb, 0xac, 0xb3, 0x83, 0xea, 0xcd, 0x1f, 0x01, 0x09, 0x09, 0xa9, 0x51, 0x25, 0x3a,
	0x22, 0x46, 0x3e, 0x01, 0x63, 0xc6, 0x8c, 0x19, 0x50, 0x05, 0xf6, 0x82, 0xc4, 0x37, 0xe8, 0x02,
	0xf2, 0xd9, 0x69, 0x32, 0xdd, 0x7b, 0xff, 0xf7, 0xff, 0xbd, 0xf7, 0xee, 0xe1, 0xfb, 0xa9, 0xe0,
	0x39, 0x7f, 0x2f, 0xc0, 0xe3, 0xc2, 0xcf, 0x4c, 0x99, 0x91, 0x9e, 0x88, 0xb3, 0xc1, 0x28, 0x08,
	0xf3, 0xb3, 0xd9, 0xc4, 0xf4, 0x78, 0x6c, 0x05, 0x3c, 0xe0, 0x96, 0xac, 0x4d, 0x66, 0x53, 0x99,
	0xc9, 0x44, 0x46, 0x2d, 0x33, 0x38, 0xdd, 0xb2, 0x87, 0x49, 0xc6, 0x23, 0x57, 0x58, 0x6e, 0x96,
	0xcd, 0x04, 0xf8, 0xa3, 0x08, 0xfc, 0x00, 0x84, 0xd5, 0x3e, 0x23, 0x8f, 0x0b, 0xb0, 0x3e, 0x9c,
	0x34, 0xae, 0xb6, 0x4b, 0x98, 0x74, 0x83, 0x07, 0x7d, 0x11, 0x77, 0xe1, 0xd1, 0xe5, 0x0e, 0xde,
	0x77, 0xe4, 0x56, 0x2f, 0xcf, 0xdd, 0x38, 0x8d, 0x80, 0x1c, 0xe1, 0xfe, 0x1b, 0x1e, 0x15, 0x31,
	0x17, 0xe9, 0x99, 0xa1, 0x0f, 0xd1, 0xf1, 0xbe, 0xad, 0x2e, 0xae, 0x99, 0xe2, 0x6c, 0x64, 0xf2,
	0x1c, 0xe3, 0x16, 0xb2, 0xb9, 0x5f, 0x18, 0xf7, 0x86, 0xe8, 0x78, 0xef, 0xe4, 0xae, 0xd9, 0x74,
	0xdd, 0xc8, 0xb6, 0xd6, 0x50, 0xcb, 0x6b, 0x86, 0x9c, 0x2d, 0x33, 0x79, 0x84, 0x7b, 0x6f, 0x73,
	0x61, 0x3c, 0x90, 0xcc, 0x9e, 0x64, 0xec, 0x30, 0x71, 0x45, 0xd1, 0x4d, 0x69, 0xaa, 0xe4, 0x19,
	0x56, 0x1d, 0x98, 0x3e, 0x31, 0x1e, 0x4a, 0xd7, 0x41, 0xd7, 0x79, 0x0a, 0x02, 0x12, 0x0f, 0xec,
	0xc3, 0xc6, 0x78, 0xf3, 0x79, 0x78, 0xc7, 0x01, 0xef, 0x56, 0x75, 0x24, 0x41, 0x1e, 0x63, 0xed,
	0x55, 0x08, 0x91, 0xff, 0xda, 0x4d, 0x8d, 0x2f, 0x97, 0x48, 0xf2, 0xc4, 0x5c, 0xdf, 0xc0, 0x5c,
	0xd7, 0xe4, 0x30, 0xf4, 0x42, 0xfb, 0xb1, 0x62, 0xff, 0x3e, 0xfd, 0xfd, 0xd9, 0x1b, 0xab, 0x1a,
	0xd2, 0xf5, 0xb1, 0xaa, 0x11, 0xfd, 0x70, 0xdc, 0xd7, 0xca, 0x03, 0xbd, 0x2c, 0xcb, 0x72, 0xc7,
	0x76, 0x17, 0xbf, 0x29, 0xfa, 0x5a, 0x51, 0xb4, 0xa8, 0x28, 0x5a, 0x56, 0x14, 0xad, 0x2a, 0x8a,
	0x7e, 0x55, 0x54, 0xf9, 0x58, 0x53, 0xe5, 0xaa, 0xa6, 0x68, 0x59, 0x53, 0x65, 0x55, 0x53, 0xe5,
	0xcf, 0x05, 0x43, 0x37, 0x17, 0x6c, 0xb7, 0xfd, 0xe9, 0xd5, 0x9c, 0xa1, 0x6f, 0x73, 0x46, 0x1c,
	0x08, 0xc2, 0x2c, 0x07, 0xd1, 0xaa, 0xef, 0x8a, 0x14, 0xbe, 0xcf, 0x59, 0x77, 0xef, 0x53, 0x9e,
	0xe4, 0x70, 0x9e, 0x4f, 0x76, 0xe5, 0x66, 0x4f, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xe9,
	0x79, 0x5e, 0x23, 0x02, 0x00, 0x00,
}

func (this *RecordExample) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordExample)
	if !ok {
		that2, ok := that.(RecordExample)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.RecordBody.Equal(&that1.RecordBody) {
		return false
	}
	if !this.Str.Equal(&that1.Str) {
		return false
	}
	if !this.Ref1.Equal(&that1.Ref1) {
		return false
	}
	if !this.FieldMap.Equal(that1.FieldMap) {
		return false
	}
	return true
}
func (m *RecordExample) SetupContext(ctx RecordContext) error {
	if err := ctx.RecReference(m, 22, &m.Ref1); err != nil {
		return err
	}
	return ctx.Record(m, 999999999)
}

func (*RecordExample) GetDefaultPolymorphID() uint64 {
	return 999999999
}

func (m *RecordExample) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordExample) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordExample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	m.FieldMap.UnsetMap()
	{
		size, err := m.Ref1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoRecords(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	{
		size, err := m.Str.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoRecords(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	{
		size, err := m.RecordBody.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProtoRecords(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		id := uint64(m.Polymorph)
		if id == 0 {
			id = 999999999
		}
		i = encodeVarintProtoRecords(dAtA, i, uint64(id))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	m.FieldMap.PutMessage(dAtA[i:])
	return len(dAtA) - i, nil
}

func (m *RecordExample) InitFieldMap(reset bool) *github_com_insolar_assured_ledger_ledger_core_v2_insproto.FieldMap {
	if reset || m.FieldMap == nil {
		m.FieldMap = &github_com_insolar_assured_ledger_ledger_core_v2_insproto.FieldMap{}
	}
	return m.FieldMap
}

func encodeVarintProtoRecords(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtoRecords(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func init() {
	RegisterRecordType(999999999, "", (*RecordExample)(nil))
}

func (m *RecordExample) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		id := uint64(m.Polymorph)
		if id == 0 {
			id = 999999999
		}
		n += 2 + sovProtoRecords(id)
	}
	l = m.RecordBody.ProtoSize()
	n += 2 + l + sovProtoRecords(uint64(l))
	if l = m.Str.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoRecords(uint64(l))
	}
	if l = m.Ref1.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoRecords(uint64(l))
	}
	return n
}

func sovProtoRecords(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtoRecords(x uint64) (n int) {
	return sovProtoRecords(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RecordExample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoRecords
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordExample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordExample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoRecords
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecordBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoRecords
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Str.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoRecords
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ref1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19999:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoRecords
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldMap == nil {
				m.FieldMap = &insproto.FieldMap{}
			}
			if err := m.FieldMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtoRecords(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtoRecords
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoRecords
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtoRecords(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtoRecords
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoRecords
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoRecords
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtoRecords
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtoRecords
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtoRecords
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtoRecords        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtoRecords          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtoRecords = fmt.Errorf("proto: unexpected end of group")
)
