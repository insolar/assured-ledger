---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: insolar-bootstrap
  namespace: insolar

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: insolar-bootstrap
rules:
  - apiGroups: [""]
    resources:
      - configmaps
      - secrets
    verbs: ["*"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: insolar-bootstrap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: insolar-bootstrap
subjects:
  - kind: ServiceAccount
    name: insolar-bootstrap
    namespace: insolar

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bootstrap-yaml
  namespace: insolar
data:
  bootstrap.yaml: |-
    members_keys_dir: "/var/data/bootstrap/configs/"
    discovery_keys_dir: "/var/data/bootstrap/discovery-keys/"
    certificates_out_dir: "/var/data/bootstrap/certs/"
    certificate_name_offset_from_zero: True
    keys_name_format: "node-%d.json"
    reuse_keys: false
    heavy_genesis_config_file: "/var/data/bootstrap/heavy_genesis.json"
    root_balance: "5000000000000000000"
    md_balance: "5000000000000000000"
    lockup_pulse_period: 20
    pk_shard_count: 10000
    ma_shard_count: 1000
    vesting_pulse_period: 10
    vesting_pulse_step: 10
    majority_rule: 5
    min_roles:
      heavy_material: 1
      virtual:  2
      light_material: 2
    discovery_nodes:
    discovery_nodes:
      -
        host: "heavy-0.platform-network.insolar:13831"
        role: "heavy_material"
        cert_name: "heavy-0.json"
      -
        host: "virtual-0.platform-network.insolar:13831"
        role: "virtual"
        cert_name: "virtual-0.json"
      -
        host: "virtual-1.platform-network.insolar:13831"
        role: "virtual"
        cert_name: "virtual-1.json"
      -
        host: "light-0.platform-network.insolar:13831"
        role: "light_material"
        cert_name: "light-0.json"
      -
        host: "light-1.platform-network.insolar:13831"
        role: "light_material"
        cert_name: "light-1.json"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-bootstrap
  namespace: insolar
data:
  run.sh: |-
    #!/bin/bash -e
    # BE CAREFUL, THIS FILE DIFFERS FROM PL 1.X
    apt-get update -qq
    apt-get install curl -y -qq
    curl -L https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl -o /usr/bin/kubectl
    chmod +x /usr/bin/kubectl
    if (kubectl get secret node-keys -o yaml | grep -q 'pulsar-0.json'); then echo "Bootstrap data already present, exiting"; exit; fi
    kubectl -n insolar create secret generic node-certs
    kubectl -n insolar create secret generic node-keys
    INSOLAR_BIN=${INSOLAR_BIN:-"insolar"}
    BOOTSTRAP_CONFIG=${BOOTSTRAP_CONFIG:-"/etc/bootstrap/bootstrap.yaml"}
    CONFIGS_DIR=${CONFIGS_DIR:-"/var/data/bootstrap/configs/"}
    PULSAR_KEYS=/var/data/bootstrap/discovery-keys/pulsar-0.json
    generate_pulsar_keys() {
        echo "generate pulsar keys: ${PULSAR_KEYS}"
        ${INSOLAR_BIN} gen-key-pair > ${PULSAR_KEYS}
    }
    generate_root_member_keys() {
        echo "generate members keys in dir: $CONFIGS_DIR"
        ${INSOLAR_BIN} gen-key-pair > ${CONFIGS_DIR}root_member_keys.json
        ${INSOLAR_BIN} gen-key-pair > ${CONFIGS_DIR}fee_member_keys.json
        ${INSOLAR_BIN} gen-key-pair > ${CONFIGS_DIR}migration_admin_member_keys.json
        for b in {0..9}; do
            ${INSOLAR_BIN} gen-key-pair > ${CONFIGS_DIR}migration_daemon_${b}_member_keys.json
        done
        for b in {0..139}; do
            ${INSOLAR_BIN} gen-key-pair > ${CONFIGS_DIR}network_incentives_${b}_member_keys.json
        done
        for b in {0..39}; do
            ${INSOLAR_BIN} gen-key-pair > ${CONFIGS_DIR}application_incentives_${b}_member_keys.json
        done
        for b in {0..39}; do
            ${INSOLAR_BIN} gen-key-pair > ${CONFIGS_DIR}foundation_${b}_member_keys.json
        done
        ${INSOLAR_BIN} gen-key-pair > ${CONFIGS_DIR}funds_0_member_keys.json
        for b in {0..7}; do
            ${INSOLAR_BIN} gen-key-pair > ${CONFIGS_DIR}enterprise_${b}_member_keys.json
        done
    }
    generate_migration_addresses() {
        echo "generate migration addresses: ${CONFIGS_DIR}migration_addresses.json"
        ${INSOLAR_BIN} gen-migration-addresses > ${CONFIGS_DIR}migration_addresses.json
    }
    bootstrap() {
        echo "bootstrap start"
        generate_pulsar_keys
        generate_root_member_keys
        generate_migration_addresses
    }
    mkdir -p ${CONFIGS_DIR} /var/data/bootstrap/certs
    mkdir -p ${CONFIGS_DIR} /var/data/bootstrap/discovery-keys
    bootstrap
    $INSOLAR_BIN bootstrap -c $BOOTSTRAP_CONFIG --propernames=true
    MY_BIN_DIR=$( dirname "${BASH_SOURCE[0]}" )
    cd /var/data/bootstrap
    #todo fix cert path configuration in insolar
    kubectl -n insolar create secret generic node-certs --from-file=/go/src/github.com/insolar/assured-ledger --dry-run=client -o yaml | kubectl -n insolar apply -f -
    kubectl -n insolar create secret generic node-keys  --from-file=/var/data/bootstrap/discovery-keys --dry-run=client -o yaml | kubectl -n insolar apply -f -

---
apiVersion: v1
kind: Pod
metadata:
  name: bootstrap
  namespace: insolar
spec:
  serviceAccountName: insolar-bootstrap
  terminationGracePeriodSeconds: 10
  restartPolicy: Never
  containers:
    - name: gen
      image: insolar/assured-ledger:latest
      imagePullPolicy: IfNotPresent
      command: ["bash", "-c", "bash /app/bootstrap/run.sh"]
      volumeMounts:
        - name: database
          mountPath: /var/data
        - name: bootstrap-yaml
          mountPath: /etc/bootstrap
          readOnly: true
        - name: app-bootstrap
          mountPath: /app/bootstrap
        - name: heavy-config
          mountPath: /etc/insolar
          readOnly: true
  volumes:
    - name: bootstrap-yaml
      configMap:
        name: bootstrap-yaml
    - name: app-bootstrap
      configMap:
        name: app-bootstrap
    - name: database
      persistentVolumeClaim:
        claimName: database-heavy-0
    - name: heavy-config
      configMap:
        name: heavy-config
