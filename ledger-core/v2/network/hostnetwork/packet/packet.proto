syntax = "proto3";

package packet;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/insolar/assured-ledger/ledger-core/v2/insolar/pulsestor/pulse.proto";
import "github.com/insolar/assured-ledger/ledger-core/v2/network/consensus/adapters/candidate/profile.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.populate_all) = false;

message Packet {
    int32 polymorph = 16;

    bytes Sender = 20 [(gogoproto.customtype) = "github.com/insolar/assured-ledger/ledger-core/v2/network/hostnetwork/host.Host"];
    bytes Receiver = 21 [(gogoproto.customtype) = "github.com/insolar/assured-ledger/ledger-core/v2/network/hostnetwork/host.Host"];
    uint64 RequestID = 22;
    string TraceID = 23;
    bytes TraceSpanData = 24;

    uint32 Type = 26;


    oneof Payload {
        Request Request = 27;
        Response Response = 28;
    }
}

message Request {
    oneof Request {
        RPCRequest RPC = 2;
        PulseRequest Pulse = 3;
        BootstrapRequest Bootstrap = 4;
        AuthorizeRequest Authorize = 5;
        SignCertRequest SignCert = 6;
        UpdateScheduleRequest UpdateSchedule = 7;
        ReconnectRequest Reconnect = 8;
    }
}

message Response {
    oneof Response {
        RPCResponse RPC = 2;
        BasicResponse Basic = 3; // response for Cascade and Pulse requests
        BootstrapResponse Bootstrap = 4;
        AuthorizeResponse Authorize = 5;
        SignCertResponse SignCert = 6;
        ErrorResponse Error = 7;
        UpdateScheduleResponse UpdateSchedule = 8;
        ReconnectResponse Reconnect = 9;
    }
}

message RPCRequest {
    string Method = 1;
    bytes Data = 2;
}

message PulseRequest {
    pulsestor.PulseProto Pulse = 1;
}

message UpdateScheduleRequest {
    uint32 LastNodePulse = 1 [(gogoproto.customtype) = "github.com/insolar/assured-ledger/ledger-core/v2/pulse.Number", (gogoproto.nullable) = false];
    Permit Permit = 2;
}

message ReconnectRequest {
    bytes ReconnectTo = 1 [(gogoproto.customtype) = "github.com/insolar/assured-ledger/ledger-core/v2/network/hostnetwork/host.Host", (gogoproto.nullable) = false];
    Permit Permit = 2;
}

message BootstrapRequest {
    candidate.Profile CandidateProfile = 2 [(gogoproto.nullable) = false];
    pulsestor.PulseProto Pulse = 3 [(gogoproto.nullable) = false];
    Permit Permit = 4;
}

message AuthorizeData {
    bytes Certificate = 1;
    int64 Timestamp = 2;
    string Version = 3;
}

message AuthorizeRequest {
    AuthorizeData AuthorizeData = 1;
    bytes Signature = 2;
}


message SignCertRequest {
    bytes NodeRef = 1 [(gogoproto.customtype) = "github.com/insolar/assured-ledger/ledger-core/v2/reference.Global", (gogoproto.nullable) = false];
}

message RPCResponse {
    bytes Result = 1;
    string Error = 2;
}

enum BootstrapResponseCode {
    Accepted = 0;
    UpdateSchedule = 1;
    UpdateShortID = 2;
    Reject = 3;
}

message Permit {
    PermitPayload Payload = 1 [(gogoproto.nullable) = false];
    bytes Signature = 2;
}

message PermitPayload {
    bytes JoinerPublicKey = 1;
	int64 ExpireTimestamp = 2;
    bytes ReconnectTo = 3 [(gogoproto.customtype) = "github.com/insolar/assured-ledger/ledger-core/v2/network/hostnetwork/host.Host"];
    bytes AuthorityNodeRef = 4 [(gogoproto.customtype) = "github.com/insolar/assured-ledger/ledger-core/v2/reference.Global", (gogoproto.nullable) = false];
}

message BootstrapResponse {
    BootstrapResponseCode Code = 1;
    uint32 ETASeconds = 2;
    pulsestor.PulseProto Pulse = 3 [(gogoproto.nullable) = false];
}

message BasicResponse {
    bool Success = 1;
    string Error = 2;
}

enum AuthorizeResponseCode {
    Success = 0;
    WrongTimestamp = 2;
    WrongMandate = 3;
    WrongVersion = 4;
}

message AuthorizeResponse {
    AuthorizeResponseCode Code = 1;
    int64 Timestamp = 2;
    string Error = 3;
    Permit Permit = 4;
    uint32 DiscoveryCount = 5;
    pulsestor.PulseProto Pulse = 6;
}

message SignCertResponse {
    bytes Sign = 1;
}

message ErrorResponse {
    string Error = 1;
}

message UpdateScheduleResponse {
    // nuff said
}

message ReconnectResponse {
// nuff said
}
