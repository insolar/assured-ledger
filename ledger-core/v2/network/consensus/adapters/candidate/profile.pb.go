// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: profile.proto

package candidate

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_insolar_assured_ledger_ledger_core_v2_insolar_node "github.com/insolar/assured-ledger/ledger-core/v2/insolar/node"
	github_com_insolar_assured_ledger_ledger_core_v2_network_consensus_gcpv2_api_member "github.com/insolar/assured-ledger/ledger-core/v2/network/consensus/gcpv2/api/member"
	github_com_insolar_assured_ledger_ledger_core_v2_reference "github.com/insolar/assured-ledger/ledger-core/v2/reference"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Profile struct {
	Address     string                                                                                          `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Ref         github_com_insolar_assured_ledger_ledger_core_v2_reference.Global                               `protobuf:"bytes,2,opt,name=Ref,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/reference.Global" json:"Ref"`
	ShortID     github_com_insolar_assured_ledger_ledger_core_v2_insolar_node.ShortNodeID                       `protobuf:"varint,3,opt,name=ShortID,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/insolar/node.ShortNodeID" json:"ShortID"`
	PrimaryRole github_com_insolar_assured_ledger_ledger_core_v2_network_consensus_gcpv2_api_member.PrimaryRole `protobuf:"varint,4,opt,name=PrimaryRole,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/network/consensus/gcpv2/api/member.PrimaryRole" json:"PrimaryRole"`
	SpecialRole github_com_insolar_assured_ledger_ledger_core_v2_network_consensus_gcpv2_api_member.SpecialRole `protobuf:"varint,5,opt,name=SpecialRole,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/v2/network/consensus/gcpv2/api/member.SpecialRole" json:"SpecialRole"`
	Digest      []byte                                                                                          `protobuf:"bytes,6,opt,name=Digest,proto3" json:"Digest,omitempty"`
	Signature   []byte                                                                                          `protobuf:"bytes,7,opt,name=Signature,proto3" json:"Signature,omitempty"`
	PublicKey   []byte                                                                                          `protobuf:"bytes,8,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
}

func (m *Profile) Reset()      { *m = Profile{} }
func (*Profile) ProtoMessage() {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{0}
}
func (m *Profile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(m, src)
}
func (m *Profile) XXX_Size() int {
	return m.Size()
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Profile)(nil), "candidate.Profile")
}

func init() { proto.RegisterFile("profile.proto", fileDescriptor_744bf7a47b381504) }

var fileDescriptor_744bf7a47b381504 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xb1, 0x6f, 0x13, 0x31,
	0x18, 0xc5, 0x6d, 0x5a, 0x12, 0x72, 0xd0, 0xe5, 0x06, 0x74, 0x42, 0xc8, 0x8d, 0x98, 0xb2, 0xe4,
	0x2c, 0x95, 0x95, 0xa5, 0x51, 0x24, 0x14, 0x21, 0xa1, 0x70, 0x19, 0x19, 0x90, 0xcf, 0xfe, 0xe2,
	0x5a, 0x75, 0xec, 0x93, 0x7d, 0x57, 0xd4, 0x8d, 0x95, 0x8d, 0x3f, 0x83, 0x3f, 0x25, 0x63, 0xc6,
	0xc2, 0x50, 0x71, 0x97, 0x85, 0xb1, 0x23, 0x23, 0x8a, 0x2f, 0x81, 0x5b, 0x3b, 0x74, 0xba, 0x7b,
	0xdf, 0xfb, 0xfc, 0x7e, 0x4f, 0xb2, 0xa3, 0x93, 0xc2, 0xd9, 0xa5, 0xd2, 0x90, 0x16, 0xce, 0x96,
	0x36, 0x1e, 0x70, 0x66, 0x84, 0x12, 0xac, 0x84, 0x17, 0x63, 0xa9, 0xca, 0x8b, 0x2a, 0x4f, 0xb9,
	0x5d, 0x51, 0x69, 0xa5, 0xa5, 0x61, 0x23, 0xaf, 0x96, 0x41, 0x05, 0x11, 0xfe, 0xda, 0x93, 0xaf,
	0x7e, 0x1c, 0x47, 0xfd, 0x79, 0x9b, 0x15, 0x27, 0x51, 0xff, 0x5c, 0x08, 0x07, 0xde, 0x27, 0x78,
	0x88, 0x47, 0x83, 0xec, 0x20, 0xe3, 0x8f, 0xd1, 0x51, 0x06, 0xcb, 0xe4, 0xd1, 0x10, 0x8f, 0x9e,
	0x4d, 0x66, 0xeb, 0xdb, 0x53, 0xf4, 0xf3, 0xf6, 0xf4, 0xbc, 0x43, 0x52, 0xc6, 0x5b, 0xcd, 0x1c,
	0x65, 0xde, 0x57, 0x0e, 0xc4, 0x58, 0x83, 0x90, 0xe0, 0x68, 0xfb, 0x19, 0x73, 0xeb, 0x80, 0x5e,
	0x9d, 0x51, 0x07, 0x4b, 0x70, 0x60, 0x38, 0xa4, 0x6f, 0xb5, 0xcd, 0x99, 0xce, 0x76, 0xa9, 0xf1,
	0x65, 0xd4, 0x5f, 0x5c, 0x58, 0x57, 0xce, 0xa6, 0xc9, 0xd1, 0x10, 0x8f, 0x4e, 0x26, 0x1f, 0xf6,
	0x80, 0xd9, 0xbd, 0x01, 0x87, 0x2d, 0x63, 0x05, 0xa4, 0x21, 0xf4, 0xbd, 0x15, 0x30, 0x9b, 0x66,
	0x07, 0x42, 0xfc, 0x15, 0x47, 0x4f, 0xe7, 0x4e, 0xad, 0x98, 0xbb, 0xce, 0xac, 0x86, 0xe4, 0x38,
	0x10, 0xe5, 0x9e, 0xf8, 0xe9, 0xde, 0x44, 0x03, 0xe5, 0x67, 0xeb, 0x2e, 0x29, 0xb7, 0xc6, 0x83,
	0xf1, 0x95, 0xa7, 0x92, 0x17, 0x57, 0x67, 0x94, 0x15, 0x8a, 0xae, 0x60, 0x95, 0x83, 0x4b, 0x3b,
	0xb8, 0xac, 0xcb, 0x0e, 0x5d, 0x16, 0x05, 0x70, 0xc5, 0x74, 0xe8, 0xf2, 0xf8, 0xe1, 0xbb, 0x74,
	0x70, 0x59, 0x97, 0x1d, 0x3f, 0x8f, 0x7a, 0x53, 0x25, 0xc1, 0x97, 0x49, 0x6f, 0x77, 0xc9, 0xd9,
	0x5e, 0xc5, 0x2f, 0xa3, 0xc1, 0x42, 0x49, 0xc3, 0xca, 0xca, 0x41, 0xd2, 0x0f, 0xd6, 0xff, 0xc1,
	0xce, 0x9d, 0x57, 0xb9, 0x56, 0xfc, 0x1d, 0x5c, 0x27, 0x4f, 0x5a, 0xf7, 0xdf, 0x60, 0xf2, 0x66,
	0x5d, 0x13, 0xb4, 0xa9, 0x09, 0xba, 0xa9, 0x09, 0xba, 0xab, 0x09, 0xfe, 0x53, 0x13, 0xf4, 0xa5,
	0x21, 0xf8, 0x7b, 0x43, 0xf0, 0xba, 0x21, 0x78, 0xd3, 0x10, 0xfc, 0xab, 0x21, 0xf8, 0x77, 0x43,
	0xd0, 0x5d, 0x43, 0xf0, 0xb7, 0x2d, 0x41, 0x9b, 0x2d, 0x41, 0x37, 0x5b, 0x82, 0xf2, 0x5e, 0x78,
	0xa0, 0xaf, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x91, 0x5a, 0x36, 0xeb, 0x02, 0x00, 0x00,
}

func (this *Profile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Profile)
	if !ok {
		that2, ok := that.(Profile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Ref.Equal(that1.Ref) {
		return false
	}
	if !this.ShortID.Equal(that1.ShortID) {
		return false
	}
	if !this.PrimaryRole.Equal(that1.PrimaryRole) {
		return false
	}
	if !this.SpecialRole.Equal(that1.SpecialRole) {
		return false
	}
	if !bytes.Equal(this.Digest, that1.Digest) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	return true
}
func (this *Profile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&candidate.Profile{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Ref: "+fmt.Sprintf("%#v", this.Ref)+",\n")
	s = append(s, "ShortID: "+fmt.Sprintf("%#v", this.ShortID)+",\n")
	s = append(s, "PrimaryRole: "+fmt.Sprintf("%#v", this.PrimaryRole)+",\n")
	s = append(s, "SpecialRole: "+fmt.Sprintf("%#v", this.SpecialRole)+",\n")
	s = append(s, "Digest: "+fmt.Sprintf("%#v", this.Digest)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProfile(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Profile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Profile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Profile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Digest) > 0 {
		i -= len(m.Digest)
		copy(dAtA[i:], m.Digest)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Digest)))
		i--
		dAtA[i] = 0x32
	}
	if m.SpecialRole != 0 {
		i = encodeVarintProfile(dAtA, i, uint64(m.SpecialRole))
		i--
		dAtA[i] = 0x28
	}
	if m.PrimaryRole != 0 {
		i = encodeVarintProfile(dAtA, i, uint64(m.PrimaryRole))
		i--
		dAtA[i] = 0x20
	}
	if m.ShortID != 0 {
		i = encodeVarintProfile(dAtA, i, uint64(m.ShortID))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Ref.Size()
		i -= size
		if _, err := m.Ref.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProfile(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProfile(dAtA []byte, offset int, v uint64) int {
	offset -= sovProfile(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Profile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	l = m.Ref.Size()
	n += 1 + l + sovProfile(uint64(l))
	if m.ShortID != 0 {
		n += 1 + sovProfile(uint64(m.ShortID))
	}
	if m.PrimaryRole != 0 {
		n += 1 + sovProfile(uint64(m.PrimaryRole))
	}
	if m.SpecialRole != 0 {
		n += 1 + sovProfile(uint64(m.SpecialRole))
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func sovProfile(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProfile(x uint64) (n int) {
	return sovProfile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Profile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Profile{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Ref:` + fmt.Sprintf("%v", this.Ref) + `,`,
		`ShortID:` + fmt.Sprintf("%v", this.ShortID) + `,`,
		`PrimaryRole:` + fmt.Sprintf("%v", this.PrimaryRole) + `,`,
		`SpecialRole:` + fmt.Sprintf("%v", this.SpecialRole) + `,`,
		`Digest:` + fmt.Sprintf("%v", this.Digest) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProfile(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Profile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ref.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortID", wireType)
			}
			m.ShortID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShortID |= github_com_insolar_assured_ledger_ledger_core_v2_insolar_node.ShortNodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryRole", wireType)
			}
			m.PrimaryRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryRole |= github_com_insolar_assured_ledger_ledger_core_v2_network_consensus_gcpv2_api_member.PrimaryRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialRole", wireType)
			}
			m.SpecialRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialRole |= github_com_insolar_assured_ledger_ledger_core_v2_network_consensus_gcpv2_api_member.SpecialRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = append(m.Digest[:0], dAtA[iNdEx:postIndex]...)
			if m.Digest == nil {
				m.Digest = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProfile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProfile
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProfile
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProfile
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProfile        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProfile          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProfile = fmt.Errorf("proto: unexpected end of group")
)
