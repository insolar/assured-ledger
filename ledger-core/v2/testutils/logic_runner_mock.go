package testutils

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_insolar "github.com/insolar/assured-ledger/ledger-core/v2/insolar"
)

// LogicRunnerMock implements insolar.LogicRunner
type LogicRunnerMock struct {
	t minimock.Tester

	funcLRI          func()
	inspectFuncLRI   func()
	afterLRICounter  uint64
	beforeLRICounter uint64
	LRIMock          mLogicRunnerMockLRI

	funcOnPulse          func(ctx context.Context, p1 mm_insolar.Pulse, p2 mm_insolar.Pulse) (err error)
	inspectFuncOnPulse   func(ctx context.Context, p1 mm_insolar.Pulse, p2 mm_insolar.Pulse)
	afterOnPulseCounter  uint64
	beforeOnPulseCounter uint64
	OnPulseMock          mLogicRunnerMockOnPulse
}

// NewLogicRunnerMock returns a mock for insolar.LogicRunner
func NewLogicRunnerMock(t minimock.Tester) *LogicRunnerMock {
	m := &LogicRunnerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.LRIMock = mLogicRunnerMockLRI{mock: m}

	m.OnPulseMock = mLogicRunnerMockOnPulse{mock: m}
	m.OnPulseMock.callArgs = []*LogicRunnerMockOnPulseParams{}

	return m
}

type mLogicRunnerMockLRI struct {
	mock               *LogicRunnerMock
	defaultExpectation *LogicRunnerMockLRIExpectation
	expectations       []*LogicRunnerMockLRIExpectation
}

// LogicRunnerMockLRIExpectation specifies expectation struct of the LogicRunner.LRI
type LogicRunnerMockLRIExpectation struct {
	mock *LogicRunnerMock

	Counter uint64
}

// Expect sets up expected params for LogicRunner.LRI
func (mmLRI *mLogicRunnerMockLRI) Expect() *mLogicRunnerMockLRI {
	if mmLRI.mock.funcLRI != nil {
		mmLRI.mock.t.Fatalf("LogicRunnerMock.LRI mock is already set by Set")
	}

	if mmLRI.defaultExpectation == nil {
		mmLRI.defaultExpectation = &LogicRunnerMockLRIExpectation{}
	}

	return mmLRI
}

// Inspect accepts an inspector function that has same arguments as the LogicRunner.LRI
func (mmLRI *mLogicRunnerMockLRI) Inspect(f func()) *mLogicRunnerMockLRI {
	if mmLRI.mock.inspectFuncLRI != nil {
		mmLRI.mock.t.Fatalf("Inspect function is already set for LogicRunnerMock.LRI")
	}

	mmLRI.mock.inspectFuncLRI = f

	return mmLRI
}

// Return sets up results that will be returned by LogicRunner.LRI
func (mmLRI *mLogicRunnerMockLRI) Return() *LogicRunnerMock {
	if mmLRI.mock.funcLRI != nil {
		mmLRI.mock.t.Fatalf("LogicRunnerMock.LRI mock is already set by Set")
	}

	if mmLRI.defaultExpectation == nil {
		mmLRI.defaultExpectation = &LogicRunnerMockLRIExpectation{mock: mmLRI.mock}
	}

	return mmLRI.mock
}

//Set uses given function f to mock the LogicRunner.LRI method
func (mmLRI *mLogicRunnerMockLRI) Set(f func()) *LogicRunnerMock {
	if mmLRI.defaultExpectation != nil {
		mmLRI.mock.t.Fatalf("Default expectation is already set for the LogicRunner.LRI method")
	}

	if len(mmLRI.expectations) > 0 {
		mmLRI.mock.t.Fatalf("Some expectations are already set for the LogicRunner.LRI method")
	}

	mmLRI.mock.funcLRI = f
	return mmLRI.mock
}

// LRI implements insolar.LogicRunner
func (mmLRI *LogicRunnerMock) LRI() {
	mm_atomic.AddUint64(&mmLRI.beforeLRICounter, 1)
	defer mm_atomic.AddUint64(&mmLRI.afterLRICounter, 1)

	if mmLRI.inspectFuncLRI != nil {
		mmLRI.inspectFuncLRI()
	}

	if mmLRI.LRIMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLRI.LRIMock.defaultExpectation.Counter, 1)

		return

	}
	if mmLRI.funcLRI != nil {
		mmLRI.funcLRI()
		return
	}
	mmLRI.t.Fatalf("Unexpected call to LogicRunnerMock.LRI.")

}

// LRIAfterCounter returns a count of finished LogicRunnerMock.LRI invocations
func (mmLRI *LogicRunnerMock) LRIAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLRI.afterLRICounter)
}

// LRIBeforeCounter returns a count of LogicRunnerMock.LRI invocations
func (mmLRI *LogicRunnerMock) LRIBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLRI.beforeLRICounter)
}

// MinimockLRIDone returns true if the count of the LRI invocations corresponds
// the number of defined expectations
func (m *LogicRunnerMock) MinimockLRIDone() bool {
	for _, e := range m.LRIMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LRIMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLRICounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLRI != nil && mm_atomic.LoadUint64(&m.afterLRICounter) < 1 {
		return false
	}
	return true
}

// MinimockLRIInspect logs each unmet expectation
func (m *LogicRunnerMock) MinimockLRIInspect() {
	for _, e := range m.LRIMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to LogicRunnerMock.LRI")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LRIMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLRICounter) < 1 {
		m.t.Error("Expected call to LogicRunnerMock.LRI")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLRI != nil && mm_atomic.LoadUint64(&m.afterLRICounter) < 1 {
		m.t.Error("Expected call to LogicRunnerMock.LRI")
	}
}

type mLogicRunnerMockOnPulse struct {
	mock               *LogicRunnerMock
	defaultExpectation *LogicRunnerMockOnPulseExpectation
	expectations       []*LogicRunnerMockOnPulseExpectation

	callArgs []*LogicRunnerMockOnPulseParams
	mutex    sync.RWMutex
}

// LogicRunnerMockOnPulseExpectation specifies expectation struct of the LogicRunner.OnPulse
type LogicRunnerMockOnPulseExpectation struct {
	mock    *LogicRunnerMock
	params  *LogicRunnerMockOnPulseParams
	results *LogicRunnerMockOnPulseResults
	Counter uint64
}

// LogicRunnerMockOnPulseParams contains parameters of the LogicRunner.OnPulse
type LogicRunnerMockOnPulseParams struct {
	ctx context.Context
	p1  mm_insolar.Pulse
	p2  mm_insolar.Pulse
}

// LogicRunnerMockOnPulseResults contains results of the LogicRunner.OnPulse
type LogicRunnerMockOnPulseResults struct {
	err error
}

// Expect sets up expected params for LogicRunner.OnPulse
func (mmOnPulse *mLogicRunnerMockOnPulse) Expect(ctx context.Context, p1 mm_insolar.Pulse, p2 mm_insolar.Pulse) *mLogicRunnerMockOnPulse {
	if mmOnPulse.mock.funcOnPulse != nil {
		mmOnPulse.mock.t.Fatalf("LogicRunnerMock.OnPulse mock is already set by Set")
	}

	if mmOnPulse.defaultExpectation == nil {
		mmOnPulse.defaultExpectation = &LogicRunnerMockOnPulseExpectation{}
	}

	mmOnPulse.defaultExpectation.params = &LogicRunnerMockOnPulseParams{ctx, p1, p2}
	for _, e := range mmOnPulse.expectations {
		if minimock.Equal(e.params, mmOnPulse.defaultExpectation.params) {
			mmOnPulse.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOnPulse.defaultExpectation.params)
		}
	}

	return mmOnPulse
}

// Inspect accepts an inspector function that has same arguments as the LogicRunner.OnPulse
func (mmOnPulse *mLogicRunnerMockOnPulse) Inspect(f func(ctx context.Context, p1 mm_insolar.Pulse, p2 mm_insolar.Pulse)) *mLogicRunnerMockOnPulse {
	if mmOnPulse.mock.inspectFuncOnPulse != nil {
		mmOnPulse.mock.t.Fatalf("Inspect function is already set for LogicRunnerMock.OnPulse")
	}

	mmOnPulse.mock.inspectFuncOnPulse = f

	return mmOnPulse
}

// Return sets up results that will be returned by LogicRunner.OnPulse
func (mmOnPulse *mLogicRunnerMockOnPulse) Return(err error) *LogicRunnerMock {
	if mmOnPulse.mock.funcOnPulse != nil {
		mmOnPulse.mock.t.Fatalf("LogicRunnerMock.OnPulse mock is already set by Set")
	}

	if mmOnPulse.defaultExpectation == nil {
		mmOnPulse.defaultExpectation = &LogicRunnerMockOnPulseExpectation{mock: mmOnPulse.mock}
	}
	mmOnPulse.defaultExpectation.results = &LogicRunnerMockOnPulseResults{err}
	return mmOnPulse.mock
}

//Set uses given function f to mock the LogicRunner.OnPulse method
func (mmOnPulse *mLogicRunnerMockOnPulse) Set(f func(ctx context.Context, p1 mm_insolar.Pulse, p2 mm_insolar.Pulse) (err error)) *LogicRunnerMock {
	if mmOnPulse.defaultExpectation != nil {
		mmOnPulse.mock.t.Fatalf("Default expectation is already set for the LogicRunner.OnPulse method")
	}

	if len(mmOnPulse.expectations) > 0 {
		mmOnPulse.mock.t.Fatalf("Some expectations are already set for the LogicRunner.OnPulse method")
	}

	mmOnPulse.mock.funcOnPulse = f
	return mmOnPulse.mock
}

// When sets expectation for the LogicRunner.OnPulse which will trigger the result defined by the following
// Then helper
func (mmOnPulse *mLogicRunnerMockOnPulse) When(ctx context.Context, p1 mm_insolar.Pulse, p2 mm_insolar.Pulse) *LogicRunnerMockOnPulseExpectation {
	if mmOnPulse.mock.funcOnPulse != nil {
		mmOnPulse.mock.t.Fatalf("LogicRunnerMock.OnPulse mock is already set by Set")
	}

	expectation := &LogicRunnerMockOnPulseExpectation{
		mock:   mmOnPulse.mock,
		params: &LogicRunnerMockOnPulseParams{ctx, p1, p2},
	}
	mmOnPulse.expectations = append(mmOnPulse.expectations, expectation)
	return expectation
}

// Then sets up LogicRunner.OnPulse return parameters for the expectation previously defined by the When method
func (e *LogicRunnerMockOnPulseExpectation) Then(err error) *LogicRunnerMock {
	e.results = &LogicRunnerMockOnPulseResults{err}
	return e.mock
}

// OnPulse implements insolar.LogicRunner
func (mmOnPulse *LogicRunnerMock) OnPulse(ctx context.Context, p1 mm_insolar.Pulse, p2 mm_insolar.Pulse) (err error) {
	mm_atomic.AddUint64(&mmOnPulse.beforeOnPulseCounter, 1)
	defer mm_atomic.AddUint64(&mmOnPulse.afterOnPulseCounter, 1)

	if mmOnPulse.inspectFuncOnPulse != nil {
		mmOnPulse.inspectFuncOnPulse(ctx, p1, p2)
	}

	mm_params := &LogicRunnerMockOnPulseParams{ctx, p1, p2}

	// Record call args
	mmOnPulse.OnPulseMock.mutex.Lock()
	mmOnPulse.OnPulseMock.callArgs = append(mmOnPulse.OnPulseMock.callArgs, mm_params)
	mmOnPulse.OnPulseMock.mutex.Unlock()

	for _, e := range mmOnPulse.OnPulseMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmOnPulse.OnPulseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOnPulse.OnPulseMock.defaultExpectation.Counter, 1)
		mm_want := mmOnPulse.OnPulseMock.defaultExpectation.params
		mm_got := LogicRunnerMockOnPulseParams{ctx, p1, p2}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOnPulse.t.Errorf("LogicRunnerMock.OnPulse got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOnPulse.OnPulseMock.defaultExpectation.results
		if mm_results == nil {
			mmOnPulse.t.Fatal("No results are set for the LogicRunnerMock.OnPulse")
		}
		return (*mm_results).err
	}
	if mmOnPulse.funcOnPulse != nil {
		return mmOnPulse.funcOnPulse(ctx, p1, p2)
	}
	mmOnPulse.t.Fatalf("Unexpected call to LogicRunnerMock.OnPulse. %v %v %v", ctx, p1, p2)
	return
}

// OnPulseAfterCounter returns a count of finished LogicRunnerMock.OnPulse invocations
func (mmOnPulse *LogicRunnerMock) OnPulseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOnPulse.afterOnPulseCounter)
}

// OnPulseBeforeCounter returns a count of LogicRunnerMock.OnPulse invocations
func (mmOnPulse *LogicRunnerMock) OnPulseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOnPulse.beforeOnPulseCounter)
}

// Calls returns a list of arguments used in each call to LogicRunnerMock.OnPulse.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOnPulse *mLogicRunnerMockOnPulse) Calls() []*LogicRunnerMockOnPulseParams {
	mmOnPulse.mutex.RLock()

	argCopy := make([]*LogicRunnerMockOnPulseParams, len(mmOnPulse.callArgs))
	copy(argCopy, mmOnPulse.callArgs)

	mmOnPulse.mutex.RUnlock()

	return argCopy
}

// MinimockOnPulseDone returns true if the count of the OnPulse invocations corresponds
// the number of defined expectations
func (m *LogicRunnerMock) MinimockOnPulseDone() bool {
	for _, e := range m.OnPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.OnPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterOnPulseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOnPulse != nil && mm_atomic.LoadUint64(&m.afterOnPulseCounter) < 1 {
		return false
	}
	return true
}

// MinimockOnPulseInspect logs each unmet expectation
func (m *LogicRunnerMock) MinimockOnPulseInspect() {
	for _, e := range m.OnPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LogicRunnerMock.OnPulse with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.OnPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterOnPulseCounter) < 1 {
		if m.OnPulseMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LogicRunnerMock.OnPulse")
		} else {
			m.t.Errorf("Expected call to LogicRunnerMock.OnPulse with params: %#v", *m.OnPulseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOnPulse != nil && mm_atomic.LoadUint64(&m.afterOnPulseCounter) < 1 {
		m.t.Error("Expected call to LogicRunnerMock.OnPulse")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LogicRunnerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockLRIInspect()

		m.MinimockOnPulseInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LogicRunnerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LogicRunnerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockLRIDone() &&
		m.MinimockOnPulseDone()
}
