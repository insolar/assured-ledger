package lmn

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"io"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/assured-ledger/ledger-core/pulse"
	"github.com/insolar/assured-ledger/ledger-core/reference"
	"github.com/insolar/assured-ledger/ledger-core/rms"
)

// RecordReferenceBuilderServiceMock implements RecordReferenceBuilderService
type RecordReferenceBuilderServiceMock struct {
	t minimock.Tester

	funcAnticipatedRefFromBytes          func(g1 reference.Global, n1 pulse.Number, ba1 []byte) (g2 reference.Global)
	inspectFuncAnticipatedRefFromBytes   func(g1 reference.Global, n1 pulse.Number, ba1 []byte)
	afterAnticipatedRefFromBytesCounter  uint64
	beforeAnticipatedRefFromBytesCounter uint64
	AnticipatedRefFromBytesMock          mRecordReferenceBuilderServiceMockAnticipatedRefFromBytes

	funcAnticipatedRefFromRecord          func(g1 reference.Global, n1 pulse.Number, b1 rms.BasicRecord) (g2 reference.Global)
	inspectFuncAnticipatedRefFromRecord   func(g1 reference.Global, n1 pulse.Number, b1 rms.BasicRecord)
	afterAnticipatedRefFromRecordCounter  uint64
	beforeAnticipatedRefFromRecordCounter uint64
	AnticipatedRefFromRecordMock          mRecordReferenceBuilderServiceMockAnticipatedRefFromRecord

	funcAnticipatedRefFromWriterTo          func(g1 reference.Global, n1 pulse.Number, w1 io.WriterTo) (g2 reference.Global)
	inspectFuncAnticipatedRefFromWriterTo   func(g1 reference.Global, n1 pulse.Number, w1 io.WriterTo)
	afterAnticipatedRefFromWriterToCounter  uint64
	beforeAnticipatedRefFromWriterToCounter uint64
	AnticipatedRefFromWriterToMock          mRecordReferenceBuilderServiceMockAnticipatedRefFromWriterTo
}

// NewRecordReferenceBuilderServiceMock returns a mock for RecordReferenceBuilderService
func NewRecordReferenceBuilderServiceMock(t minimock.Tester) *RecordReferenceBuilderServiceMock {
	m := &RecordReferenceBuilderServiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AnticipatedRefFromBytesMock = mRecordReferenceBuilderServiceMockAnticipatedRefFromBytes{mock: m}
	m.AnticipatedRefFromBytesMock.callArgs = []*RecordReferenceBuilderServiceMockAnticipatedRefFromBytesParams{}

	m.AnticipatedRefFromRecordMock = mRecordReferenceBuilderServiceMockAnticipatedRefFromRecord{mock: m}
	m.AnticipatedRefFromRecordMock.callArgs = []*RecordReferenceBuilderServiceMockAnticipatedRefFromRecordParams{}

	m.AnticipatedRefFromWriterToMock = mRecordReferenceBuilderServiceMockAnticipatedRefFromWriterTo{mock: m}
	m.AnticipatedRefFromWriterToMock.callArgs = []*RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToParams{}

	return m
}

type mRecordReferenceBuilderServiceMockAnticipatedRefFromBytes struct {
	mock               *RecordReferenceBuilderServiceMock
	defaultExpectation *RecordReferenceBuilderServiceMockAnticipatedRefFromBytesExpectation
	expectations       []*RecordReferenceBuilderServiceMockAnticipatedRefFromBytesExpectation

	callArgs []*RecordReferenceBuilderServiceMockAnticipatedRefFromBytesParams
	mutex    sync.RWMutex
}

// RecordReferenceBuilderServiceMockAnticipatedRefFromBytesExpectation specifies expectation struct of the RecordReferenceBuilderService.AnticipatedRefFromBytes
type RecordReferenceBuilderServiceMockAnticipatedRefFromBytesExpectation struct {
	mock    *RecordReferenceBuilderServiceMock
	params  *RecordReferenceBuilderServiceMockAnticipatedRefFromBytesParams
	results *RecordReferenceBuilderServiceMockAnticipatedRefFromBytesResults
	Counter uint64
}

// RecordReferenceBuilderServiceMockAnticipatedRefFromBytesParams contains parameters of the RecordReferenceBuilderService.AnticipatedRefFromBytes
type RecordReferenceBuilderServiceMockAnticipatedRefFromBytesParams struct {
	g1  reference.Global
	n1  pulse.Number
	ba1 []byte
}

// RecordReferenceBuilderServiceMockAnticipatedRefFromBytesResults contains results of the RecordReferenceBuilderService.AnticipatedRefFromBytes
type RecordReferenceBuilderServiceMockAnticipatedRefFromBytesResults struct {
	g2 reference.Global
}

// Expect sets up expected params for RecordReferenceBuilderService.AnticipatedRefFromBytes
func (mmAnticipatedRefFromBytes *mRecordReferenceBuilderServiceMockAnticipatedRefFromBytes) Expect(g1 reference.Global, n1 pulse.Number, ba1 []byte) *mRecordReferenceBuilderServiceMockAnticipatedRefFromBytes {
	if mmAnticipatedRefFromBytes.mock.funcAnticipatedRefFromBytes != nil {
		mmAnticipatedRefFromBytes.mock.t.Fatalf("RecordReferenceBuilderServiceMock.AnticipatedRefFromBytes mock is already set by Set")
	}

	if mmAnticipatedRefFromBytes.defaultExpectation == nil {
		mmAnticipatedRefFromBytes.defaultExpectation = &RecordReferenceBuilderServiceMockAnticipatedRefFromBytesExpectation{}
	}

	mmAnticipatedRefFromBytes.defaultExpectation.params = &RecordReferenceBuilderServiceMockAnticipatedRefFromBytesParams{g1, n1, ba1}
	for _, e := range mmAnticipatedRefFromBytes.expectations {
		if minimock.Equal(e.params, mmAnticipatedRefFromBytes.defaultExpectation.params) {
			mmAnticipatedRefFromBytes.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAnticipatedRefFromBytes.defaultExpectation.params)
		}
	}

	return mmAnticipatedRefFromBytes
}

// Inspect accepts an inspector function that has same arguments as the RecordReferenceBuilderService.AnticipatedRefFromBytes
func (mmAnticipatedRefFromBytes *mRecordReferenceBuilderServiceMockAnticipatedRefFromBytes) Inspect(f func(g1 reference.Global, n1 pulse.Number, ba1 []byte)) *mRecordReferenceBuilderServiceMockAnticipatedRefFromBytes {
	if mmAnticipatedRefFromBytes.mock.inspectFuncAnticipatedRefFromBytes != nil {
		mmAnticipatedRefFromBytes.mock.t.Fatalf("Inspect function is already set for RecordReferenceBuilderServiceMock.AnticipatedRefFromBytes")
	}

	mmAnticipatedRefFromBytes.mock.inspectFuncAnticipatedRefFromBytes = f

	return mmAnticipatedRefFromBytes
}

// Return sets up results that will be returned by RecordReferenceBuilderService.AnticipatedRefFromBytes
func (mmAnticipatedRefFromBytes *mRecordReferenceBuilderServiceMockAnticipatedRefFromBytes) Return(g2 reference.Global) *RecordReferenceBuilderServiceMock {
	if mmAnticipatedRefFromBytes.mock.funcAnticipatedRefFromBytes != nil {
		mmAnticipatedRefFromBytes.mock.t.Fatalf("RecordReferenceBuilderServiceMock.AnticipatedRefFromBytes mock is already set by Set")
	}

	if mmAnticipatedRefFromBytes.defaultExpectation == nil {
		mmAnticipatedRefFromBytes.defaultExpectation = &RecordReferenceBuilderServiceMockAnticipatedRefFromBytesExpectation{mock: mmAnticipatedRefFromBytes.mock}
	}
	mmAnticipatedRefFromBytes.defaultExpectation.results = &RecordReferenceBuilderServiceMockAnticipatedRefFromBytesResults{g2}
	return mmAnticipatedRefFromBytes.mock
}

//Set uses given function f to mock the RecordReferenceBuilderService.AnticipatedRefFromBytes method
func (mmAnticipatedRefFromBytes *mRecordReferenceBuilderServiceMockAnticipatedRefFromBytes) Set(f func(g1 reference.Global, n1 pulse.Number, ba1 []byte) (g2 reference.Global)) *RecordReferenceBuilderServiceMock {
	if mmAnticipatedRefFromBytes.defaultExpectation != nil {
		mmAnticipatedRefFromBytes.mock.t.Fatalf("Default expectation is already set for the RecordReferenceBuilderService.AnticipatedRefFromBytes method")
	}

	if len(mmAnticipatedRefFromBytes.expectations) > 0 {
		mmAnticipatedRefFromBytes.mock.t.Fatalf("Some expectations are already set for the RecordReferenceBuilderService.AnticipatedRefFromBytes method")
	}

	mmAnticipatedRefFromBytes.mock.funcAnticipatedRefFromBytes = f
	return mmAnticipatedRefFromBytes.mock
}

// When sets expectation for the RecordReferenceBuilderService.AnticipatedRefFromBytes which will trigger the result defined by the following
// Then helper
func (mmAnticipatedRefFromBytes *mRecordReferenceBuilderServiceMockAnticipatedRefFromBytes) When(g1 reference.Global, n1 pulse.Number, ba1 []byte) *RecordReferenceBuilderServiceMockAnticipatedRefFromBytesExpectation {
	if mmAnticipatedRefFromBytes.mock.funcAnticipatedRefFromBytes != nil {
		mmAnticipatedRefFromBytes.mock.t.Fatalf("RecordReferenceBuilderServiceMock.AnticipatedRefFromBytes mock is already set by Set")
	}

	expectation := &RecordReferenceBuilderServiceMockAnticipatedRefFromBytesExpectation{
		mock:   mmAnticipatedRefFromBytes.mock,
		params: &RecordReferenceBuilderServiceMockAnticipatedRefFromBytesParams{g1, n1, ba1},
	}
	mmAnticipatedRefFromBytes.expectations = append(mmAnticipatedRefFromBytes.expectations, expectation)
	return expectation
}

// Then sets up RecordReferenceBuilderService.AnticipatedRefFromBytes return parameters for the expectation previously defined by the When method
func (e *RecordReferenceBuilderServiceMockAnticipatedRefFromBytesExpectation) Then(g2 reference.Global) *RecordReferenceBuilderServiceMock {
	e.results = &RecordReferenceBuilderServiceMockAnticipatedRefFromBytesResults{g2}
	return e.mock
}

// AnticipatedRefFromBytes implements RecordReferenceBuilderService
func (mmAnticipatedRefFromBytes *RecordReferenceBuilderServiceMock) AnticipatedRefFromBytes(g1 reference.Global, n1 pulse.Number, ba1 []byte) (g2 reference.Global) {
	mm_atomic.AddUint64(&mmAnticipatedRefFromBytes.beforeAnticipatedRefFromBytesCounter, 1)
	defer mm_atomic.AddUint64(&mmAnticipatedRefFromBytes.afterAnticipatedRefFromBytesCounter, 1)

	if mmAnticipatedRefFromBytes.inspectFuncAnticipatedRefFromBytes != nil {
		mmAnticipatedRefFromBytes.inspectFuncAnticipatedRefFromBytes(g1, n1, ba1)
	}

	mm_params := &RecordReferenceBuilderServiceMockAnticipatedRefFromBytesParams{g1, n1, ba1}

	// Record call args
	mmAnticipatedRefFromBytes.AnticipatedRefFromBytesMock.mutex.Lock()
	mmAnticipatedRefFromBytes.AnticipatedRefFromBytesMock.callArgs = append(mmAnticipatedRefFromBytes.AnticipatedRefFromBytesMock.callArgs, mm_params)
	mmAnticipatedRefFromBytes.AnticipatedRefFromBytesMock.mutex.Unlock()

	for _, e := range mmAnticipatedRefFromBytes.AnticipatedRefFromBytesMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.g2
		}
	}

	if mmAnticipatedRefFromBytes.AnticipatedRefFromBytesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAnticipatedRefFromBytes.AnticipatedRefFromBytesMock.defaultExpectation.Counter, 1)
		mm_want := mmAnticipatedRefFromBytes.AnticipatedRefFromBytesMock.defaultExpectation.params
		mm_got := RecordReferenceBuilderServiceMockAnticipatedRefFromBytesParams{g1, n1, ba1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAnticipatedRefFromBytes.t.Errorf("RecordReferenceBuilderServiceMock.AnticipatedRefFromBytes got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAnticipatedRefFromBytes.AnticipatedRefFromBytesMock.defaultExpectation.results
		if mm_results == nil {
			mmAnticipatedRefFromBytes.t.Fatal("No results are set for the RecordReferenceBuilderServiceMock.AnticipatedRefFromBytes")
		}
		return (*mm_results).g2
	}
	if mmAnticipatedRefFromBytes.funcAnticipatedRefFromBytes != nil {
		return mmAnticipatedRefFromBytes.funcAnticipatedRefFromBytes(g1, n1, ba1)
	}
	mmAnticipatedRefFromBytes.t.Fatalf("Unexpected call to RecordReferenceBuilderServiceMock.AnticipatedRefFromBytes. %v %v %v", g1, n1, ba1)
	return
}

// AnticipatedRefFromBytesAfterCounter returns a count of finished RecordReferenceBuilderServiceMock.AnticipatedRefFromBytes invocations
func (mmAnticipatedRefFromBytes *RecordReferenceBuilderServiceMock) AnticipatedRefFromBytesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAnticipatedRefFromBytes.afterAnticipatedRefFromBytesCounter)
}

// AnticipatedRefFromBytesBeforeCounter returns a count of RecordReferenceBuilderServiceMock.AnticipatedRefFromBytes invocations
func (mmAnticipatedRefFromBytes *RecordReferenceBuilderServiceMock) AnticipatedRefFromBytesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAnticipatedRefFromBytes.beforeAnticipatedRefFromBytesCounter)
}

// Calls returns a list of arguments used in each call to RecordReferenceBuilderServiceMock.AnticipatedRefFromBytes.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAnticipatedRefFromBytes *mRecordReferenceBuilderServiceMockAnticipatedRefFromBytes) Calls() []*RecordReferenceBuilderServiceMockAnticipatedRefFromBytesParams {
	mmAnticipatedRefFromBytes.mutex.RLock()

	argCopy := make([]*RecordReferenceBuilderServiceMockAnticipatedRefFromBytesParams, len(mmAnticipatedRefFromBytes.callArgs))
	copy(argCopy, mmAnticipatedRefFromBytes.callArgs)

	mmAnticipatedRefFromBytes.mutex.RUnlock()

	return argCopy
}

// MinimockAnticipatedRefFromBytesDone returns true if the count of the AnticipatedRefFromBytes invocations corresponds
// the number of defined expectations
func (m *RecordReferenceBuilderServiceMock) MinimockAnticipatedRefFromBytesDone() bool {
	for _, e := range m.AnticipatedRefFromBytesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AnticipatedRefFromBytesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAnticipatedRefFromBytesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAnticipatedRefFromBytes != nil && mm_atomic.LoadUint64(&m.afterAnticipatedRefFromBytesCounter) < 1 {
		return false
	}
	return true
}

// MinimockAnticipatedRefFromBytesInspect logs each unmet expectation
func (m *RecordReferenceBuilderServiceMock) MinimockAnticipatedRefFromBytesInspect() {
	for _, e := range m.AnticipatedRefFromBytesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecordReferenceBuilderServiceMock.AnticipatedRefFromBytes with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AnticipatedRefFromBytesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAnticipatedRefFromBytesCounter) < 1 {
		if m.AnticipatedRefFromBytesMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RecordReferenceBuilderServiceMock.AnticipatedRefFromBytes")
		} else {
			m.t.Errorf("Expected call to RecordReferenceBuilderServiceMock.AnticipatedRefFromBytes with params: %#v", *m.AnticipatedRefFromBytesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAnticipatedRefFromBytes != nil && mm_atomic.LoadUint64(&m.afterAnticipatedRefFromBytesCounter) < 1 {
		m.t.Error("Expected call to RecordReferenceBuilderServiceMock.AnticipatedRefFromBytes")
	}
}

type mRecordReferenceBuilderServiceMockAnticipatedRefFromRecord struct {
	mock               *RecordReferenceBuilderServiceMock
	defaultExpectation *RecordReferenceBuilderServiceMockAnticipatedRefFromRecordExpectation
	expectations       []*RecordReferenceBuilderServiceMockAnticipatedRefFromRecordExpectation

	callArgs []*RecordReferenceBuilderServiceMockAnticipatedRefFromRecordParams
	mutex    sync.RWMutex
}

// RecordReferenceBuilderServiceMockAnticipatedRefFromRecordExpectation specifies expectation struct of the RecordReferenceBuilderService.AnticipatedRefFromRecord
type RecordReferenceBuilderServiceMockAnticipatedRefFromRecordExpectation struct {
	mock    *RecordReferenceBuilderServiceMock
	params  *RecordReferenceBuilderServiceMockAnticipatedRefFromRecordParams
	results *RecordReferenceBuilderServiceMockAnticipatedRefFromRecordResults
	Counter uint64
}

// RecordReferenceBuilderServiceMockAnticipatedRefFromRecordParams contains parameters of the RecordReferenceBuilderService.AnticipatedRefFromRecord
type RecordReferenceBuilderServiceMockAnticipatedRefFromRecordParams struct {
	g1 reference.Global
	n1 pulse.Number
	b1 rms.BasicRecord
}

// RecordReferenceBuilderServiceMockAnticipatedRefFromRecordResults contains results of the RecordReferenceBuilderService.AnticipatedRefFromRecord
type RecordReferenceBuilderServiceMockAnticipatedRefFromRecordResults struct {
	g2 reference.Global
}

// Expect sets up expected params for RecordReferenceBuilderService.AnticipatedRefFromRecord
func (mmAnticipatedRefFromRecord *mRecordReferenceBuilderServiceMockAnticipatedRefFromRecord) Expect(g1 reference.Global, n1 pulse.Number, b1 rms.BasicRecord) *mRecordReferenceBuilderServiceMockAnticipatedRefFromRecord {
	if mmAnticipatedRefFromRecord.mock.funcAnticipatedRefFromRecord != nil {
		mmAnticipatedRefFromRecord.mock.t.Fatalf("RecordReferenceBuilderServiceMock.AnticipatedRefFromRecord mock is already set by Set")
	}

	if mmAnticipatedRefFromRecord.defaultExpectation == nil {
		mmAnticipatedRefFromRecord.defaultExpectation = &RecordReferenceBuilderServiceMockAnticipatedRefFromRecordExpectation{}
	}

	mmAnticipatedRefFromRecord.defaultExpectation.params = &RecordReferenceBuilderServiceMockAnticipatedRefFromRecordParams{g1, n1, b1}
	for _, e := range mmAnticipatedRefFromRecord.expectations {
		if minimock.Equal(e.params, mmAnticipatedRefFromRecord.defaultExpectation.params) {
			mmAnticipatedRefFromRecord.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAnticipatedRefFromRecord.defaultExpectation.params)
		}
	}

	return mmAnticipatedRefFromRecord
}

// Inspect accepts an inspector function that has same arguments as the RecordReferenceBuilderService.AnticipatedRefFromRecord
func (mmAnticipatedRefFromRecord *mRecordReferenceBuilderServiceMockAnticipatedRefFromRecord) Inspect(f func(g1 reference.Global, n1 pulse.Number, b1 rms.BasicRecord)) *mRecordReferenceBuilderServiceMockAnticipatedRefFromRecord {
	if mmAnticipatedRefFromRecord.mock.inspectFuncAnticipatedRefFromRecord != nil {
		mmAnticipatedRefFromRecord.mock.t.Fatalf("Inspect function is already set for RecordReferenceBuilderServiceMock.AnticipatedRefFromRecord")
	}

	mmAnticipatedRefFromRecord.mock.inspectFuncAnticipatedRefFromRecord = f

	return mmAnticipatedRefFromRecord
}

// Return sets up results that will be returned by RecordReferenceBuilderService.AnticipatedRefFromRecord
func (mmAnticipatedRefFromRecord *mRecordReferenceBuilderServiceMockAnticipatedRefFromRecord) Return(g2 reference.Global) *RecordReferenceBuilderServiceMock {
	if mmAnticipatedRefFromRecord.mock.funcAnticipatedRefFromRecord != nil {
		mmAnticipatedRefFromRecord.mock.t.Fatalf("RecordReferenceBuilderServiceMock.AnticipatedRefFromRecord mock is already set by Set")
	}

	if mmAnticipatedRefFromRecord.defaultExpectation == nil {
		mmAnticipatedRefFromRecord.defaultExpectation = &RecordReferenceBuilderServiceMockAnticipatedRefFromRecordExpectation{mock: mmAnticipatedRefFromRecord.mock}
	}
	mmAnticipatedRefFromRecord.defaultExpectation.results = &RecordReferenceBuilderServiceMockAnticipatedRefFromRecordResults{g2}
	return mmAnticipatedRefFromRecord.mock
}

//Set uses given function f to mock the RecordReferenceBuilderService.AnticipatedRefFromRecord method
func (mmAnticipatedRefFromRecord *mRecordReferenceBuilderServiceMockAnticipatedRefFromRecord) Set(f func(g1 reference.Global, n1 pulse.Number, b1 rms.BasicRecord) (g2 reference.Global)) *RecordReferenceBuilderServiceMock {
	if mmAnticipatedRefFromRecord.defaultExpectation != nil {
		mmAnticipatedRefFromRecord.mock.t.Fatalf("Default expectation is already set for the RecordReferenceBuilderService.AnticipatedRefFromRecord method")
	}

	if len(mmAnticipatedRefFromRecord.expectations) > 0 {
		mmAnticipatedRefFromRecord.mock.t.Fatalf("Some expectations are already set for the RecordReferenceBuilderService.AnticipatedRefFromRecord method")
	}

	mmAnticipatedRefFromRecord.mock.funcAnticipatedRefFromRecord = f
	return mmAnticipatedRefFromRecord.mock
}

// When sets expectation for the RecordReferenceBuilderService.AnticipatedRefFromRecord which will trigger the result defined by the following
// Then helper
func (mmAnticipatedRefFromRecord *mRecordReferenceBuilderServiceMockAnticipatedRefFromRecord) When(g1 reference.Global, n1 pulse.Number, b1 rms.BasicRecord) *RecordReferenceBuilderServiceMockAnticipatedRefFromRecordExpectation {
	if mmAnticipatedRefFromRecord.mock.funcAnticipatedRefFromRecord != nil {
		mmAnticipatedRefFromRecord.mock.t.Fatalf("RecordReferenceBuilderServiceMock.AnticipatedRefFromRecord mock is already set by Set")
	}

	expectation := &RecordReferenceBuilderServiceMockAnticipatedRefFromRecordExpectation{
		mock:   mmAnticipatedRefFromRecord.mock,
		params: &RecordReferenceBuilderServiceMockAnticipatedRefFromRecordParams{g1, n1, b1},
	}
	mmAnticipatedRefFromRecord.expectations = append(mmAnticipatedRefFromRecord.expectations, expectation)
	return expectation
}

// Then sets up RecordReferenceBuilderService.AnticipatedRefFromRecord return parameters for the expectation previously defined by the When method
func (e *RecordReferenceBuilderServiceMockAnticipatedRefFromRecordExpectation) Then(g2 reference.Global) *RecordReferenceBuilderServiceMock {
	e.results = &RecordReferenceBuilderServiceMockAnticipatedRefFromRecordResults{g2}
	return e.mock
}

// AnticipatedRefFromRecord implements RecordReferenceBuilderService
func (mmAnticipatedRefFromRecord *RecordReferenceBuilderServiceMock) AnticipatedRefFromRecord(g1 reference.Global, n1 pulse.Number, b1 rms.BasicRecord) (g2 reference.Global) {
	mm_atomic.AddUint64(&mmAnticipatedRefFromRecord.beforeAnticipatedRefFromRecordCounter, 1)
	defer mm_atomic.AddUint64(&mmAnticipatedRefFromRecord.afterAnticipatedRefFromRecordCounter, 1)

	if mmAnticipatedRefFromRecord.inspectFuncAnticipatedRefFromRecord != nil {
		mmAnticipatedRefFromRecord.inspectFuncAnticipatedRefFromRecord(g1, n1, b1)
	}

	mm_params := &RecordReferenceBuilderServiceMockAnticipatedRefFromRecordParams{g1, n1, b1}

	// Record call args
	mmAnticipatedRefFromRecord.AnticipatedRefFromRecordMock.mutex.Lock()
	mmAnticipatedRefFromRecord.AnticipatedRefFromRecordMock.callArgs = append(mmAnticipatedRefFromRecord.AnticipatedRefFromRecordMock.callArgs, mm_params)
	mmAnticipatedRefFromRecord.AnticipatedRefFromRecordMock.mutex.Unlock()

	for _, e := range mmAnticipatedRefFromRecord.AnticipatedRefFromRecordMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.g2
		}
	}

	if mmAnticipatedRefFromRecord.AnticipatedRefFromRecordMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAnticipatedRefFromRecord.AnticipatedRefFromRecordMock.defaultExpectation.Counter, 1)
		mm_want := mmAnticipatedRefFromRecord.AnticipatedRefFromRecordMock.defaultExpectation.params
		mm_got := RecordReferenceBuilderServiceMockAnticipatedRefFromRecordParams{g1, n1, b1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAnticipatedRefFromRecord.t.Errorf("RecordReferenceBuilderServiceMock.AnticipatedRefFromRecord got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAnticipatedRefFromRecord.AnticipatedRefFromRecordMock.defaultExpectation.results
		if mm_results == nil {
			mmAnticipatedRefFromRecord.t.Fatal("No results are set for the RecordReferenceBuilderServiceMock.AnticipatedRefFromRecord")
		}
		return (*mm_results).g2
	}
	if mmAnticipatedRefFromRecord.funcAnticipatedRefFromRecord != nil {
		return mmAnticipatedRefFromRecord.funcAnticipatedRefFromRecord(g1, n1, b1)
	}
	mmAnticipatedRefFromRecord.t.Fatalf("Unexpected call to RecordReferenceBuilderServiceMock.AnticipatedRefFromRecord. %v %v %v", g1, n1, b1)
	return
}

// AnticipatedRefFromRecordAfterCounter returns a count of finished RecordReferenceBuilderServiceMock.AnticipatedRefFromRecord invocations
func (mmAnticipatedRefFromRecord *RecordReferenceBuilderServiceMock) AnticipatedRefFromRecordAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAnticipatedRefFromRecord.afterAnticipatedRefFromRecordCounter)
}

// AnticipatedRefFromRecordBeforeCounter returns a count of RecordReferenceBuilderServiceMock.AnticipatedRefFromRecord invocations
func (mmAnticipatedRefFromRecord *RecordReferenceBuilderServiceMock) AnticipatedRefFromRecordBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAnticipatedRefFromRecord.beforeAnticipatedRefFromRecordCounter)
}

// Calls returns a list of arguments used in each call to RecordReferenceBuilderServiceMock.AnticipatedRefFromRecord.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAnticipatedRefFromRecord *mRecordReferenceBuilderServiceMockAnticipatedRefFromRecord) Calls() []*RecordReferenceBuilderServiceMockAnticipatedRefFromRecordParams {
	mmAnticipatedRefFromRecord.mutex.RLock()

	argCopy := make([]*RecordReferenceBuilderServiceMockAnticipatedRefFromRecordParams, len(mmAnticipatedRefFromRecord.callArgs))
	copy(argCopy, mmAnticipatedRefFromRecord.callArgs)

	mmAnticipatedRefFromRecord.mutex.RUnlock()

	return argCopy
}

// MinimockAnticipatedRefFromRecordDone returns true if the count of the AnticipatedRefFromRecord invocations corresponds
// the number of defined expectations
func (m *RecordReferenceBuilderServiceMock) MinimockAnticipatedRefFromRecordDone() bool {
	for _, e := range m.AnticipatedRefFromRecordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AnticipatedRefFromRecordMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAnticipatedRefFromRecordCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAnticipatedRefFromRecord != nil && mm_atomic.LoadUint64(&m.afterAnticipatedRefFromRecordCounter) < 1 {
		return false
	}
	return true
}

// MinimockAnticipatedRefFromRecordInspect logs each unmet expectation
func (m *RecordReferenceBuilderServiceMock) MinimockAnticipatedRefFromRecordInspect() {
	for _, e := range m.AnticipatedRefFromRecordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecordReferenceBuilderServiceMock.AnticipatedRefFromRecord with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AnticipatedRefFromRecordMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAnticipatedRefFromRecordCounter) < 1 {
		if m.AnticipatedRefFromRecordMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RecordReferenceBuilderServiceMock.AnticipatedRefFromRecord")
		} else {
			m.t.Errorf("Expected call to RecordReferenceBuilderServiceMock.AnticipatedRefFromRecord with params: %#v", *m.AnticipatedRefFromRecordMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAnticipatedRefFromRecord != nil && mm_atomic.LoadUint64(&m.afterAnticipatedRefFromRecordCounter) < 1 {
		m.t.Error("Expected call to RecordReferenceBuilderServiceMock.AnticipatedRefFromRecord")
	}
}

type mRecordReferenceBuilderServiceMockAnticipatedRefFromWriterTo struct {
	mock               *RecordReferenceBuilderServiceMock
	defaultExpectation *RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToExpectation
	expectations       []*RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToExpectation

	callArgs []*RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToParams
	mutex    sync.RWMutex
}

// RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToExpectation specifies expectation struct of the RecordReferenceBuilderService.AnticipatedRefFromWriterTo
type RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToExpectation struct {
	mock    *RecordReferenceBuilderServiceMock
	params  *RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToParams
	results *RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToResults
	Counter uint64
}

// RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToParams contains parameters of the RecordReferenceBuilderService.AnticipatedRefFromWriterTo
type RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToParams struct {
	g1 reference.Global
	n1 pulse.Number
	w1 io.WriterTo
}

// RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToResults contains results of the RecordReferenceBuilderService.AnticipatedRefFromWriterTo
type RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToResults struct {
	g2 reference.Global
}

// Expect sets up expected params for RecordReferenceBuilderService.AnticipatedRefFromWriterTo
func (mmAnticipatedRefFromWriterTo *mRecordReferenceBuilderServiceMockAnticipatedRefFromWriterTo) Expect(g1 reference.Global, n1 pulse.Number, w1 io.WriterTo) *mRecordReferenceBuilderServiceMockAnticipatedRefFromWriterTo {
	if mmAnticipatedRefFromWriterTo.mock.funcAnticipatedRefFromWriterTo != nil {
		mmAnticipatedRefFromWriterTo.mock.t.Fatalf("RecordReferenceBuilderServiceMock.AnticipatedRefFromWriterTo mock is already set by Set")
	}

	if mmAnticipatedRefFromWriterTo.defaultExpectation == nil {
		mmAnticipatedRefFromWriterTo.defaultExpectation = &RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToExpectation{}
	}

	mmAnticipatedRefFromWriterTo.defaultExpectation.params = &RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToParams{g1, n1, w1}
	for _, e := range mmAnticipatedRefFromWriterTo.expectations {
		if minimock.Equal(e.params, mmAnticipatedRefFromWriterTo.defaultExpectation.params) {
			mmAnticipatedRefFromWriterTo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAnticipatedRefFromWriterTo.defaultExpectation.params)
		}
	}

	return mmAnticipatedRefFromWriterTo
}

// Inspect accepts an inspector function that has same arguments as the RecordReferenceBuilderService.AnticipatedRefFromWriterTo
func (mmAnticipatedRefFromWriterTo *mRecordReferenceBuilderServiceMockAnticipatedRefFromWriterTo) Inspect(f func(g1 reference.Global, n1 pulse.Number, w1 io.WriterTo)) *mRecordReferenceBuilderServiceMockAnticipatedRefFromWriterTo {
	if mmAnticipatedRefFromWriterTo.mock.inspectFuncAnticipatedRefFromWriterTo != nil {
		mmAnticipatedRefFromWriterTo.mock.t.Fatalf("Inspect function is already set for RecordReferenceBuilderServiceMock.AnticipatedRefFromWriterTo")
	}

	mmAnticipatedRefFromWriterTo.mock.inspectFuncAnticipatedRefFromWriterTo = f

	return mmAnticipatedRefFromWriterTo
}

// Return sets up results that will be returned by RecordReferenceBuilderService.AnticipatedRefFromWriterTo
func (mmAnticipatedRefFromWriterTo *mRecordReferenceBuilderServiceMockAnticipatedRefFromWriterTo) Return(g2 reference.Global) *RecordReferenceBuilderServiceMock {
	if mmAnticipatedRefFromWriterTo.mock.funcAnticipatedRefFromWriterTo != nil {
		mmAnticipatedRefFromWriterTo.mock.t.Fatalf("RecordReferenceBuilderServiceMock.AnticipatedRefFromWriterTo mock is already set by Set")
	}

	if mmAnticipatedRefFromWriterTo.defaultExpectation == nil {
		mmAnticipatedRefFromWriterTo.defaultExpectation = &RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToExpectation{mock: mmAnticipatedRefFromWriterTo.mock}
	}
	mmAnticipatedRefFromWriterTo.defaultExpectation.results = &RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToResults{g2}
	return mmAnticipatedRefFromWriterTo.mock
}

//Set uses given function f to mock the RecordReferenceBuilderService.AnticipatedRefFromWriterTo method
func (mmAnticipatedRefFromWriterTo *mRecordReferenceBuilderServiceMockAnticipatedRefFromWriterTo) Set(f func(g1 reference.Global, n1 pulse.Number, w1 io.WriterTo) (g2 reference.Global)) *RecordReferenceBuilderServiceMock {
	if mmAnticipatedRefFromWriterTo.defaultExpectation != nil {
		mmAnticipatedRefFromWriterTo.mock.t.Fatalf("Default expectation is already set for the RecordReferenceBuilderService.AnticipatedRefFromWriterTo method")
	}

	if len(mmAnticipatedRefFromWriterTo.expectations) > 0 {
		mmAnticipatedRefFromWriterTo.mock.t.Fatalf("Some expectations are already set for the RecordReferenceBuilderService.AnticipatedRefFromWriterTo method")
	}

	mmAnticipatedRefFromWriterTo.mock.funcAnticipatedRefFromWriterTo = f
	return mmAnticipatedRefFromWriterTo.mock
}

// When sets expectation for the RecordReferenceBuilderService.AnticipatedRefFromWriterTo which will trigger the result defined by the following
// Then helper
func (mmAnticipatedRefFromWriterTo *mRecordReferenceBuilderServiceMockAnticipatedRefFromWriterTo) When(g1 reference.Global, n1 pulse.Number, w1 io.WriterTo) *RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToExpectation {
	if mmAnticipatedRefFromWriterTo.mock.funcAnticipatedRefFromWriterTo != nil {
		mmAnticipatedRefFromWriterTo.mock.t.Fatalf("RecordReferenceBuilderServiceMock.AnticipatedRefFromWriterTo mock is already set by Set")
	}

	expectation := &RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToExpectation{
		mock:   mmAnticipatedRefFromWriterTo.mock,
		params: &RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToParams{g1, n1, w1},
	}
	mmAnticipatedRefFromWriterTo.expectations = append(mmAnticipatedRefFromWriterTo.expectations, expectation)
	return expectation
}

// Then sets up RecordReferenceBuilderService.AnticipatedRefFromWriterTo return parameters for the expectation previously defined by the When method
func (e *RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToExpectation) Then(g2 reference.Global) *RecordReferenceBuilderServiceMock {
	e.results = &RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToResults{g2}
	return e.mock
}

// AnticipatedRefFromWriterTo implements RecordReferenceBuilderService
func (mmAnticipatedRefFromWriterTo *RecordReferenceBuilderServiceMock) AnticipatedRefFromWriterTo(g1 reference.Global, n1 pulse.Number, w1 io.WriterTo) (g2 reference.Global) {
	mm_atomic.AddUint64(&mmAnticipatedRefFromWriterTo.beforeAnticipatedRefFromWriterToCounter, 1)
	defer mm_atomic.AddUint64(&mmAnticipatedRefFromWriterTo.afterAnticipatedRefFromWriterToCounter, 1)

	if mmAnticipatedRefFromWriterTo.inspectFuncAnticipatedRefFromWriterTo != nil {
		mmAnticipatedRefFromWriterTo.inspectFuncAnticipatedRefFromWriterTo(g1, n1, w1)
	}

	mm_params := &RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToParams{g1, n1, w1}

	// Record call args
	mmAnticipatedRefFromWriterTo.AnticipatedRefFromWriterToMock.mutex.Lock()
	mmAnticipatedRefFromWriterTo.AnticipatedRefFromWriterToMock.callArgs = append(mmAnticipatedRefFromWriterTo.AnticipatedRefFromWriterToMock.callArgs, mm_params)
	mmAnticipatedRefFromWriterTo.AnticipatedRefFromWriterToMock.mutex.Unlock()

	for _, e := range mmAnticipatedRefFromWriterTo.AnticipatedRefFromWriterToMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.g2
		}
	}

	if mmAnticipatedRefFromWriterTo.AnticipatedRefFromWriterToMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAnticipatedRefFromWriterTo.AnticipatedRefFromWriterToMock.defaultExpectation.Counter, 1)
		mm_want := mmAnticipatedRefFromWriterTo.AnticipatedRefFromWriterToMock.defaultExpectation.params
		mm_got := RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToParams{g1, n1, w1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAnticipatedRefFromWriterTo.t.Errorf("RecordReferenceBuilderServiceMock.AnticipatedRefFromWriterTo got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAnticipatedRefFromWriterTo.AnticipatedRefFromWriterToMock.defaultExpectation.results
		if mm_results == nil {
			mmAnticipatedRefFromWriterTo.t.Fatal("No results are set for the RecordReferenceBuilderServiceMock.AnticipatedRefFromWriterTo")
		}
		return (*mm_results).g2
	}
	if mmAnticipatedRefFromWriterTo.funcAnticipatedRefFromWriterTo != nil {
		return mmAnticipatedRefFromWriterTo.funcAnticipatedRefFromWriterTo(g1, n1, w1)
	}
	mmAnticipatedRefFromWriterTo.t.Fatalf("Unexpected call to RecordReferenceBuilderServiceMock.AnticipatedRefFromWriterTo. %v %v %v", g1, n1, w1)
	return
}

// AnticipatedRefFromWriterToAfterCounter returns a count of finished RecordReferenceBuilderServiceMock.AnticipatedRefFromWriterTo invocations
func (mmAnticipatedRefFromWriterTo *RecordReferenceBuilderServiceMock) AnticipatedRefFromWriterToAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAnticipatedRefFromWriterTo.afterAnticipatedRefFromWriterToCounter)
}

// AnticipatedRefFromWriterToBeforeCounter returns a count of RecordReferenceBuilderServiceMock.AnticipatedRefFromWriterTo invocations
func (mmAnticipatedRefFromWriterTo *RecordReferenceBuilderServiceMock) AnticipatedRefFromWriterToBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAnticipatedRefFromWriterTo.beforeAnticipatedRefFromWriterToCounter)
}

// Calls returns a list of arguments used in each call to RecordReferenceBuilderServiceMock.AnticipatedRefFromWriterTo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAnticipatedRefFromWriterTo *mRecordReferenceBuilderServiceMockAnticipatedRefFromWriterTo) Calls() []*RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToParams {
	mmAnticipatedRefFromWriterTo.mutex.RLock()

	argCopy := make([]*RecordReferenceBuilderServiceMockAnticipatedRefFromWriterToParams, len(mmAnticipatedRefFromWriterTo.callArgs))
	copy(argCopy, mmAnticipatedRefFromWriterTo.callArgs)

	mmAnticipatedRefFromWriterTo.mutex.RUnlock()

	return argCopy
}

// MinimockAnticipatedRefFromWriterToDone returns true if the count of the AnticipatedRefFromWriterTo invocations corresponds
// the number of defined expectations
func (m *RecordReferenceBuilderServiceMock) MinimockAnticipatedRefFromWriterToDone() bool {
	for _, e := range m.AnticipatedRefFromWriterToMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AnticipatedRefFromWriterToMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAnticipatedRefFromWriterToCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAnticipatedRefFromWriterTo != nil && mm_atomic.LoadUint64(&m.afterAnticipatedRefFromWriterToCounter) < 1 {
		return false
	}
	return true
}

// MinimockAnticipatedRefFromWriterToInspect logs each unmet expectation
func (m *RecordReferenceBuilderServiceMock) MinimockAnticipatedRefFromWriterToInspect() {
	for _, e := range m.AnticipatedRefFromWriterToMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecordReferenceBuilderServiceMock.AnticipatedRefFromWriterTo with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AnticipatedRefFromWriterToMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAnticipatedRefFromWriterToCounter) < 1 {
		if m.AnticipatedRefFromWriterToMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RecordReferenceBuilderServiceMock.AnticipatedRefFromWriterTo")
		} else {
			m.t.Errorf("Expected call to RecordReferenceBuilderServiceMock.AnticipatedRefFromWriterTo with params: %#v", *m.AnticipatedRefFromWriterToMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAnticipatedRefFromWriterTo != nil && mm_atomic.LoadUint64(&m.afterAnticipatedRefFromWriterToCounter) < 1 {
		m.t.Error("Expected call to RecordReferenceBuilderServiceMock.AnticipatedRefFromWriterTo")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RecordReferenceBuilderServiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAnticipatedRefFromBytesInspect()

		m.MinimockAnticipatedRefFromRecordInspect()

		m.MinimockAnticipatedRefFromWriterToInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RecordReferenceBuilderServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RecordReferenceBuilderServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAnticipatedRefFromBytesDone() &&
		m.MinimockAnticipatedRefFromRecordDone() &&
		m.MinimockAnticipatedRefFromWriterToDone()
}
