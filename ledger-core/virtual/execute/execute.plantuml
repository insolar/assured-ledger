@startuml
state "Init" as T01_S002
T01_S002 : SMExecute
[*] --> T01_S002
T01_S002 --> T01_S003
state "migrateDuringExecution" as T01_S010
T01_S010 : SMExecute
T01_S010 --[dotted]> T01_S010
T01_S010 --> T01_S011
state "migrateDuringSendOutgoing" as T01_S020
T01_S020 : SMExecute
T01_S020 --[dotted]> T01_S020
T01_S020 --> T01_S019
state "migrationDefault" as T01_S001
T01_S001 : SMExecute
T01_S001 --[dotted]> T01_S001
T01_S001 -->[*]
state "stepCheckRequest" as T01_S003
T01_S003 : SMExecute
T01_S003 --[dotted]> T01_S001
T01_S003 --> T01_S004
state "stepDeduplicate" as T01_S008
T01_S008 : SMExecute
T01_S008 --[dotted]> T01_S001
T01_S008 -> T01_S008 : [smachine.NotPassed]\n[(...).AcquireForThisStep().IsNotPassed()]...\nWaitShared, Sleep
T01_S008 -->[*] : [isDuplicate]\nError
T01_S008 --> T01_S009
state "stepExecuteAborted" as T01_S017
T01_S017 : SMExecute
T01_S017 --[dotted]> T01_S010
T01_S017 --[dotted]> T01_S020
T01_S017 -->[*] : Error
state "stepExecuteContinue" as T01_S021
T01_S021 : SMExecute
T01_S021 --[dotted]> T01_S010
T01_S021 --[dotted]> T01_S020
T01_S021 --> T01_S015 : PrepareExecutionContinue.DelayedStart
state "stepExecuteDecideNextStep" as T01_S016
T01_S016 : SMExecute
T01_S016 --[dotted]> T01_S010
T01_S016 --[dotted]> T01_S020
T01_S016 --> T01_S022 : [executionupdate.Done]\n
T01_S016 --> T01_S017 : [executionupdate.Aborted]\n
T01_S016 --> T01_S018 : [executionupdate.OutgoingCall]\n
state "stepExecuteOutgoing" as T01_S018
T01_S018 : SMExecute
T01_S018 --[dotted]> T01_S010
T01_S018 --[dotted]> T01_S020
T01_S018 --> T01_S019 : [s.outgoing!=nil]\n
T01_S018 --> T01_S021
state "stepExecuteStart" as T01_S014
T01_S014 : SMExecute
T01_S014 --[dotted]> T01_S010
T01_S014 --> T01_S015 : PrepareExecutionStart.DelayedStart
state "stepFinishRequest" as T01_S025
T01_S025 : SMExecute
T01_S025 --[dotted]> T01_S010
T01_S025 --[dotted]> T01_S020
T01_S025 --> T01_S023 : [s.migrationHappened]\n
T01_S025 -> T01_S025 : [smachine.NotPassed]\nWaitShared
T01_S025 -->[*]
state "stepGetDelegationToken" as T01_S011
T01_S011 : SMExecute
T01_S011 --[dotted]> T01_S010
T01_S011 --> T01_S012 : CallSubroutine
state "stepGetDelegationToken.2" as T01_S013
T01_S013 : SMExecute
T01_S013 --[dotted]> T01_S010
state "DYNAMIC stepAfterTokenGet" as T01_U001
T01_U001 : SMExecute
T01_U001 : UNKNOWN 
T01_S013 --> T01_U001
state "stepGetDelegationToken.subroutineSM.1" as T01_S012 <<sdlreceive>>
T01_S012 --[dotted]> T01_S010
T01_S012 --> T01_S013
state "stepGetObject" as T01_S004
T01_S004 : SMExecute
T01_S004 --[dotted]> T01_S001
T01_S004 -> T01_S004 : [smachine.NotPassed]\nWaitShared
T01_S004 --> T01_S005
state "stepIsolationNegotiation" as T01_S006
T01_S006 : SMExecute
T01_S006 --[dotted]> T01_S001
T01_S006 -> T01_S006 : [s.methodIsolation.IsZero()]\nDelayedStart.Sleep
T01_S006 -->[*] : [err!=nil]\nError
T01_S006 --> T01_S007
state "stepSaveNewObject" as T01_S022
T01_S022 : SMExecute
T01_S022 --[dotted]> T01_S010
T01_S022 --[dotted]> T01_S020
T01_S022 --> T01_S024 : [(...).migrationHappened||s.newObjectDescriptor==nil]\n
T01_S022 -> T01_S022 : [smachine.NotPassed]\nWaitShared
T01_S022 --> T01_S024
state "stepSendCallResult" as T01_S024
T01_S024 : SMExecute
T01_S024 --[dotted]> T01_S010
T01_S024 --[dotted]> T01_S020
T01_S024 --> T01_S025
state "stepSendDelegatedRequestFinished" as T01_S023
T01_S023 : SMExecute
T01_S023 --[dotted]> T01_S010
T01_S023 --[dotted]> T01_S020
T01_S023 -->[*]
state "stepSendOutgoing" as T01_S019
T01_S019 : SMExecute
T01_S019 --[dotted]> T01_S010
T01_S019 --[dotted]> T01_S020
T01_S019 -->[*] : [!(...).PublishGlobalAliasAndBargeIn()]\nError
T01_S019 --> T01_S021 : Sleep
state "stepStartRequestProcessing" as T01_S009
T01_S009 : SMExecute
T01_S009 --[dotted]> T01_S001
T01_S009 -> T01_S009 : [smachine.NotPassed]\nWaitShared
T01_S009 -->[*] : [isDuplicate]\n
T01_S009 --> T01_S014
state "stepTakeLock" as T01_S007
T01_S007 : SMExecute
T01_S007 --[dotted]> T01_S001
T01_S007 -> T01_S007 : [ctx.Acquire().IsNotPassed()]\nSleep
T01_S007 --> T01_S008 : [(...).GetRepeatedCall()==payload.RepeatedCall]\n
T01_S007 --> T01_S009
state "stepWaitExecutionResult" as T01_S015
T01_S015 : SMExecute
T01_S015 --[dotted]> T01_S010
T01_S015 --[dotted]> T01_S020
T01_S015 -> T01_S015 : [s.executionNewState==nil]\nSleep
T01_S015 --> T01_S016
state "stepWaitObjectReady" as T01_S005
T01_S005 : SMExecute
T01_S005 --[dotted]> T01_S001
T01_S005 -> T01_S005 : [smachine.NotPassed]\n[(...).AcquireForThisStep().IsNotPassed()]...\nWaitShared, Sleep
T01_S005 --> T01_S006
state "GetInitStateFor" as T00_S001
T00_S001 : dSMExecute
[*] --> T00_S001
state "s.Init" as T00_U002
T00_U002 : dSMExecute
T00_U002 : UNKNOWN 
T00_S001 --> T00_U002
@enduml
