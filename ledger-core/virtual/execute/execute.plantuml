@startuml
state "Init" as T01_S002
T01_S002 : SMExecute
[*] --> T01_S002
T01_S002 --> T01_S003 : Migrate: s.migrationDefault
state "StepWaitExecutionResult" as T01_S017
T01_S017 : SMExecute
T01_S017 --[dotted]> T01_S012
T01_S017 --[dashed]> T01_S017 : [s.executionNewState==nil]\nSleep
T01_S017 --> T01_S018
state "migrateDuringExecution" as T01_S012
T01_S012 : SMExecute
T01_S012 --[dashed]> [*] : [...&&(...).delegationTokenSpec.IsZero()]\nError
T01_S012 --> T01_S013
state "migrationDefault" as T01_S001
T01_S001 : SMExecute
T01_S001 --> [*]
state "s.messageSender" as T01_S022 <<sdlreceive>>
T01_S022 : DUPLICATE
state "s.runner" as T01_S007 <<sdlreceive>>
T01_S007 : DUPLICATE
state "stepAwaitSMCallSummary" as T01_S025
T01_S025 : SMExecute
T01_S025 --[dotted]> T01_S012
T01_S025 --[dotted]> T01_S001
T01_S025 --[dashed]> T01_S025 : [smachine.NotPassed]\n[(...).AcquireForThisStep().IsNotPassed()]...\nWaitShared, Sleep
T01_S025 --> T01_S026
state "stepCheckRequest" as T01_S003
T01_S003 : SMExecute
T01_S003 --[dotted]> T01_S001
T01_S003 --> T01_S004
state "stepDeduplicate" as T01_S008
T01_S008 : SMExecute
T01_S008 --[dotted]> T01_S001
T01_S008 --[dashed]> T01_S008 : [smachine.NotPassed]\nWaitShared
T01_S008 --> [*] : [duplicate]
T01_S008 --> T01_S009 : [!s.outgoingFromSlotPulse()]
T01_S008 --> T01_S010
state "stepDeduplicateUsingPendingsTable" as T01_S009
T01_S009 : SMExecute
T01_S009 --[dotted]> T01_S001
T01_S009 --[dashed]> T01_S009 : [smachine.NotPassed]\n[(...).AcquireForThisStep().IsNotPassed()]...\nWaitShared, Sleep
T01_S009 --> [*] : [isDuplicate]
T01_S009 --> T01_S010
state "stepExecuteAborted" as T01_S020
T01_S020 : SMExecute
T01_S020 --[dotted]> T01_S012
state T01_U001 <<fork>>
T01_S020 --> T01_U001
T01_U001 --> T01_S007 : PrepareExecutionAbort(ctx)
T01_U001 --[dashed]> T01_S028
state "stepExecuteContinue" as T01_S023
T01_S023 : SMExecute
T01_S023 --[dotted]> T01_S012
state T01_U002 <<fork>>
T01_S023 --> T01_U002
T01_U002 --> T01_S007 : Migrate: s
T01_U002 --[dashed]> T01_S017 : migrateDuringExecution\nPrepareExecutionContinue(ctx).
state "stepExecuteDecideNextStep" as T01_S018
T01_S018 : SMExecute
T01_S018 --[dotted]> T01_S012
T01_S018 --> T01_S024 : [execution.Done]
T01_S018 --> T01_S020 : [execution.Error]
T01_S018 --> T01_S020 : [execution.Abort]
T01_S018 --> T01_S019 : [execution.OutgoingCall]
state "stepExecuteOutgoing" as T01_S019
T01_S019 : SMExecute
T01_S019 --[dotted]> T01_S012
T01_S019 --> T01_S023 : [s.intolerableCall()]
T01_S019 --> T01_S023 : [...&&(...).Interference()==contract.CallTolerable]
T01_S019 --> T01_S021 : [s.outgoing!=nil]
T01_S019 --> T01_S023
state "stepExecuteStart" as T01_S016
T01_S016 : SMExecute
T01_S016 --[dotted]> T01_S012
state T01_U003 <<fork>>
T01_S016 --> T01_U003
T01_U003 --> T01_S007 : PrepareExecutionStart(ctx)
T01_U003 --[dashed]> T01_S017
state "stepFinishRequest" as T01_S029
T01_S029 : SMExecute
T01_S029 --[dotted]> T01_S012
T01_S029 --[dotted]> T01_S001
T01_S029 --> T01_S025 : [s.execution.Result!=nil]
T01_S029 --> T01_S027 : [s.migrationHappened]
T01_S029 --[dashed]> T01_S029 : [smachine.NotPassed]\nWaitShared
T01_S029 --> [*]
state "stepGetDelegationToken" as T01_S013
T01_S013 : SMExecute
T01_S013 --[dotted]> T01_S012
T01_S013 --> T01_S014 : CallSubroutine
state "stepGetDelegationToken.2" as T01_S015
T01_S015 : SMExecute
T01_S015 --[dotted]> T01_S012
T01_S015 --> T01_S021 : [s.outgoingWasSent]
state "DYNAMIC stepAfterTokenGet" as T01_U004
T01_U004 : SMExecute
T01_U004 : UNKNOWN 
T01_S015 --> T01_U004
state "stepGetDelegationToken.subroutineSM.1" as T01_S014 <<sdlreceive>>
T01_S014 --> T01_S015 : Migrate: <nil>
state "stepGetObject" as T01_S004
T01_S004 : SMExecute
T01_S004 --[dotted]> T01_S001
T01_S004 --[dashed]> T01_S004 : [smachine.NotPassed]\nWaitShared
T01_S004 --> T01_S005
state "stepIsolationNegotiation" as T01_S006
T01_S006 : SMExecute
T01_S006 --[dotted]> T01_S001
T01_S006 --> T01_S028 : [s.executionNewState!=nil]
state T01_U005 <<fork>>
T01_S006 --> T01_U005 : [s.methodIsolation.IsZero()]
T01_U005 --> T01_S007 : PrepareExecutionClassify(ctx)
T01_U005 --[dashed]> T01_S006 : Sleep
T01_S006 --> T01_S028 : [err!=nil]
T01_S006 --> T01_S008
state "stepPublishDataCallSummary" as T01_S026
T01_S026 : SMExecute
T01_S026 --[dotted]> T01_S012
T01_S026 --[dotted]> T01_S001
T01_S026 --[dashed]> T01_S026 : [smachine.NotPassed]\nWaitShared
T01_S026 --> T01_S027
state "stepSaveNewObject" as T01_S024
T01_S024 : SMExecute
T01_S024 --[dotted]> T01_S012
T01_S024 --> T01_S028 : [(...).migrationHappened||s.newObjectDescriptor==nil]
T01_S024 --[dashed]> T01_S024 : [smachine.NotPassed]\nWaitShared
T01_S024 --> T01_S028
state "stepSendCallResult" as T01_S028
T01_S028 : SMExecute
T01_S028 --[dotted]> T01_S012
T01_S028 --[dotted]> T01_S001
T01_S028 --> T01_S022 : PrepareAsync(ctx).WithoutAutoWakeUp()
T01_S028 --> T01_S029
state "stepSendDelegatedRequestFinished" as T01_S027
T01_S027 : SMExecute
T01_S027 --[dotted]> T01_S012
T01_S027 --[dotted]> T01_S001
T01_S027 --> T01_S022 : PrepareAsync(ctx).WithoutAutoWakeUp()
T01_S027 --> [*]
state "stepSendOutgoing" as T01_S021
T01_S021 : SMExecute
T01_S021 --[dotted]> T01_S012
T01_S021 --[dashed]> [*] : [!(...).PublishGlobalAliasAndBargeIn()]\nError
T01_S021 --> T01_S022 : PrepareAsync(ctx).WithoutAutoWakeUp()
T01_S021 --[dashed]> T01_S023 : Sleep
state "stepStartRequestProcessing" as T01_S011
T01_S011 : SMExecute
T01_S011 --[dotted]> T01_S001
T01_S011 --[dashed]> T01_S011 : [smachine.NotPassed]\nWaitShared
T01_S011 --> T01_S016 : Migrate: s.migrateDuringExecution
state "stepTakeLock" as T01_S010
T01_S010 : SMExecute
T01_S010 --[dotted]> T01_S001
T01_S010 --[dashed]> T01_S010 : [ctx.Acquire().IsNotPassed()]\nSleep
T01_S010 --> T01_S011
state "stepWaitObjectReady" as T01_S005
T01_S005 : SMExecute
T01_S005 --[dotted]> T01_S001
T01_S005 --[dashed]> T01_S005 : [smachine.NotPassed]\n[(...).AcquireForThisStep().IsNotPassed()]...\nWaitShared, Sleep
T01_S005 --> T01_S006
state "GetInitStateFor" as T00_S001
T00_S001 : dSMExecute
[*] --> T00_S001
state "s.Init" as T00_U006
T00_U006 : dSMExecute
T00_U006 : UNKNOWN 
T00_S001 --> T00_U006
@enduml
