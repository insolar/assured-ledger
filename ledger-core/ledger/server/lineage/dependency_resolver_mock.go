package lineage

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/assured-ledger/ledger-core/reference"
)

// DependencyResolverMock implements DependencyResolver
type DependencyResolverMock struct {
	t minimock.Tester

	funcFindLineAnyDependency          func(root reference.Holder, ref reference.LocalHolder) (r1 ResolvedDependency, err error)
	inspectFuncFindLineAnyDependency   func(root reference.Holder, ref reference.LocalHolder)
	afterFindLineAnyDependencyCounter  uint64
	beforeFindLineAnyDependencyCounter uint64
	FindLineAnyDependencyMock          mDependencyResolverMockFindLineAnyDependency

	funcFindOtherDependency          func(ref reference.Holder) (r1 ResolvedDependency, err error)
	inspectFuncFindOtherDependency   func(ref reference.Holder)
	afterFindOtherDependencyCounter  uint64
	beforeFindOtherDependencyCounter uint64
	FindOtherDependencyMock          mDependencyResolverMockFindOtherDependency
}

// NewDependencyResolverMock returns a mock for DependencyResolver
func NewDependencyResolverMock(t minimock.Tester) *DependencyResolverMock {
	m := &DependencyResolverMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.FindLineAnyDependencyMock = mDependencyResolverMockFindLineAnyDependency{mock: m}
	m.FindLineAnyDependencyMock.callArgs = []*DependencyResolverMockFindLineAnyDependencyParams{}

	m.FindOtherDependencyMock = mDependencyResolverMockFindOtherDependency{mock: m}
	m.FindOtherDependencyMock.callArgs = []*DependencyResolverMockFindOtherDependencyParams{}

	return m
}

type mDependencyResolverMockFindLineAnyDependency struct {
	mock               *DependencyResolverMock
	defaultExpectation *DependencyResolverMockFindLineAnyDependencyExpectation
	expectations       []*DependencyResolverMockFindLineAnyDependencyExpectation

	callArgs []*DependencyResolverMockFindLineAnyDependencyParams
	mutex    sync.RWMutex
}

// DependencyResolverMockFindLineAnyDependencyExpectation specifies expectation struct of the DependencyResolver.FindLineAnyDependency
type DependencyResolverMockFindLineAnyDependencyExpectation struct {
	mock    *DependencyResolverMock
	params  *DependencyResolverMockFindLineAnyDependencyParams
	results *DependencyResolverMockFindLineAnyDependencyResults
	Counter uint64
}

// DependencyResolverMockFindLineAnyDependencyParams contains parameters of the DependencyResolver.FindLineAnyDependency
type DependencyResolverMockFindLineAnyDependencyParams struct {
	root reference.Holder
	ref  reference.LocalHolder
}

// DependencyResolverMockFindLineAnyDependencyResults contains results of the DependencyResolver.FindLineAnyDependency
type DependencyResolverMockFindLineAnyDependencyResults struct {
	r1  ResolvedDependency
	err error
}

// Expect sets up expected params for DependencyResolver.FindLineAnyDependency
func (mmFindLineAnyDependency *mDependencyResolverMockFindLineAnyDependency) Expect(root reference.Holder, ref reference.LocalHolder) *mDependencyResolverMockFindLineAnyDependency {
	if mmFindLineAnyDependency.mock.funcFindLineAnyDependency != nil {
		mmFindLineAnyDependency.mock.t.Fatalf("DependencyResolverMock.FindLineAnyDependency mock is already set by Set")
	}

	if mmFindLineAnyDependency.defaultExpectation == nil {
		mmFindLineAnyDependency.defaultExpectation = &DependencyResolverMockFindLineAnyDependencyExpectation{}
	}

	mmFindLineAnyDependency.defaultExpectation.params = &DependencyResolverMockFindLineAnyDependencyParams{root, ref}
	for _, e := range mmFindLineAnyDependency.expectations {
		if minimock.Equal(e.params, mmFindLineAnyDependency.defaultExpectation.params) {
			mmFindLineAnyDependency.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFindLineAnyDependency.defaultExpectation.params)
		}
	}

	return mmFindLineAnyDependency
}

// Inspect accepts an inspector function that has same arguments as the DependencyResolver.FindLineAnyDependency
func (mmFindLineAnyDependency *mDependencyResolverMockFindLineAnyDependency) Inspect(f func(root reference.Holder, ref reference.LocalHolder)) *mDependencyResolverMockFindLineAnyDependency {
	if mmFindLineAnyDependency.mock.inspectFuncFindLineAnyDependency != nil {
		mmFindLineAnyDependency.mock.t.Fatalf("Inspect function is already set for DependencyResolverMock.FindLineAnyDependency")
	}

	mmFindLineAnyDependency.mock.inspectFuncFindLineAnyDependency = f

	return mmFindLineAnyDependency
}

// Return sets up results that will be returned by DependencyResolver.FindLineAnyDependency
func (mmFindLineAnyDependency *mDependencyResolverMockFindLineAnyDependency) Return(r1 ResolvedDependency, err error) *DependencyResolverMock {
	if mmFindLineAnyDependency.mock.funcFindLineAnyDependency != nil {
		mmFindLineAnyDependency.mock.t.Fatalf("DependencyResolverMock.FindLineAnyDependency mock is already set by Set")
	}

	if mmFindLineAnyDependency.defaultExpectation == nil {
		mmFindLineAnyDependency.defaultExpectation = &DependencyResolverMockFindLineAnyDependencyExpectation{mock: mmFindLineAnyDependency.mock}
	}
	mmFindLineAnyDependency.defaultExpectation.results = &DependencyResolverMockFindLineAnyDependencyResults{r1, err}
	return mmFindLineAnyDependency.mock
}

//Set uses given function f to mock the DependencyResolver.FindLineAnyDependency method
func (mmFindLineAnyDependency *mDependencyResolverMockFindLineAnyDependency) Set(f func(root reference.Holder, ref reference.LocalHolder) (r1 ResolvedDependency, err error)) *DependencyResolverMock {
	if mmFindLineAnyDependency.defaultExpectation != nil {
		mmFindLineAnyDependency.mock.t.Fatalf("Default expectation is already set for the DependencyResolver.FindLineAnyDependency method")
	}

	if len(mmFindLineAnyDependency.expectations) > 0 {
		mmFindLineAnyDependency.mock.t.Fatalf("Some expectations are already set for the DependencyResolver.FindLineAnyDependency method")
	}

	mmFindLineAnyDependency.mock.funcFindLineAnyDependency = f
	return mmFindLineAnyDependency.mock
}

// When sets expectation for the DependencyResolver.FindLineAnyDependency which will trigger the result defined by the following
// Then helper
func (mmFindLineAnyDependency *mDependencyResolverMockFindLineAnyDependency) When(root reference.Holder, ref reference.LocalHolder) *DependencyResolverMockFindLineAnyDependencyExpectation {
	if mmFindLineAnyDependency.mock.funcFindLineAnyDependency != nil {
		mmFindLineAnyDependency.mock.t.Fatalf("DependencyResolverMock.FindLineAnyDependency mock is already set by Set")
	}

	expectation := &DependencyResolverMockFindLineAnyDependencyExpectation{
		mock:   mmFindLineAnyDependency.mock,
		params: &DependencyResolverMockFindLineAnyDependencyParams{root, ref},
	}
	mmFindLineAnyDependency.expectations = append(mmFindLineAnyDependency.expectations, expectation)
	return expectation
}

// Then sets up DependencyResolver.FindLineAnyDependency return parameters for the expectation previously defined by the When method
func (e *DependencyResolverMockFindLineAnyDependencyExpectation) Then(r1 ResolvedDependency, err error) *DependencyResolverMock {
	e.results = &DependencyResolverMockFindLineAnyDependencyResults{r1, err}
	return e.mock
}

// FindLineAnyDependency implements DependencyResolver
func (mmFindLineAnyDependency *DependencyResolverMock) FindLineAnyDependency(root reference.Holder, ref reference.LocalHolder) (r1 ResolvedDependency, err error) {
	mm_atomic.AddUint64(&mmFindLineAnyDependency.beforeFindLineAnyDependencyCounter, 1)
	defer mm_atomic.AddUint64(&mmFindLineAnyDependency.afterFindLineAnyDependencyCounter, 1)

	if mmFindLineAnyDependency.inspectFuncFindLineAnyDependency != nil {
		mmFindLineAnyDependency.inspectFuncFindLineAnyDependency(root, ref)
	}

	mm_params := &DependencyResolverMockFindLineAnyDependencyParams{root, ref}

	// Record call args
	mmFindLineAnyDependency.FindLineAnyDependencyMock.mutex.Lock()
	mmFindLineAnyDependency.FindLineAnyDependencyMock.callArgs = append(mmFindLineAnyDependency.FindLineAnyDependencyMock.callArgs, mm_params)
	mmFindLineAnyDependency.FindLineAnyDependencyMock.mutex.Unlock()

	for _, e := range mmFindLineAnyDependency.FindLineAnyDependencyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmFindLineAnyDependency.FindLineAnyDependencyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFindLineAnyDependency.FindLineAnyDependencyMock.defaultExpectation.Counter, 1)
		mm_want := mmFindLineAnyDependency.FindLineAnyDependencyMock.defaultExpectation.params
		mm_got := DependencyResolverMockFindLineAnyDependencyParams{root, ref}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFindLineAnyDependency.t.Errorf("DependencyResolverMock.FindLineAnyDependency got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmFindLineAnyDependency.FindLineAnyDependencyMock.defaultExpectation.results
		if mm_results == nil {
			mmFindLineAnyDependency.t.Fatal("No results are set for the DependencyResolverMock.FindLineAnyDependency")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmFindLineAnyDependency.funcFindLineAnyDependency != nil {
		return mmFindLineAnyDependency.funcFindLineAnyDependency(root, ref)
	}
	mmFindLineAnyDependency.t.Fatalf("Unexpected call to DependencyResolverMock.FindLineAnyDependency. %v %v", root, ref)
	return
}

// FindLineAnyDependencyAfterCounter returns a count of finished DependencyResolverMock.FindLineAnyDependency invocations
func (mmFindLineAnyDependency *DependencyResolverMock) FindLineAnyDependencyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindLineAnyDependency.afterFindLineAnyDependencyCounter)
}

// FindLineAnyDependencyBeforeCounter returns a count of DependencyResolverMock.FindLineAnyDependency invocations
func (mmFindLineAnyDependency *DependencyResolverMock) FindLineAnyDependencyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindLineAnyDependency.beforeFindLineAnyDependencyCounter)
}

// Calls returns a list of arguments used in each call to DependencyResolverMock.FindLineAnyDependency.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFindLineAnyDependency *mDependencyResolverMockFindLineAnyDependency) Calls() []*DependencyResolverMockFindLineAnyDependencyParams {
	mmFindLineAnyDependency.mutex.RLock()

	argCopy := make([]*DependencyResolverMockFindLineAnyDependencyParams, len(mmFindLineAnyDependency.callArgs))
	copy(argCopy, mmFindLineAnyDependency.callArgs)

	mmFindLineAnyDependency.mutex.RUnlock()

	return argCopy
}

// MinimockFindLineAnyDependencyDone returns true if the count of the FindLineAnyDependency invocations corresponds
// the number of defined expectations
func (m *DependencyResolverMock) MinimockFindLineAnyDependencyDone() bool {
	for _, e := range m.FindLineAnyDependencyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindLineAnyDependencyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindLineAnyDependencyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindLineAnyDependency != nil && mm_atomic.LoadUint64(&m.afterFindLineAnyDependencyCounter) < 1 {
		return false
	}
	return true
}

// MinimockFindLineAnyDependencyInspect logs each unmet expectation
func (m *DependencyResolverMock) MinimockFindLineAnyDependencyInspect() {
	for _, e := range m.FindLineAnyDependencyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DependencyResolverMock.FindLineAnyDependency with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindLineAnyDependencyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindLineAnyDependencyCounter) < 1 {
		if m.FindLineAnyDependencyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DependencyResolverMock.FindLineAnyDependency")
		} else {
			m.t.Errorf("Expected call to DependencyResolverMock.FindLineAnyDependency with params: %#v", *m.FindLineAnyDependencyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindLineAnyDependency != nil && mm_atomic.LoadUint64(&m.afterFindLineAnyDependencyCounter) < 1 {
		m.t.Error("Expected call to DependencyResolverMock.FindLineAnyDependency")
	}
}

type mDependencyResolverMockFindOtherDependency struct {
	mock               *DependencyResolverMock
	defaultExpectation *DependencyResolverMockFindOtherDependencyExpectation
	expectations       []*DependencyResolverMockFindOtherDependencyExpectation

	callArgs []*DependencyResolverMockFindOtherDependencyParams
	mutex    sync.RWMutex
}

// DependencyResolverMockFindOtherDependencyExpectation specifies expectation struct of the DependencyResolver.FindOtherDependency
type DependencyResolverMockFindOtherDependencyExpectation struct {
	mock    *DependencyResolverMock
	params  *DependencyResolverMockFindOtherDependencyParams
	results *DependencyResolverMockFindOtherDependencyResults
	Counter uint64
}

// DependencyResolverMockFindOtherDependencyParams contains parameters of the DependencyResolver.FindOtherDependency
type DependencyResolverMockFindOtherDependencyParams struct {
	ref reference.Holder
}

// DependencyResolverMockFindOtherDependencyResults contains results of the DependencyResolver.FindOtherDependency
type DependencyResolverMockFindOtherDependencyResults struct {
	r1  ResolvedDependency
	err error
}

// Expect sets up expected params for DependencyResolver.FindOtherDependency
func (mmFindOtherDependency *mDependencyResolverMockFindOtherDependency) Expect(ref reference.Holder) *mDependencyResolverMockFindOtherDependency {
	if mmFindOtherDependency.mock.funcFindOtherDependency != nil {
		mmFindOtherDependency.mock.t.Fatalf("DependencyResolverMock.FindOtherDependency mock is already set by Set")
	}

	if mmFindOtherDependency.defaultExpectation == nil {
		mmFindOtherDependency.defaultExpectation = &DependencyResolverMockFindOtherDependencyExpectation{}
	}

	mmFindOtherDependency.defaultExpectation.params = &DependencyResolverMockFindOtherDependencyParams{ref}
	for _, e := range mmFindOtherDependency.expectations {
		if minimock.Equal(e.params, mmFindOtherDependency.defaultExpectation.params) {
			mmFindOtherDependency.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFindOtherDependency.defaultExpectation.params)
		}
	}

	return mmFindOtherDependency
}

// Inspect accepts an inspector function that has same arguments as the DependencyResolver.FindOtherDependency
func (mmFindOtherDependency *mDependencyResolverMockFindOtherDependency) Inspect(f func(ref reference.Holder)) *mDependencyResolverMockFindOtherDependency {
	if mmFindOtherDependency.mock.inspectFuncFindOtherDependency != nil {
		mmFindOtherDependency.mock.t.Fatalf("Inspect function is already set for DependencyResolverMock.FindOtherDependency")
	}

	mmFindOtherDependency.mock.inspectFuncFindOtherDependency = f

	return mmFindOtherDependency
}

// Return sets up results that will be returned by DependencyResolver.FindOtherDependency
func (mmFindOtherDependency *mDependencyResolverMockFindOtherDependency) Return(r1 ResolvedDependency, err error) *DependencyResolverMock {
	if mmFindOtherDependency.mock.funcFindOtherDependency != nil {
		mmFindOtherDependency.mock.t.Fatalf("DependencyResolverMock.FindOtherDependency mock is already set by Set")
	}

	if mmFindOtherDependency.defaultExpectation == nil {
		mmFindOtherDependency.defaultExpectation = &DependencyResolverMockFindOtherDependencyExpectation{mock: mmFindOtherDependency.mock}
	}
	mmFindOtherDependency.defaultExpectation.results = &DependencyResolverMockFindOtherDependencyResults{r1, err}
	return mmFindOtherDependency.mock
}

//Set uses given function f to mock the DependencyResolver.FindOtherDependency method
func (mmFindOtherDependency *mDependencyResolverMockFindOtherDependency) Set(f func(ref reference.Holder) (r1 ResolvedDependency, err error)) *DependencyResolverMock {
	if mmFindOtherDependency.defaultExpectation != nil {
		mmFindOtherDependency.mock.t.Fatalf("Default expectation is already set for the DependencyResolver.FindOtherDependency method")
	}

	if len(mmFindOtherDependency.expectations) > 0 {
		mmFindOtherDependency.mock.t.Fatalf("Some expectations are already set for the DependencyResolver.FindOtherDependency method")
	}

	mmFindOtherDependency.mock.funcFindOtherDependency = f
	return mmFindOtherDependency.mock
}

// When sets expectation for the DependencyResolver.FindOtherDependency which will trigger the result defined by the following
// Then helper
func (mmFindOtherDependency *mDependencyResolverMockFindOtherDependency) When(ref reference.Holder) *DependencyResolverMockFindOtherDependencyExpectation {
	if mmFindOtherDependency.mock.funcFindOtherDependency != nil {
		mmFindOtherDependency.mock.t.Fatalf("DependencyResolverMock.FindOtherDependency mock is already set by Set")
	}

	expectation := &DependencyResolverMockFindOtherDependencyExpectation{
		mock:   mmFindOtherDependency.mock,
		params: &DependencyResolverMockFindOtherDependencyParams{ref},
	}
	mmFindOtherDependency.expectations = append(mmFindOtherDependency.expectations, expectation)
	return expectation
}

// Then sets up DependencyResolver.FindOtherDependency return parameters for the expectation previously defined by the When method
func (e *DependencyResolverMockFindOtherDependencyExpectation) Then(r1 ResolvedDependency, err error) *DependencyResolverMock {
	e.results = &DependencyResolverMockFindOtherDependencyResults{r1, err}
	return e.mock
}

// FindOtherDependency implements DependencyResolver
func (mmFindOtherDependency *DependencyResolverMock) FindOtherDependency(ref reference.Holder) (r1 ResolvedDependency, err error) {
	mm_atomic.AddUint64(&mmFindOtherDependency.beforeFindOtherDependencyCounter, 1)
	defer mm_atomic.AddUint64(&mmFindOtherDependency.afterFindOtherDependencyCounter, 1)

	if mmFindOtherDependency.inspectFuncFindOtherDependency != nil {
		mmFindOtherDependency.inspectFuncFindOtherDependency(ref)
	}

	mm_params := &DependencyResolverMockFindOtherDependencyParams{ref}

	// Record call args
	mmFindOtherDependency.FindOtherDependencyMock.mutex.Lock()
	mmFindOtherDependency.FindOtherDependencyMock.callArgs = append(mmFindOtherDependency.FindOtherDependencyMock.callArgs, mm_params)
	mmFindOtherDependency.FindOtherDependencyMock.mutex.Unlock()

	for _, e := range mmFindOtherDependency.FindOtherDependencyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmFindOtherDependency.FindOtherDependencyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFindOtherDependency.FindOtherDependencyMock.defaultExpectation.Counter, 1)
		mm_want := mmFindOtherDependency.FindOtherDependencyMock.defaultExpectation.params
		mm_got := DependencyResolverMockFindOtherDependencyParams{ref}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFindOtherDependency.t.Errorf("DependencyResolverMock.FindOtherDependency got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmFindOtherDependency.FindOtherDependencyMock.defaultExpectation.results
		if mm_results == nil {
			mmFindOtherDependency.t.Fatal("No results are set for the DependencyResolverMock.FindOtherDependency")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmFindOtherDependency.funcFindOtherDependency != nil {
		return mmFindOtherDependency.funcFindOtherDependency(ref)
	}
	mmFindOtherDependency.t.Fatalf("Unexpected call to DependencyResolverMock.FindOtherDependency. %v", ref)
	return
}

// FindOtherDependencyAfterCounter returns a count of finished DependencyResolverMock.FindOtherDependency invocations
func (mmFindOtherDependency *DependencyResolverMock) FindOtherDependencyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindOtherDependency.afterFindOtherDependencyCounter)
}

// FindOtherDependencyBeforeCounter returns a count of DependencyResolverMock.FindOtherDependency invocations
func (mmFindOtherDependency *DependencyResolverMock) FindOtherDependencyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindOtherDependency.beforeFindOtherDependencyCounter)
}

// Calls returns a list of arguments used in each call to DependencyResolverMock.FindOtherDependency.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFindOtherDependency *mDependencyResolverMockFindOtherDependency) Calls() []*DependencyResolverMockFindOtherDependencyParams {
	mmFindOtherDependency.mutex.RLock()

	argCopy := make([]*DependencyResolverMockFindOtherDependencyParams, len(mmFindOtherDependency.callArgs))
	copy(argCopy, mmFindOtherDependency.callArgs)

	mmFindOtherDependency.mutex.RUnlock()

	return argCopy
}

// MinimockFindOtherDependencyDone returns true if the count of the FindOtherDependency invocations corresponds
// the number of defined expectations
func (m *DependencyResolverMock) MinimockFindOtherDependencyDone() bool {
	for _, e := range m.FindOtherDependencyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindOtherDependencyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindOtherDependencyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindOtherDependency != nil && mm_atomic.LoadUint64(&m.afterFindOtherDependencyCounter) < 1 {
		return false
	}
	return true
}

// MinimockFindOtherDependencyInspect logs each unmet expectation
func (m *DependencyResolverMock) MinimockFindOtherDependencyInspect() {
	for _, e := range m.FindOtherDependencyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DependencyResolverMock.FindOtherDependency with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindOtherDependencyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindOtherDependencyCounter) < 1 {
		if m.FindOtherDependencyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DependencyResolverMock.FindOtherDependency")
		} else {
			m.t.Errorf("Expected call to DependencyResolverMock.FindOtherDependency with params: %#v", *m.FindOtherDependencyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindOtherDependency != nil && mm_atomic.LoadUint64(&m.afterFindOtherDependencyCounter) < 1 {
		m.t.Error("Expected call to DependencyResolverMock.FindOtherDependency")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DependencyResolverMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockFindLineAnyDependencyInspect()

		m.MinimockFindOtherDependencyInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DependencyResolverMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DependencyResolverMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockFindLineAnyDependencyDone() &&
		m.MinimockFindOtherDependencyDone()
}
