package bundle

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// SnapshotWriterMock implements SnapshotWriter
type SnapshotWriterMock struct {
	t minimock.Tester

	funcTakeSnapshot          func() (s1 Snapshot)
	inspectFuncTakeSnapshot   func()
	afterTakeSnapshotCounter  uint64
	beforeTakeSnapshotCounter uint64
	TakeSnapshotMock          mSnapshotWriterMockTakeSnapshot
}

// NewSnapshotWriterMock returns a mock for SnapshotWriter
func NewSnapshotWriterMock(t minimock.Tester) *SnapshotWriterMock {
	m := &SnapshotWriterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.TakeSnapshotMock = mSnapshotWriterMockTakeSnapshot{mock: m}

	return m
}

type mSnapshotWriterMockTakeSnapshot struct {
	mock               *SnapshotWriterMock
	defaultExpectation *SnapshotWriterMockTakeSnapshotExpectation
	expectations       []*SnapshotWriterMockTakeSnapshotExpectation
}

// SnapshotWriterMockTakeSnapshotExpectation specifies expectation struct of the SnapshotWriter.TakeSnapshot
type SnapshotWriterMockTakeSnapshotExpectation struct {
	mock *SnapshotWriterMock

	results *SnapshotWriterMockTakeSnapshotResults
	Counter uint64
}

// SnapshotWriterMockTakeSnapshotResults contains results of the SnapshotWriter.TakeSnapshot
type SnapshotWriterMockTakeSnapshotResults struct {
	s1 Snapshot
}

// Expect sets up expected params for SnapshotWriter.TakeSnapshot
func (mmTakeSnapshot *mSnapshotWriterMockTakeSnapshot) Expect() *mSnapshotWriterMockTakeSnapshot {
	if mmTakeSnapshot.mock.funcTakeSnapshot != nil {
		mmTakeSnapshot.mock.t.Fatalf("SnapshotWriterMock.TakeSnapshot mock is already set by Set")
	}

	if mmTakeSnapshot.defaultExpectation == nil {
		mmTakeSnapshot.defaultExpectation = &SnapshotWriterMockTakeSnapshotExpectation{}
	}

	return mmTakeSnapshot
}

// Inspect accepts an inspector function that has same arguments as the SnapshotWriter.TakeSnapshot
func (mmTakeSnapshot *mSnapshotWriterMockTakeSnapshot) Inspect(f func()) *mSnapshotWriterMockTakeSnapshot {
	if mmTakeSnapshot.mock.inspectFuncTakeSnapshot != nil {
		mmTakeSnapshot.mock.t.Fatalf("Inspect function is already set for SnapshotWriterMock.TakeSnapshot")
	}

	mmTakeSnapshot.mock.inspectFuncTakeSnapshot = f

	return mmTakeSnapshot
}

// Return sets up results that will be returned by SnapshotWriter.TakeSnapshot
func (mmTakeSnapshot *mSnapshotWriterMockTakeSnapshot) Return(s1 Snapshot) *SnapshotWriterMock {
	if mmTakeSnapshot.mock.funcTakeSnapshot != nil {
		mmTakeSnapshot.mock.t.Fatalf("SnapshotWriterMock.TakeSnapshot mock is already set by Set")
	}

	if mmTakeSnapshot.defaultExpectation == nil {
		mmTakeSnapshot.defaultExpectation = &SnapshotWriterMockTakeSnapshotExpectation{mock: mmTakeSnapshot.mock}
	}
	mmTakeSnapshot.defaultExpectation.results = &SnapshotWriterMockTakeSnapshotResults{s1}
	return mmTakeSnapshot.mock
}

//Set uses given function f to mock the SnapshotWriter.TakeSnapshot method
func (mmTakeSnapshot *mSnapshotWriterMockTakeSnapshot) Set(f func() (s1 Snapshot)) *SnapshotWriterMock {
	if mmTakeSnapshot.defaultExpectation != nil {
		mmTakeSnapshot.mock.t.Fatalf("Default expectation is already set for the SnapshotWriter.TakeSnapshot method")
	}

	if len(mmTakeSnapshot.expectations) > 0 {
		mmTakeSnapshot.mock.t.Fatalf("Some expectations are already set for the SnapshotWriter.TakeSnapshot method")
	}

	mmTakeSnapshot.mock.funcTakeSnapshot = f
	return mmTakeSnapshot.mock
}

// TakeSnapshot implements SnapshotWriter
func (mmTakeSnapshot *SnapshotWriterMock) TakeSnapshot() (s1 Snapshot) {
	mm_atomic.AddUint64(&mmTakeSnapshot.beforeTakeSnapshotCounter, 1)
	defer mm_atomic.AddUint64(&mmTakeSnapshot.afterTakeSnapshotCounter, 1)

	if mmTakeSnapshot.inspectFuncTakeSnapshot != nil {
		mmTakeSnapshot.inspectFuncTakeSnapshot()
	}

	if mmTakeSnapshot.TakeSnapshotMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTakeSnapshot.TakeSnapshotMock.defaultExpectation.Counter, 1)

		mm_results := mmTakeSnapshot.TakeSnapshotMock.defaultExpectation.results
		if mm_results == nil {
			mmTakeSnapshot.t.Fatal("No results are set for the SnapshotWriterMock.TakeSnapshot")
		}
		return (*mm_results).s1
	}
	if mmTakeSnapshot.funcTakeSnapshot != nil {
		return mmTakeSnapshot.funcTakeSnapshot()
	}
	mmTakeSnapshot.t.Fatalf("Unexpected call to SnapshotWriterMock.TakeSnapshot.")
	return
}

// TakeSnapshotAfterCounter returns a count of finished SnapshotWriterMock.TakeSnapshot invocations
func (mmTakeSnapshot *SnapshotWriterMock) TakeSnapshotAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTakeSnapshot.afterTakeSnapshotCounter)
}

// TakeSnapshotBeforeCounter returns a count of SnapshotWriterMock.TakeSnapshot invocations
func (mmTakeSnapshot *SnapshotWriterMock) TakeSnapshotBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTakeSnapshot.beforeTakeSnapshotCounter)
}

// MinimockTakeSnapshotDone returns true if the count of the TakeSnapshot invocations corresponds
// the number of defined expectations
func (m *SnapshotWriterMock) MinimockTakeSnapshotDone() bool {
	for _, e := range m.TakeSnapshotMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TakeSnapshotMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTakeSnapshotCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTakeSnapshot != nil && mm_atomic.LoadUint64(&m.afterTakeSnapshotCounter) < 1 {
		return false
	}
	return true
}

// MinimockTakeSnapshotInspect logs each unmet expectation
func (m *SnapshotWriterMock) MinimockTakeSnapshotInspect() {
	for _, e := range m.TakeSnapshotMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to SnapshotWriterMock.TakeSnapshot")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TakeSnapshotMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTakeSnapshotCounter) < 1 {
		m.t.Error("Expected call to SnapshotWriterMock.TakeSnapshot")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTakeSnapshot != nil && mm_atomic.LoadUint64(&m.afterTakeSnapshotCounter) < 1 {
		m.t.Error("Expected call to SnapshotWriterMock.TakeSnapshot")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SnapshotWriterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockTakeSnapshotInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SnapshotWriterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SnapshotWriterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockTakeSnapshotDone()
}
