TEST_COUNT      ?= 1
FUNCTEST_COUNT  ?= 1
GOTEST          ?= go test
TEST_ARGS       ?= -timeout 1200s
TESTED_PACKAGES ?= $(shell go list ${ALL_PACKAGES} | grep -v "${MOCKS_PACKAGE}" | grep -v /drafts/)
PACKAGES        ?= $(shell go list ./... | grep -v /drafts/)
PULSAR_ONESHOT  ?= TRUE
EXTENDED_LOG    ?= "$(shell pwd)/integration_extended_test.log"

.PHONY: test_all
test_all: test_unit test_func test_slow ## run all tests (unit, func, slow)

.PHONY: test_unit
test_unit: ## run all unit tests
	$(GOTEST) -count=$(TEST_COUNT) $(TEST_ARGS) $(PACKAGES)

.PHONY: test_with_coverage
test_with_coverage: ## run unit and slow tests with generation of coverage file
	go-acc --covermode=count --output=coverage.tmp.out --ignore drafts ./... -- -v -tags="slowtest copylogtxt" -count=1 $(TEST_ARGS) -args TESTLOG_OUT=$(EXTENDED_LOG) TESTLOG_MARKS=1 TESTLOG_TXT=1 2>&1 | tee "integration_test.log"
	cat coverage.tmp.out | grep -v _mock.go > coverage.out
	go tool cover -html=coverage.out -o coverage.html

.PHONY: test_func
test_func: ## run functest FUNCTEST_COUNT times
	pkill -9 insolard || echo "No insolard running" # dirty hack to terminate all insolard processes
	PULSAR_ONESHOT=$(PULSAR_ONESHOT) \
	PULSAR_PULSETIME=$(PULSAR_PULSETIME) \
	CGO_ENABLED=1 $(GOTEST) -test.v $(TEST_ARGS) -tags "functest" ./application/functest -count=$(FUNCTEST_COUNT)

.PHONY: test_func_slow
test_func_slow: # Run functests as long as practical to catch unexpected behavior during pulse change
	FUNCTEST_COUNT=100 PULSAR_ONESHOT=FALSE PULSAR_PULSETIME=5000 TEST_ARGS='-timeout 1200s -failfast' make test_func

.PNONY: test_func_race
test_func_race: ## run functest 10 times with -race flag
	make clean
	GOBUILD='go build -race' FUNCTEST_COUNT=10 TEST_ARGS='-timeout 1200s -race' make test_func

.PHONY: test_slow
test_slow: ## run tests with slowtest tag
	$(GOTEST) -count=1 $(TEST_ARGS) -tags "slowtest convlogtxt" $(PACKAGES)

.PHONY: kube_start_net
kube_start_net: ## run insolar net in local kubernetes cluster
	./scripts/deploy/kube/run.sh

.PHONY: kube_stop_net
kube_stop_net: ## stop insolar net in local kubernetes cluster
	./scripts/deploy/kube/stop.sh

.PHONY: kube_drop_ingress
kube_drop_ingress: ## drop ingress from local cluster
	./scripts/deploy/kube/drop_ingress.sh

.PHONY: kube_apply_ingress
kube_apply_ingress: ## apply ingress manifests
	./scripts/deploy/kube/apply_ingress.sh

.PHONY: kube_apply_prometheus
kube_apply_prometheus: ## apply prometheus manifests
	./scripts/deploy/kube/apply_prometheus.sh

.PHONY: kube_drop_prometheus
kube_drop_prometheus: ## drop prometheus from local cluster
	./scripts/deploy/kube/drop_prometheus.sh

.PHONY: kube_collect_artifacts
kube_collect_artifacts: ## stop insolar net in local kubernetes cluster
	./scripts/deploy/kube/collect_artifacts.sh

.PHONY: test_func_kubernetes
test_func_kubernetes: ## run functest FUNCTEST_COUNT times in kubernetes cluster, net will be running after tests!
	make kube_start_net
	INSOLAR_FUNC_RPC_URL_PUBLIC="http://localhost/api/rpc" \
	INSOLAR_FUNC_RPC_URL="http://localhost/admin-api/rpc" \
	INSOLAR_FUNC_KEYS_PATH="/tmp/insolar/" \
	INSOLAR_FUNC_TESTWALLET_HOST="localhost" \
	PULSAR_ONESHOT=$(PULSAR_ONESHOT) \
	PULSAR_PULSETIME=$(PULSAR_PULSETIME) \
	CGO_ENABLED=1 $(GOTEST) -test.v $(TEST_ARGS) -tags "functest" ./application/functest -count=$(FUNCTEST_COUNT)

.PHONY: test_func_kubernetes_ci
test_func_kubernetes_ci: ## run functest FUNCTEST_COUNT times in kubernetes cluster
	INSOLAR_FUNC_RPC_URL_PUBLIC="http://localhost/api/rpc" \
	INSOLAR_FUNC_RPC_URL="http://localhost/admin-api/rpc" \
	INSOLAR_FUNC_KEYS_PATH="/tmp/insolar/" \
	INSOLAR_FUNC_TESTWALLET_HOST="localhost" \
	PULSAR_ONESHOT=$(PULSAR_ONESHOT) \
	PULSAR_PULSETIME=$(PULSAR_PULSETIME) \
	CGO_ENABLED=1 $(GOTEST) -test.v $(TEST_ARGS) -tags "functest" ./application/functest -count=$(FUNCTEST_COUNT)

.PHONY: publish_integration_tests
publish_integration_tests: ## send results to testrail
	${GOPATH}/bin/testrail-cli --URL=https://insolar.testrail.io/ --USER=$(TR_USER) --PASSWORD=$(TR_PASSWORD) --RUN_ID=103 --SKIP-DESC=true --FORMAT="text" --FILE="integration_test.log"

.PHONY: publish_functest
publish_functest: ## send results to testrail
	cat functional_test.log | grep "Test" > functional_test_clean.log
	${GOPATH}/bin/testrail-cli --URL=https://insolar.testrail.io/ --USER=$(TR_USER) --PASSWORD=$(TR_PASSWORD) --RUN_ID=105 --SKIP-DESC=true --FILE="functional_test_clean.log"
